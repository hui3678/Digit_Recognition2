
Digit_Recognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00074084  080079c0  080079c0  000179c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807ba44  0807ba44  000908b0  2**0
                  CONTENTS
  4 .ARM          00000008  0807ba44  0807ba44  0008ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807ba4c  0807ba4c  000908b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807ba4c  0807ba4c  0008ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807ba50  0807ba50  0008ba50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008b0  20000000  0807ba54  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200008b0  0807c304  000908b0  2**2
                  ALLOC
 10 ._user_heap_stack 00001204  20000a04  0807c304  00090a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000908b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9c8  00000000  00000000  000908e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebd  00000000  00000000  0009e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  000a0168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  000a0cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e43  00000000  00000000  000a1780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d20f  00000000  00000000  000c55c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db7ce  00000000  00000000  000d27d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001adfa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  001ae070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001b22c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001b238c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200008b0 	.word	0x200008b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007994 	.word	0x08007994

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200008b4 	.word	0x200008b4
 800020c:	08007994 	.word	0x08007994

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	f5ad 5da2 	sub.w	sp, sp, #5184	; 0x1440
 8000ee6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[50];
  int8_t DIGIT_IMG_DATA_1[784] = {
 8000ee8:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000eec:	f103 0314 	add.w	r3, r3, #20
 8000ef0:	4acb      	ldr	r2, [pc, #812]	; (8001220 <main+0x340>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	f44f 7344 	mov.w	r3, #784	; 0x310
 8000efa:	461a      	mov	r2, r3
 8000efc:	f003 fd54 	bl	80049a8 <memcpy>

 // };
 // int8_t DIGIT_IMG_DATA_3[784] = {
//255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,242,208,221,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,212,255,242,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,222,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,244,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,227,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,223,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,182,214,214,238,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,212,228,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,245,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,230,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,221,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,233,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,230,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,254,255,255,255,255,255,255,229,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,202,255,255,255,255,255,251,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,199,255,255,255,255,206,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,213,213,214,209,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 // };
  int buf_len = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8000f06:	f102 0204 	add.w	r2, r2, #4
 8000f0a:	6013      	str	r3, [r2, #0]
  int width;
  int height;
  int channels;
  uint32_t timestamp;
  //float y_val;
  float max = 0.0f;
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8000f14:	f102 0214 	add.w	r2, r2, #20
 8000f18:	6013      	str	r3, [r2, #0]
  int32_t imax = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8000f20:	f102 0210 	add.w	r2, r2, #16
 8000f24:	6013      	str	r3, [r2, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_DIGIT_RECOGNITION_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_DIGIT_RECOGNITION_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle digit_recognition_model = AI_HANDLE_NULL;
 8000f26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f2a:	3b14      	subs	r3, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_DIGIT_RECOGNITION_MODEL_IN_NUM] = AI_DIGIT_RECOGNITION_MODEL_IN;
 8000f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f34:	3b0c      	subs	r3, #12
 8000f36:	4abb      	ldr	r2, [pc, #748]	; (8001224 <main+0x344>)
 8000f38:	461c      	mov	r4, r3
 8000f3a:	4615      	mov	r5, r2
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f44:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_DIGIT_RECOGNITION_MODEL_OUT_NUM] = AI_DIGIT_RECOGNITION_MODEL_OUT;
 8000f48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f4c:	3b04      	subs	r3, #4
 8000f4e:	4ab6      	ldr	r2, [pc, #728]	; (8001228 <main+0x348>)
 8000f50:	461c      	mov	r4, r3
 8000f52:	4615      	mov	r5, r2
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f5c:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	3b14      	subs	r3, #20
 8000f66:	4ab1      	ldr	r2, [pc, #708]	; (800122c <main+0x34c>)
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	3b14      	subs	r3, #20
 8000f70:	2201      	movs	r2, #1
 8000f72:	809a      	strh	r2, [r3, #4]
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	3b14      	subs	r3, #20
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	80da      	strh	r2, [r3, #6]
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	3b14      	subs	r3, #20
 8000f84:	2201      	movs	r2, #1
 8000f86:	811a      	strh	r2, [r3, #8]
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	3b14      	subs	r3, #20
 8000f8e:	4aa8      	ldr	r2, [pc, #672]	; (8001230 <main+0x350>)
 8000f90:	60da      	str	r2, [r3, #12]
    AI_DIGIT_RECOGNITION_MODEL_DATA_WEIGHTS(ai_digit_recognition_model_data_weights_get()),
 8000f92:	f002 fadd 	bl	8003550 <ai_digit_recognition_model_data_weights_get>
 8000f96:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	3b14      	subs	r3, #20
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	3b14      	subs	r3, #20
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	3b14      	subs	r3, #20
 8000fb0:	4aa0      	ldr	r2, [pc, #640]	; (8001234 <main+0x354>)
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	3b14      	subs	r3, #20
 8000fba:	2201      	movs	r2, #1
 8000fbc:	839a      	strh	r2, [r3, #28]
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	3b14      	subs	r3, #20
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	83da      	strh	r2, [r3, #30]
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	3b14      	subs	r3, #20
 8000fce:	2201      	movs	r2, #1
 8000fd0:	841a      	strh	r2, [r3, #32]
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	3b14      	subs	r3, #20
 8000fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	3b14      	subs	r3, #20
 8000fe4:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	3b14      	subs	r3, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_DIGIT_RECOGNITION_MODEL_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000ff4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ff8:	3b0c      	subs	r3, #12
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001002:	3b0c      	subs	r3, #12
 8001004:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001008:	3a08      	subs	r2, #8
 800100a:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 800100c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001010:	3b04      	subs	r3, #4
 8001012:	2201      	movs	r2, #1
 8001014:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101a:	3b04      	subs	r3, #4
 800101c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001020:	3a10      	subs	r2, #16
 8001022:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fc5e 	bl	80018e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f9c6 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 fa94 	bl	8001558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001030:	f000 fa68 	bl	8001504 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001034:	f000 fa2e 	bl	8001494 <MX_CRC_Init>
  MX_TIM14_Init();
 8001038:	f000 fa40 	bl	80014bc <MX_TIM14_Init>

  /* USER CODE BEGIN 2 */

  // Start timer/counter
  HAL_TIM_Base_Start(&htim14);
 800103c:	487e      	ldr	r0, [pc, #504]	; (8001238 <main+0x358>)
 800103e:	f001 fd51 	bl	8002ae4 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001042:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8001046:	f103 0304 	add.w	r3, r3, #4
 800104a:	497c      	ldr	r1, [pc, #496]	; (800123c <main+0x35c>)
 800104c:	4618      	mov	r0, r3
 800104e:	f004 f9e5 	bl	800541c <siprintf>
 8001052:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001056:	f103 0304 	add.w	r3, r3, #4
 800105a:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800105c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001060:	f103 0304 	add.w	r3, r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29a      	uxth	r2, r3
 8001068:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800106c:	f101 0104 	add.w	r1, r1, #4
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	4873      	ldr	r0, [pc, #460]	; (8001240 <main+0x360>)
 8001074:	f001 fe8b 	bl	8002d8e <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_digit_recognition_model_create(&digit_recognition_model, AI_DIGIT_RECOGNITION_MODEL_DATA_CONFIG);
 8001078:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800107c:	3b14      	subs	r3, #20
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f9ff 	bl	8003484 <ai_digit_recognition_model_create>
 8001086:	4602      	mov	r2, r0
 8001088:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800108c:	f103 0310 	add.w	r3, r3, #16
 8001090:	601a      	str	r2, [r3, #0]
  if (ai_err.type != AI_ERROR_NONE)
 8001092:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001096:	f103 0310 	add.w	r3, r3, #16
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d01b      	beq.n	80010d8 <main+0x1f8>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80010a0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80010a4:	f103 0304 	add.w	r3, r3, #4
 80010a8:	4966      	ldr	r1, [pc, #408]	; (8001244 <main+0x364>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f9b6 	bl	800541c <siprintf>
 80010b0:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80010b4:	f103 0304 	add.w	r3, r3, #4
 80010b8:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010ba:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80010be:	f103 0304 	add.w	r3, r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80010ca:	f101 0104 	add.w	r1, r1, #4
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	485b      	ldr	r0, [pc, #364]	; (8001240 <main+0x360>)
 80010d2:	f001 fe5c 	bl	8002d8e <HAL_UART_Transmit>
    while(1);
 80010d6:	e7fe      	b.n	80010d6 <main+0x1f6>
  }

  // Initialize neural network
  if (!ai_digit_recognition_model_init(digit_recognition_model, &ai_params))
 80010d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010dc:	3b14      	subs	r3, #20
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	3b14      	subs	r3, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f002 f9e1 	bl	80034b0 <ai_digit_recognition_model_init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d01b      	beq.n	8001132 <main+0x252>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80010fa:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80010fe:	f103 0304 	add.w	r3, r3, #4
 8001102:	4951      	ldr	r1, [pc, #324]	; (8001248 <main+0x368>)
 8001104:	4618      	mov	r0, r3
 8001106:	f004 f989 	bl	800541c <siprintf>
 800110a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800110e:	f103 0304 	add.w	r3, r3, #4
 8001112:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001114:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001118:	f103 0304 	add.w	r3, r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29a      	uxth	r2, r3
 8001120:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8001124:	f101 0104 	add.w	r1, r1, #4
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	4845      	ldr	r0, [pc, #276]	; (8001240 <main+0x360>)
 800112c:	f001 fe2f 	bl	8002d8e <HAL_UART_Transmit>
    while(1);
 8001130:	e7fe      	b.n	8001130 <main+0x250>
  }

	 // Fill input buffer (use test value)
	 for (uint32_t i = 0; i < AI_DIGIT_RECOGNITION_MODEL_IN_1_SIZE; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001138:	f102 0208 	add.w	r2, r2, #8
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e026      	b.n	800118e <main+0x2ae>
	 {
	   ((ai_float *)in_data)[i] = (ai_float)DIGIT_IMG_DATA_1[i];
 8001140:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001144:	f102 0214 	add.w	r2, r2, #20
 8001148:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800114c:	f103 0308 	add.w	r3, r3, #8
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	f993 1000 	ldrsb.w	r1, [r3]
 8001158:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800115c:	f103 0308 	add.w	r3, r3, #8
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	009a      	lsls	r2, r3, #2
 8001164:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001168:	3b08      	subs	r3, #8
 800116a:	4413      	add	r3, r2
 800116c:	ee07 1a90 	vmov	s15, r1
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	edc3 7a00 	vstr	s15, [r3]
	 for (uint32_t i = 0; i < AI_DIGIT_RECOGNITION_MODEL_IN_1_SIZE; i++)
 8001178:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800117c:	f103 0308 	add.w	r3, r3, #8
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001188:	f102 0208 	add.w	r2, r2, #8
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001192:	f103 0308 	add.w	r3, r3, #8
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800119c:	d3d0      	bcc.n	8001140 <main+0x260>
	 }

	 // Get current timestamp
	 timestamp = htim14.Instance->CNT;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <main+0x358>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80011a8:	6013      	str	r3, [r2, #0]

	 // Perform inference
	 nbatch = ai_digit_recognition_model_run(digit_recognition_model, &ai_input[0], &ai_output[0]);
 80011aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011ae:	3b14      	subs	r3, #20
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80011b6:	3a04      	subs	r2, #4
 80011b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011bc:	3b0c      	subs	r3, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	f002 f9b5 	bl	800352e <ai_digit_recognition_model_run>
 80011c4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80011c8:	f103 031c 	add.w	r3, r3, #28
 80011cc:	6018      	str	r0, [r3, #0]
	 if (nbatch != 1) {
 80011ce:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80011d2:	f103 031c 	add.w	r3, r3, #28
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d01a      	beq.n	8001212 <main+0x332>
	   buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80011dc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80011e0:	f103 0304 	add.w	r3, r3, #4
 80011e4:	4919      	ldr	r1, [pc, #100]	; (800124c <main+0x36c>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 f918 	bl	800541c <siprintf>
 80011ec:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80011f0:	f103 0304 	add.w	r3, r3, #4
 80011f4:	6018      	str	r0, [r3, #0]
	   HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80011f6:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80011fa:	f103 0304 	add.w	r3, r3, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	b29a      	uxth	r2, r3
 8001202:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8001206:	f101 0104 	add.w	r1, r1, #4
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <main+0x360>)
 800120e:	f001 fdbe 	bl	8002d8e <HAL_UART_Transmit>
	 }

	  // Read output (predicted y) of neural network
	  for(ii=0;ii<AI_DIGIT_RECOGNITION_MODEL_OUT_1_SIZE;ii++) {
 8001212:	2300      	movs	r3, #0
 8001214:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001218:	f102 020c 	add.w	r2, r2, #12
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e084      	b.n	800132a <main+0x44a>
 8001220:	08007a8c 	.word	0x08007a8c
 8001224:	08007d9c 	.word	0x08007d9c
 8001228:	08007db4 	.word	0x08007db4
 800122c:	40040440 	.word	0x40040440
 8001230:	00073828 	.word	0x00073828
 8001234:	00040440 	.word	0x00040440
 8001238:	200009a8 	.word	0x200009a8
 800123c:	080079c0 	.word	0x080079c0
 8001240:	20000964 	.word	0x20000964
 8001244:	080079dc 	.word	0x080079dc
 8001248:	08007a04 	.word	0x08007a04
 800124c:	08007a28 	.word	0x08007a28
		y_val=((float*)out_data)[ii];
 8001250:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001254:	f103 030c 	add.w	r3, r3, #12
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	009a      	lsls	r2, r3, #2
 800125c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001260:	3b10      	subs	r3, #16
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800126a:	f102 0218 	add.w	r2, r2, #24
 800126e:	6013      	str	r3, [r2, #0]
		buf_len = sprintf(buf, "Prob = %f | index = %d\r\n", y_val, ii);
 8001270:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8001274:	f103 0318 	add.w	r3, r3, #24
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f7ff f985 	bl	8000588 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 8001286:	f100 0004 	add.w	r0, r0, #4
 800128a:	f507 51a1 	add.w	r1, r7, #5152	; 0x1420
 800128e:	f101 010c 	add.w	r1, r1, #12
 8001292:	6809      	ldr	r1, [r1, #0]
 8001294:	9100      	str	r1, [sp, #0]
 8001296:	4944      	ldr	r1, [pc, #272]	; (80013a8 <main+0x4c8>)
 8001298:	f004 f8c0 	bl	800541c <siprintf>
 800129c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80012a0:	f103 0304 	add.w	r3, r3, #4
 80012a4:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80012a6:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80012aa:	f103 0304 	add.w	r3, r3, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80012b6:	f101 0104 	add.w	r1, r1, #4
 80012ba:	2364      	movs	r3, #100	; 0x64
 80012bc:	483b      	ldr	r0, [pc, #236]	; (80013ac <main+0x4cc>)
 80012be:	f001 fd66 	bl	8002d8e <HAL_UART_Transmit>
		if(y_val > max ) { max = y_val; imax = ii; }
 80012c2:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80012c6:	f103 0318 	add.w	r3, r3, #24
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80012d2:	f103 0314 	add.w	r3, r3, #20
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	dd13      	ble.n	800130c <main+0x42c>
 80012e4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80012e8:	f103 0318 	add.w	r3, r3, #24
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 80012f2:	f102 0214 	add.w	r2, r2, #20
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80012fc:	f103 030c 	add.w	r3, r3, #12
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001306:	f102 0210 	add.w	r2, r2, #16
 800130a:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 800130c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001310:	f000 fb5a 	bl	80019c8 <HAL_Delay>
	  for(ii=0;ii<AI_DIGIT_RECOGNITION_MODEL_OUT_1_SIZE;ii++) {
 8001314:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001318:	f103 030c 	add.w	r3, r3, #12
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001324:	f102 020c 	add.w	r2, r2, #12
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800132e:	f103 030c 	add.w	r3, r3, #12
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b09      	cmp	r3, #9
 8001336:	dd8b      	ble.n	8001250 <main+0x370>
	  }

	buf_len = sprintf(buf, "Digit = %d | Inference time: %lu\r\n", imax, htim14.Instance->CNT - timestamp);
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <main+0x4d0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f507 509f 	add.w	r0, r7, #5088	; 0x13e0
 800134a:	f100 0004 	add.w	r0, r0, #4
 800134e:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001352:	f102 0210 	add.w	r2, r2, #16
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4916      	ldr	r1, [pc, #88]	; (80013b4 <main+0x4d4>)
 800135a:	f004 f85f 	bl	800541c <siprintf>
 800135e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001362:	f103 0304 	add.w	r3, r3, #4
 8001366:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001368:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800136c:	f103 0304 	add.w	r3, r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29a      	uxth	r2, r3
 8001374:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8001378:	f101 0104 	add.w	r1, r1, #4
 800137c:	2364      	movs	r3, #100	; 0x64
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <main+0x4cc>)
 8001380:	f001 fd05 	bl	8002d8e <HAL_UART_Transmit>
	imax=0;
 8001384:	2300      	movs	r3, #0
 8001386:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800138a:	f102 0210 	add.w	r2, r2, #16
 800138e:	6013      	str	r3, [r2, #0]
	max=0;
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001398:	f102 0214 	add.w	r2, r2, #20
 800139c:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 800139e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a2:	f000 fb11 	bl	80019c8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80013a6:	e7fe      	b.n	80013a6 <main+0x4c6>
 80013a8:	08007a4c 	.word	0x08007a4c
 80013ac:	20000964 	.word	0x20000964
 80013b0:	200009a8 	.word	0x200009a8
 80013b4:	08007a68 	.word	0x08007a68

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2234      	movs	r2, #52	; 0x34
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fafc 	bl	80049c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <SystemClock_Config+0xd4>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <SystemClock_Config+0xd4>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <SystemClock_Config+0xd4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <SystemClock_Config+0xd8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001404:	4a22      	ldr	r2, [pc, #136]	; (8001490 <SystemClock_Config+0xd8>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <SystemClock_Config+0xd8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001420:	2310      	movs	r3, #16
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001424:	2302      	movs	r3, #2
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001428:	2300      	movs	r3, #0
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800142c:	2308      	movs	r3, #8
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001438:	2302      	movs	r3, #2
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800143c:	2302      	movs	r3, #2
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4618      	mov	r0, r3
 8001446:	f001 f85f 	bl	8002508 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001450:	f000 f8f2 	bl	8001638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2302      	movs	r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fd7c 	bl	8001f70 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800147e:	f000 f8db 	bl	8001638 <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	; 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_CRC_Init+0x20>)
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <MX_CRC_Init+0x24>)
 800149c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_CRC_Init+0x20>)
 80014a0:	f000 fb9b 	bl	8001bda <HAL_CRC_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80014aa:	f000 f8c5 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000095c 	.word	0x2000095c
 80014b8:	40023000 	.word	0x40023000

080014bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_TIM14_Init+0x40>)
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <MX_TIM14_Init+0x44>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80 - 1;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_TIM14_Init+0x40>)
 80014c8:	224f      	movs	r2, #79	; 0x4f
 80014ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_TIM14_Init+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65536 - 1;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_TIM14_Init+0x40>)
 80014d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_TIM14_Init+0x40>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_TIM14_Init+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM14_Init+0x40>)
 80014e8:	f001 faac 	bl	8002a44 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80014f2:	f000 f8a1 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200009a8 	.word	0x200009a8
 8001500:	40002000 	.word	0x40002000

08001504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_USART2_UART_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_USART2_UART_Init+0x4c>)
 800153c:	f001 fbda 	bl	8002cf4 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001546:	f000 f877 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000964 	.word	0x20000964
 8001554:	40004400 	.word	0x40004400

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_GPIO_Init+0xd0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <MX_GPIO_Init+0xd0>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <MX_GPIO_Init+0xd0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a25      	ldr	r2, [pc, #148]	; (8001628 <MX_GPIO_Init+0xd0>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <MX_GPIO_Init+0xd0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <MX_GPIO_Init+0xd0>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <MX_GPIO_Init+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_GPIO_Init+0xd0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <MX_GPIO_Init+0xd0>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_GPIO_Init+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2120      	movs	r1, #32
 80015e2:	4812      	ldr	r0, [pc, #72]	; (800162c <MX_GPIO_Init+0xd4>)
 80015e4:	f000 fcaa 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_GPIO_Init+0xd8>)
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_GPIO_Init+0xdc>)
 80015fe:	f000 fb09 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001602:	2320      	movs	r3, #32
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_GPIO_Init+0xd4>)
 800161a:	f000 fafb 	bl	8001c14 <HAL_GPIO_Init>

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	10210000 	.word	0x10210000
 8001634:	40020800 	.word	0x40020800

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_MspInit+0x4c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x4c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001682:	2007      	movs	r0, #7
 8001684:	f000 fa76 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_CRC_MspInit+0x3c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10d      	bne.n	80016c2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_CRC_MspInit+0x40>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023000 	.word	0x40023000
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_TIM_Base_MspInit+0x3c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10d      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_TIM_Base_MspInit+0x40>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_TIM_Base_MspInit+0x40>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <HAL_TIM_Base_MspInit+0x40>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40002000 	.word	0x40002000
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_UART_MspInit+0x84>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12b      	bne.n	8001796 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_UART_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001776:	230c      	movs	r3, #12
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001792:	f000 fa3f 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40004400 	.word	0x40004400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 f8c6 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f003 f888 	bl	8004944 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20020000 	.word	0x20020000
 8001860:	00001000 	.word	0x00001000
 8001864:	200008cc 	.word	0x200008cc
 8001868:	20000a08 	.word	0x20000a08

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ac:	4c0b      	ldr	r4, [pc, #44]	; (80018dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ba:	f7ff ffd7 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f003 f847 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff fb0d 	bl	8000ee0 <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	200008b0 	.word	0x200008b0
  ldr r2, =_sidata
 80018d4:	0807ba54 	.word	0x0807ba54
  ldr r2, =_sbss
 80018d8:	200008b0 	.word	0x200008b0
  ldr r4, =_ebss
 80018dc:	20000a04 	.word	0x20000a04

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_Init+0x40>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_Init+0x40>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_Init+0x40>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f931 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fe94 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f93b 	bl	8001bc2 <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f911 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	200009f0 	.word	0x200009f0

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200009f0 	.word	0x200009f0

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff47 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff5c 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffb0 	bl	8001b30 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00e      	b.n	8001c0a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	795b      	ldrb	r3, [r3, #5]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fd49 	bl	8001694 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e165      	b.n	8001efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8154 	bne.w	8001ef6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d005      	beq.n	8001c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d130      	bne.n	8001cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d017      	beq.n	8001d04 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ae 	beq.w	8001ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a5c      	ldr	r2, [pc, #368]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <HAL_GPIO_Init+0x308>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_GPIO_Init+0x30c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x216>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_GPIO_Init+0x310>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x212>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x20e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x20a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x206>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x202>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00c      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00a      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4935      	ldr	r1, [pc, #212]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f ae96 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40021400 	.word	0x40021400
 8001f34:	40021800 	.word	0x40021800
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f58:	e003      	b.n	8001f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	041a      	lsls	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	619a      	str	r2, [r3, #24]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d90c      	bls.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff fca6 	bl	80019b0 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff fca2 	bl	80019b0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f855 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fc06 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	08007dd0 	.word	0x08007dd0
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002158:	f7ff fff0 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a9b      	lsrs	r3, r3, #10
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	08007de0 	.word	0x08007de0

0800217c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002180:	f7ff ffdc 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0b5b      	lsrs	r3, r3, #13
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	08007de0 	.word	0x08007de0

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a8:	b088      	sub	sp, #32
 80021aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4bce      	ldr	r3, [pc, #824]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f200 818d 	bhi.w	80024e8 <HAL_RCC_GetSysClockFreq+0x344>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	08002209 	.word	0x08002209
 80021d8:	080024e9 	.word	0x080024e9
 80021dc:	080024e9 	.word	0x080024e9
 80021e0:	080024e9 	.word	0x080024e9
 80021e4:	0800220f 	.word	0x0800220f
 80021e8:	080024e9 	.word	0x080024e9
 80021ec:	080024e9 	.word	0x080024e9
 80021f0:	080024e9 	.word	0x080024e9
 80021f4:	08002215 	.word	0x08002215
 80021f8:	080024e9 	.word	0x080024e9
 80021fc:	080024e9 	.word	0x080024e9
 8002200:	080024e9 	.word	0x080024e9
 8002204:	08002389 	.word	0x08002389
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4bbd      	ldr	r3, [pc, #756]	; (8002500 <HAL_RCC_GetSysClockFreq+0x35c>)
 800220a:	61bb      	str	r3, [r7, #24]
       break;
 800220c:	e16f      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220e:	4bbd      	ldr	r3, [pc, #756]	; (8002504 <HAL_RCC_GetSysClockFreq+0x360>)
 8002210:	61bb      	str	r3, [r7, #24]
      break;
 8002212:	e16c      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002214:	4bb9      	ldr	r3, [pc, #740]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800221c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221e:	4bb7      	ldr	r3, [pc, #732]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d053      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222a:	4bb4      	ldr	r3, [pc, #720]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	461a      	mov	r2, r3
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	ea02 0400 	and.w	r4, r2, r0
 8002242:	603c      	str	r4, [r7, #0]
 8002244:	400b      	ands	r3, r1
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	e9d7 4500 	ldrd	r4, r5, [r7]
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	014b      	lsls	r3, r1, #5
 800225a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800225e:	0142      	lsls	r2, r0, #5
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	4623      	mov	r3, r4
 8002266:	1ac0      	subs	r0, r0, r3
 8002268:	462b      	mov	r3, r5
 800226a:	eb61 0103 	sbc.w	r1, r1, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	018b      	lsls	r3, r1, #6
 8002278:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800227c:	0182      	lsls	r2, r0, #6
 800227e:	1a12      	subs	r2, r2, r0
 8002280:	eb63 0301 	sbc.w	r3, r3, r1
 8002284:	f04f 0000 	mov.w	r0, #0
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	00d9      	lsls	r1, r3, #3
 800228e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002292:	00d0      	lsls	r0, r2, #3
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4621      	mov	r1, r4
 800229a:	1852      	adds	r2, r2, r1
 800229c:	4629      	mov	r1, r5
 800229e:	eb43 0101 	adc.w	r1, r3, r1
 80022a2:	460b      	mov	r3, r1
 80022a4:	f04f 0000 	mov.w	r0, #0
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	0259      	lsls	r1, r3, #9
 80022ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022b2:	0250      	lsls	r0, r2, #9
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	461a      	mov	r2, r3
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f7fe fc90 	bl	8000be8 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e04c      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	461a      	mov	r2, r3
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	ea02 0a00 	and.w	sl, r2, r0
 80022ea:	ea03 0b01 	and.w	fp, r3, r1
 80022ee:	4650      	mov	r0, sl
 80022f0:	4659      	mov	r1, fp
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	014b      	lsls	r3, r1, #5
 80022fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002300:	0142      	lsls	r2, r0, #5
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	ebb0 000a 	subs.w	r0, r0, sl
 800230a:	eb61 010b 	sbc.w	r1, r1, fp
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	018b      	lsls	r3, r1, #6
 8002318:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800231c:	0182      	lsls	r2, r0, #6
 800231e:	1a12      	subs	r2, r2, r0
 8002320:	eb63 0301 	sbc.w	r3, r3, r1
 8002324:	f04f 0000 	mov.w	r0, #0
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	00d9      	lsls	r1, r3, #3
 800232e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002332:	00d0      	lsls	r0, r2, #3
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	eb12 020a 	adds.w	r2, r2, sl
 800233c:	eb43 030b 	adc.w	r3, r3, fp
 8002340:	f04f 0000 	mov.w	r0, #0
 8002344:	f04f 0100 	mov.w	r1, #0
 8002348:	0299      	lsls	r1, r3, #10
 800234a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800234e:	0290      	lsls	r0, r2, #10
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	461a      	mov	r2, r3
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	f7fe fc42 	bl	8000be8 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800236c:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	61bb      	str	r3, [r7, #24]
      break;
 8002386:	e0b2      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002390:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04d      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	099b      	lsrs	r3, r3, #6
 80023a4:	461a      	mov	r2, r3
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ae:	f04f 0100 	mov.w	r1, #0
 80023b2:	ea02 0800 	and.w	r8, r2, r0
 80023b6:	ea03 0901 	and.w	r9, r3, r1
 80023ba:	4640      	mov	r0, r8
 80023bc:	4649      	mov	r1, r9
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	014b      	lsls	r3, r1, #5
 80023c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023cc:	0142      	lsls	r2, r0, #5
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	ebb0 0008 	subs.w	r0, r0, r8
 80023d6:	eb61 0109 	sbc.w	r1, r1, r9
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	018b      	lsls	r3, r1, #6
 80023e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023e8:	0182      	lsls	r2, r0, #6
 80023ea:	1a12      	subs	r2, r2, r0
 80023ec:	eb63 0301 	sbc.w	r3, r3, r1
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	00d9      	lsls	r1, r3, #3
 80023fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fe:	00d0      	lsls	r0, r2, #3
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	eb12 0208 	adds.w	r2, r2, r8
 8002408:	eb43 0309 	adc.w	r3, r3, r9
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	0259      	lsls	r1, r3, #9
 8002416:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800241a:	0250      	lsls	r0, r2, #9
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	461a      	mov	r2, r3
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f7fe fbdc 	bl	8000be8 <__aeabi_uldivmod>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4613      	mov	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e04a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	461a      	mov	r2, r3
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f240 10ff 	movw	r0, #511	; 0x1ff
 800244a:	f04f 0100 	mov.w	r1, #0
 800244e:	ea02 0400 	and.w	r4, r2, r0
 8002452:	ea03 0501 	and.w	r5, r3, r1
 8002456:	4620      	mov	r0, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	014b      	lsls	r3, r1, #5
 8002464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002468:	0142      	lsls	r2, r0, #5
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	1b00      	subs	r0, r0, r4
 8002470:	eb61 0105 	sbc.w	r1, r1, r5
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	018b      	lsls	r3, r1, #6
 800247e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002482:	0182      	lsls	r2, r0, #6
 8002484:	1a12      	subs	r2, r2, r0
 8002486:	eb63 0301 	sbc.w	r3, r3, r1
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	00d9      	lsls	r1, r3, #3
 8002494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002498:	00d0      	lsls	r0, r2, #3
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	1912      	adds	r2, r2, r4
 80024a0:	eb45 0303 	adc.w	r3, r5, r3
 80024a4:	f04f 0000 	mov.w	r0, #0
 80024a8:	f04f 0100 	mov.w	r1, #0
 80024ac:	0299      	lsls	r1, r3, #10
 80024ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024b2:	0290      	lsls	r0, r2, #10
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	461a      	mov	r2, r3
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	f7fe fb90 	bl	8000be8 <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4613      	mov	r3, r2
 80024ce:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_GetSysClockFreq+0x358>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0f1b      	lsrs	r3, r3, #28
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	61bb      	str	r3, [r7, #24]
      break;
 80024e6:	e002      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024ea:	61bb      	str	r3, [r7, #24]
      break;
 80024ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ee:	69bb      	ldr	r3, [r7, #24]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	00f42400 	.word	0x00f42400
 8002504:	007a1200 	.word	0x007a1200

08002508 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e28d      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8083 	beq.w	800262e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002528:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	d019      	beq.n	8002568 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002534:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800253c:	2b08      	cmp	r3, #8
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002540:	4b8e      	ldr	r3, [pc, #568]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254c:	d00c      	beq.n	8002568 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d112      	bne.n	8002580 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002566:	d10b      	bne.n	8002580 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05b      	beq.n	800262c <HAL_RCC_OscConfig+0x124>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d157      	bne.n	800262c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e25a      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x90>
 800258a:	4b7c      	ldr	r3, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01d      	b.n	80025d4 <HAL_RCC_OscConfig+0xcc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0xb4>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xcc>
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6e      	ldr	r2, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6b      	ldr	r2, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7ff f9e8 	bl	80019b0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff f9e4 	bl	80019b0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e21f      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0xdc>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7ff f9d4 	bl	80019b0 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff f9d0 	bl	80019b0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e20b      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x104>
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06f      	beq.n	800271a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800263a:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b00      	cmp	r3, #0
 8002644:	d017      	beq.n	8002676 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x186>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1d3      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x278>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff f97d 	bl	80019b0 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff f979 	bl	80019b0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1b4      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x278>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f95c 	bl	80019b0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff f958 	bl	80019b0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e193      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d036      	beq.n	8002794 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0x27c>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f93c 	bl	80019b0 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f938 	bl	80019b0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e173      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x234>
 800275a:	e01b      	b.n	8002794 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_OscConfig+0x27c>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7ff f925 	bl	80019b0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	e00e      	b.n	8002788 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276a:	f7ff f921 	bl	80019b0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d907      	bls.n	8002788 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e15c      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b8a      	ldr	r3, [pc, #552]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8097 	beq.w	80028d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b83      	ldr	r3, [pc, #524]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a7e      	ldr	r2, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b7c      	ldr	r3, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b79      	ldr	r3, [pc, #484]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a75      	ldr	r2, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f8e1 	bl	80019b0 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7ff f8dd 	bl	80019b0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e118      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x4b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x31e>
 8002818:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x358>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x340>
 800282e:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x358>
 8002848:	4b5a      	ldr	r3, [pc, #360]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
 8002854:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7ff f8a2 	bl	80019b0 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7ff f89e 	bl	80019b0 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0d7      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCC_OscConfig+0x368>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7ff f88c 	bl	80019b0 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7ff f888 	bl	80019b0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0c1      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ee      	bne.n	800289c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80ad 	beq.w	8002a34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d060      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d145      	bne.n	800297a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x4b4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff f85c 	bl	80019b0 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7ff f858 	bl	80019b0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e093      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	071b      	lsls	r3, r3, #28
 8002946:	491b      	ldr	r1, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x4b4>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff f82d 	bl	80019b0 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff f829 	bl	80019b0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e064      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x452>
 8002978:	e05c      	b.n	8002a34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x4b4>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f816 	bl	80019b0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff f812 	bl	80019b0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04d      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x480>
 80029a6:	e045      	b.n	8002a34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e040      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_OscConfig+0x538>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d030      	beq.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d129      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d122      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d119      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d10f      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e041      	b.n	8002ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fe34 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 f896 	bl	8002bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e046      	b.n	8002b8a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_TIM_Base_Start+0xb4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d022      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d01d      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_TIM_Base_Start+0xb8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d018      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_TIM_Base_Start+0xbc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_TIM_Base_Start+0xc0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_TIM_Base_Start+0xc4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_TIM_Base_Start+0xc8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_TIM_Base_Start+0x70>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_TIM_Base_Start+0xcc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d111      	bne.n	8002b78 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d010      	beq.n	8002b88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b76:	e007      	b.n	8002b88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40010400 	.word	0x40010400
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40001800 	.word	0x40001800

08002bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <TIM_Base_SetConfig+0x114>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd2:	d00f      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <TIM_Base_SetConfig+0x118>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3c      	ldr	r2, [pc, #240]	; (8002cd0 <TIM_Base_SetConfig+0x11c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3b      	ldr	r2, [pc, #236]	; (8002cd4 <TIM_Base_SetConfig+0x120>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3a      	ldr	r2, [pc, #232]	; (8002cd8 <TIM_Base_SetConfig+0x124>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <TIM_Base_SetConfig+0x114>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d02b      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d027      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <TIM_Base_SetConfig+0x118>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d023      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <TIM_Base_SetConfig+0x11c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <TIM_Base_SetConfig+0x120>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01b      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <TIM_Base_SetConfig+0x124>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d017      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <TIM_Base_SetConfig+0x128>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <TIM_Base_SetConfig+0x12c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00f      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <TIM_Base_SetConfig+0x130>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0x134>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a24      	ldr	r2, [pc, #144]	; (8002cec <TIM_Base_SetConfig+0x138>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <TIM_Base_SetConfig+0x13c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d108      	bne.n	8002c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <TIM_Base_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0xf8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <TIM_Base_SetConfig+0x124>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40010400 	.word	0x40010400
 8002cdc:	40014000 	.word	0x40014000
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800
 8002ce8:	40001800 	.word	0x40001800
 8002cec:	40001c00 	.word	0x40001c00
 8002cf0:	40002000 	.word	0x40002000

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e03f      	b.n	8002d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fcfe 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f905 	bl	8002f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	; 0x28
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d17c      	bne.n	8002ea8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_UART_Transmit+0x2c>
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e075      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Transmit+0x3e>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e06e      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2221      	movs	r2, #33	; 0x21
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de2:	f7fe fde5 	bl	80019b0 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d108      	bne.n	8002e10 <HAL_UART_Transmit+0x82>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	e003      	b.n	8002e18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e20:	e02a      	b.n	8002e78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f840 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e036      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	3302      	adds	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	e007      	b.n	8002e6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1cf      	bne.n	8002e22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2140      	movs	r1, #64	; 0x40
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f810 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e006      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	e02c      	b.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d028      	beq.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed2:	f7fe fd6d 	bl	80019b0 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d21d      	bcs.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ef0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e00f      	b.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d0c3      	beq.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	b09f      	sub	sp, #124	; 0x7c
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5e:	68d9      	ldr	r1, [r3, #12]
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	ea40 0301 	orr.w	r3, r0, r1
 8002f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f8c:	f021 010c 	bic.w	r1, r1, #12
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f96:	430b      	orrs	r3, r1
 8002f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa6:	6999      	ldr	r1, [r3, #24]
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	ea40 0301 	orr.w	r3, r0, r1
 8002fb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4bc5      	ldr	r3, [pc, #788]	; (80032cc <UART_SetConfig+0x384>)
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d004      	beq.n	8002fc6 <UART_SetConfig+0x7e>
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4bc3      	ldr	r3, [pc, #780]	; (80032d0 <UART_SetConfig+0x388>)
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d103      	bne.n	8002fce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fc6:	f7ff f8d9 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8002fca:	6778      	str	r0, [r7, #116]	; 0x74
 8002fcc:	e002      	b.n	8002fd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fce:	f7ff f8c1 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8002fd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fdc:	f040 80b6 	bne.w	800314c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe2:	461c      	mov	r4, r3
 8002fe4:	f04f 0500 	mov.w	r5, #0
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	1891      	adds	r1, r2, r2
 8002fee:	6439      	str	r1, [r7, #64]	; 0x40
 8002ff0:	415b      	adcs	r3, r3
 8002ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ff8:	1912      	adds	r2, r2, r4
 8002ffa:	eb45 0303 	adc.w	r3, r5, r3
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	00d9      	lsls	r1, r3, #3
 8003008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800300c:	00d0      	lsls	r0, r2, #3
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	1911      	adds	r1, r2, r4
 8003014:	6639      	str	r1, [r7, #96]	; 0x60
 8003016:	416b      	adcs	r3, r5
 8003018:	667b      	str	r3, [r7, #100]	; 0x64
 800301a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	1891      	adds	r1, r2, r2
 8003026:	63b9      	str	r1, [r7, #56]	; 0x38
 8003028:	415b      	adcs	r3, r3
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003030:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003034:	f7fd fdd8 	bl	8000be8 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4ba5      	ldr	r3, [pc, #660]	; (80032d4 <UART_SetConfig+0x38c>)
 800303e:	fba3 2302 	umull	r2, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	011e      	lsls	r6, r3, #4
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	461c      	mov	r4, r3
 800304a:	f04f 0500 	mov.w	r5, #0
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	1891      	adds	r1, r2, r2
 8003054:	6339      	str	r1, [r7, #48]	; 0x30
 8003056:	415b      	adcs	r3, r3
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
 800305a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800305e:	1912      	adds	r2, r2, r4
 8003060:	eb45 0303 	adc.w	r3, r5, r3
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	00d9      	lsls	r1, r3, #3
 800306e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003072:	00d0      	lsls	r0, r2, #3
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	1911      	adds	r1, r2, r4
 800307a:	65b9      	str	r1, [r7, #88]	; 0x58
 800307c:	416b      	adcs	r3, r5
 800307e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	461a      	mov	r2, r3
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	1891      	adds	r1, r2, r2
 800308c:	62b9      	str	r1, [r7, #40]	; 0x28
 800308e:	415b      	adcs	r3, r3
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003096:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800309a:	f7fd fda5 	bl	8000be8 <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4b8c      	ldr	r3, [pc, #560]	; (80032d4 <UART_SetConfig+0x38c>)
 80030a4:	fba3 1302 	umull	r1, r3, r3, r2
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	2164      	movs	r1, #100	; 0x64
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	3332      	adds	r3, #50	; 0x32
 80030b6:	4a87      	ldr	r2, [pc, #540]	; (80032d4 <UART_SetConfig+0x38c>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c4:	441e      	add	r6, r3
 80030c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c8:	4618      	mov	r0, r3
 80030ca:	f04f 0100 	mov.w	r1, #0
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	1894      	adds	r4, r2, r2
 80030d4:	623c      	str	r4, [r7, #32]
 80030d6:	415b      	adcs	r3, r3
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030de:	1812      	adds	r2, r2, r0
 80030e0:	eb41 0303 	adc.w	r3, r1, r3
 80030e4:	f04f 0400 	mov.w	r4, #0
 80030e8:	f04f 0500 	mov.w	r5, #0
 80030ec:	00dd      	lsls	r5, r3, #3
 80030ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030f2:	00d4      	lsls	r4, r2, #3
 80030f4:	4622      	mov	r2, r4
 80030f6:	462b      	mov	r3, r5
 80030f8:	1814      	adds	r4, r2, r0
 80030fa:	653c      	str	r4, [r7, #80]	; 0x50
 80030fc:	414b      	adcs	r3, r1
 80030fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	461a      	mov	r2, r3
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	1891      	adds	r1, r2, r2
 800310c:	61b9      	str	r1, [r7, #24]
 800310e:	415b      	adcs	r3, r3
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003116:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800311a:	f7fd fd65 	bl	8000be8 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <UART_SetConfig+0x38c>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	2164      	movs	r1, #100	; 0x64
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	3332      	adds	r3, #50	; 0x32
 8003136:	4a67      	ldr	r2, [pc, #412]	; (80032d4 <UART_SetConfig+0x38c>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	f003 0207 	and.w	r2, r3, #7
 8003142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4432      	add	r2, r6
 8003148:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800314a:	e0b9      	b.n	80032c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800314c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314e:	461c      	mov	r4, r3
 8003150:	f04f 0500 	mov.w	r5, #0
 8003154:	4622      	mov	r2, r4
 8003156:	462b      	mov	r3, r5
 8003158:	1891      	adds	r1, r2, r2
 800315a:	6139      	str	r1, [r7, #16]
 800315c:	415b      	adcs	r3, r3
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003164:	1912      	adds	r2, r2, r4
 8003166:	eb45 0303 	adc.w	r3, r5, r3
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	00d9      	lsls	r1, r3, #3
 8003174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003178:	00d0      	lsls	r0, r2, #3
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	eb12 0804 	adds.w	r8, r2, r4
 8003182:	eb43 0905 	adc.w	r9, r3, r5
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	008b      	lsls	r3, r1, #2
 800319a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800319e:	0082      	lsls	r2, r0, #2
 80031a0:	4640      	mov	r0, r8
 80031a2:	4649      	mov	r1, r9
 80031a4:	f7fd fd20 	bl	8000be8 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4b49      	ldr	r3, [pc, #292]	; (80032d4 <UART_SetConfig+0x38c>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	011e      	lsls	r6, r3, #4
 80031b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b8:	4618      	mov	r0, r3
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	1894      	adds	r4, r2, r2
 80031c4:	60bc      	str	r4, [r7, #8]
 80031c6:	415b      	adcs	r3, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ce:	1812      	adds	r2, r2, r0
 80031d0:	eb41 0303 	adc.w	r3, r1, r3
 80031d4:	f04f 0400 	mov.w	r4, #0
 80031d8:	f04f 0500 	mov.w	r5, #0
 80031dc:	00dd      	lsls	r5, r3, #3
 80031de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031e2:	00d4      	lsls	r4, r2, #3
 80031e4:	4622      	mov	r2, r4
 80031e6:	462b      	mov	r3, r5
 80031e8:	1814      	adds	r4, r2, r0
 80031ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80031ec:	414b      	adcs	r3, r1
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	008b      	lsls	r3, r1, #2
 8003204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003208:	0082      	lsls	r2, r0, #2
 800320a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800320e:	f7fd fceb 	bl	8000be8 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <UART_SetConfig+0x38c>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	; 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <UART_SetConfig+0x38c>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003236:	441e      	add	r6, r3
 8003238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323a:	4618      	mov	r0, r3
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	1894      	adds	r4, r2, r2
 8003246:	603c      	str	r4, [r7, #0]
 8003248:	415b      	adcs	r3, r3
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003250:	1812      	adds	r2, r2, r0
 8003252:	eb41 0303 	adc.w	r3, r1, r3
 8003256:	f04f 0400 	mov.w	r4, #0
 800325a:	f04f 0500 	mov.w	r5, #0
 800325e:	00dd      	lsls	r5, r3, #3
 8003260:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003264:	00d4      	lsls	r4, r2, #3
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	eb12 0a00 	adds.w	sl, r2, r0
 800326e:	eb43 0b01 	adc.w	fp, r3, r1
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	008b      	lsls	r3, r1, #2
 8003286:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800328a:	0082      	lsls	r2, r0, #2
 800328c:	4650      	mov	r0, sl
 800328e:	4659      	mov	r1, fp
 8003290:	f7fd fcaa 	bl	8000be8 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <UART_SetConfig+0x38c>)
 800329a:	fba3 1302 	umull	r1, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2164      	movs	r1, #100	; 0x64
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <UART_SetConfig+0x38c>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4432      	add	r2, r6
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	377c      	adds	r7, #124	; 0x7c
 80032c4:	46bd      	mov	sp, r7
 80032c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ca:	bf00      	nop
 80032cc:	40011000 	.word	0x40011000
 80032d0:	40011400 	.word	0x40011400
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <digit_recognition_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool digit_recognition_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	3303      	adds	r3, #3
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    flatten_input_output_array.data = AI_PTR(NULL);
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <digit_recognition_model_configure_activations+0x88>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
    flatten_input_output_array.data_start = AI_PTR(NULL);
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <digit_recognition_model_configure_activations+0x88>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <digit_recognition_model_configure_activations+0x8c>)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <digit_recognition_model_configure_activations+0x8c>)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(activations + 0);
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <digit_recognition_model_configure_activations+0x90>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(activations + 0);
 800330c:	4a16      	ldr	r2, [pc, #88]	; (8003368 <digit_recognition_model_configure_activations+0x90>)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003318:	4a14      	ldr	r2, [pc, #80]	; (800336c <digit_recognition_model_configure_activations+0x94>)
 800331a:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <digit_recognition_model_configure_activations+0x94>)
 8003324:	60d3      	str	r3, [r2, #12]
    nl_2_nl_output_array.data = AI_PTR(activations + 0);
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <digit_recognition_model_configure_activations+0x98>)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(activations + 0);
 800332c:	4a10      	ldr	r2, [pc, #64]	; (8003370 <digit_recognition_model_configure_activations+0x98>)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 512);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003338:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <digit_recognition_model_configure_activations+0x9c>)
 800333a:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 512);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <digit_recognition_model_configure_activations+0x9c>)
 8003344:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(NULL);
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <digit_recognition_model_configure_activations+0xa0>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
    nl_4_output_array.data_start = AI_PTR(NULL);
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <digit_recognition_model_configure_activations+0xa0>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8003352:	2301      	movs	r3, #1
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000070 	.word	0x20000070
 8003364:	20000080 	.word	0x20000080
 8003368:	20000090 	.word	0x20000090
 800336c:	200000a0 	.word	0x200000a0
 8003370:	200000b0 	.word	0x200000b0
 8003374:	200000c0 	.word	0x200000c0
 8003378:	200000d0 	.word	0x200000d0

0800337c <digit_recognition_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool digit_recognition_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800338c:	4b37      	ldr	r3, [pc, #220]	; (800346c <digit_recognition_model_configure_weights+0xf0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003394:	4a35      	ldr	r2, [pc, #212]	; (800346c <digit_recognition_model_configure_weights+0xf0>)
 8003396:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <digit_recognition_model_configure_weights+0xf0>)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <digit_recognition_model_configure_weights+0xf0>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <digit_recognition_model_configure_weights+0xf4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ac:	4a30      	ldr	r2, [pc, #192]	; (8003470 <digit_recognition_model_configure_weights+0xf4>)
 80033ae:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 401408);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <digit_recognition_model_configure_weights+0xf4>)
 80033b8:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 401408);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <digit_recognition_model_configure_weights+0xf4>)
 80033c2:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <digit_recognition_model_configure_weights+0xf8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	4a29      	ldr	r2, [pc, #164]	; (8003474 <digit_recognition_model_configure_weights+0xf8>)
 80033ce:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 401920);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 80033d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <digit_recognition_model_configure_weights+0xf8>)
 80033dc:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 401920);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 80033e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <digit_recognition_model_configure_weights+0xf8>)
 80033ea:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <digit_recognition_model_configure_weights+0xfc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <digit_recognition_model_configure_weights+0xfc>)
 80033f6:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 467456);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f503 23e4 	add.w	r3, r3, #466944	; 0x72000
 80033fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <digit_recognition_model_configure_weights+0xfc>)
 8003404:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 467456);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 23e4 	add.w	r3, r3, #466944	; 0x72000
 800340c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <digit_recognition_model_configure_weights+0xfc>)
 8003412:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <digit_recognition_model_configure_weights+0x100>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <digit_recognition_model_configure_weights+0x100>)
 800341e:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 467968);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f503 23e4 	add.w	r3, r3, #466944	; 0x72000
 8003426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <digit_recognition_model_configure_weights+0x100>)
 800342c:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 467968);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f503 23e4 	add.w	r3, r3, #466944	; 0x72000
 8003434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003438:	4a10      	ldr	r2, [pc, #64]	; (800347c <digit_recognition_model_configure_weights+0x100>)
 800343a:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <digit_recognition_model_configure_weights+0x104>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <digit_recognition_model_configure_weights+0x104>)
 8003446:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 473088);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f503 23e7 	add.w	r3, r3, #473088	; 0x73800
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <digit_recognition_model_configure_weights+0x104>)
 8003450:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 473088);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f503 23e7 	add.w	r3, r3, #473088	; 0x73800
 8003458:	4a09      	ldr	r2, [pc, #36]	; (8003480 <digit_recognition_model_configure_weights+0x104>)
 800345a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800345c:	2301      	movs	r3, #1
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	200000e0 	.word	0x200000e0
 8003470:	200000f0 	.word	0x200000f0
 8003474:	20000100 	.word	0x20000100
 8003478:	20000110 	.word	0x20000110
 800347c:	20000120 	.word	0x20000120
 8003480:	20000130 	.word	0x20000130

08003484 <ai_digit_recognition_model_create>:
}

AI_API_ENTRY
ai_error ai_digit_recognition_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af02      	add	r7, sp, #8
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2304      	movs	r3, #4
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2301      	movs	r3, #1
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <ai_digit_recognition_model_create+0x28>)
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f881 	bl	80035a4 <ai_platform_network_create>
 80034a2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <ai_digit_recognition_model_init>:
}

AI_API_ENTRY
ai_bool ai_digit_recognition_model_init(
  ai_handle network, const ai_network_params* params)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8e3 	bl	8003688 <ai_platform_network_init>
 80034c2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <ai_digit_recognition_model_init+0x1e>
 80034ca:	2300      	movs	r3, #0
 80034cc:	e02b      	b.n	8003526 <ai_digit_recognition_model_init+0x76>

  ai_bool ok = true;
 80034ce:	2301      	movs	r3, #1
 80034d0:	72fb      	strb	r3, [r7, #11]
  ok &= digit_recognition_model_configure_weights(net_ctx, &params->params);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff ff50 	bl	800337c <digit_recognition_model_configure_weights>
 80034dc:	4603      	mov	r3, r0
 80034de:	461a      	mov	r2, r3
 80034e0:	7afb      	ldrb	r3, [r7, #11]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	72fb      	strb	r3, [r7, #11]
  ok &= digit_recognition_model_configure_activations(net_ctx, &params->activations);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	3318      	adds	r3, #24
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff feef 	bl	80032d8 <digit_recognition_model_configure_activations>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f92d 	bl	800376c <ai_platform_network_post_init>
 8003512:	4603      	mov	r3, r0
 8003514:	461a      	mov	r2, r3
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003524:	7afb      	ldrb	r3, [r7, #11]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ai_digit_recognition_model_run>:


AI_API_ENTRY
ai_i32 ai_digit_recognition_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f960 	bl	8003804 <ai_platform_network_process>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <ai_digit_recognition_model_data_weights_get>:
*/

#include "digit_recognition_model_data.h"

ai_handle ai_digit_recognition_model_data_weights_get(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
    0x5c, 0x59, 0x4a, 0x3d, 0xd2, 0x3e, 0x48, 0x3e, 0x58, 0xfb,
    0x33, 0xbc, 0x0f, 0x62, 0x01, 0x3c, 0x51, 0xbd, 0xb0, 0xbd,
    0x61, 0xcf, 0x97, 0xbc, 0x59, 0xb7, 0xfa, 0x3c, 0x7d, 0x59,
    0x4e, 0xbd, 0x7d, 0x48, 0x28, 0x3d, 0x01, 0x2c, 0x73,
    0x3a, 0x0e, 0xd6, 0x5a, 0x3d, 0x6a, 0xa2, 0xa7, 0x3c  };
  return AI_HANDLE_PTR(s_digit_recognition_model_weights);
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <ai_digit_recognition_model_data_weights_get+0x10>)
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	08007e20 	.word	0x08007e20

08003564 <_platform_network_state_setup.isra.1>:
 8003564:	b430      	push	{r4, r5}
 8003566:	68dd      	ldr	r5, [r3, #12]
 8003568:	695c      	ldr	r4, [r3, #20]
 800356a:	68ed      	ldr	r5, [r5, #12]
 800356c:	68e4      	ldr	r4, [r4, #12]
 800356e:	fb04 f405 	mul.w	r4, r4, r5
 8003572:	6084      	str	r4, [r0, #8]
 8003574:	8809      	ldrh	r1, [r1, #0]
 8003576:	fb04 f401 	mul.w	r4, r4, r1
 800357a:	60c4      	str	r4, [r0, #12]
 800357c:	6811      	ldr	r1, [r2, #0]
 800357e:	6041      	str	r1, [r0, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	4414      	add	r4, r2
 8003584:	6004      	str	r4, [r0, #0]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	6814      	ldr	r4, [r2, #0]
 800358a:	00a4      	lsls	r4, r4, #2
 800358c:	d407      	bmi.n	800359e <_platform_network_state_setup.isra.1+0x3a>
 800358e:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8003592:	1b64      	subs	r4, r4, r5
 8003594:	4421      	add	r1, r4
 8003596:	6091      	str	r1, [r2, #8]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	6842      	ldr	r2, [r0, #4]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	bc30      	pop	{r4, r5}
 80035a0:	4770      	bx	lr
	...

080035a4 <ai_platform_network_create>:
 80035a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035a8:	4f30      	ldr	r7, [pc, #192]	; (800366c <ai_platform_network_create+0xc8>)
 80035aa:	4e31      	ldr	r6, [pc, #196]	; (8003670 <ai_platform_network_create+0xcc>)
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	b083      	sub	sp, #12
 80035b0:	f021 0101 	bic.w	r1, r1, #1
 80035b4:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80035b8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	2101      	movs	r1, #1
 80035c0:	6031      	str	r1, [r6, #0]
 80035c2:	6831      	ldr	r1, [r6, #0]
 80035c4:	2900      	cmp	r1, #0
 80035c6:	d1fc      	bne.n	80035c2 <ai_platform_network_create+0x1e>
 80035c8:	492a      	ldr	r1, [pc, #168]	; (8003674 <ai_platform_network_create+0xd0>)
 80035ca:	4d2b      	ldr	r5, [pc, #172]	; (8003678 <ai_platform_network_create+0xd4>)
 80035cc:	600d      	str	r5, [r1, #0]
 80035ce:	680d      	ldr	r5, [r1, #0]
 80035d0:	492a      	ldr	r1, [pc, #168]	; (800367c <ai_platform_network_create+0xd8>)
 80035d2:	428d      	cmp	r5, r1
 80035d4:	d000      	beq.n	80035d8 <ai_platform_network_create+0x34>
 80035d6:	e7fe      	b.n	80035d6 <ai_platform_network_create+0x32>
 80035d8:	b1e0      	cbz	r0, 8003614 <ai_platform_network_create+0x70>
 80035da:	4680      	mov	r8, r0
 80035dc:	461d      	mov	r5, r3
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <ai_platform_network_create+0xdc>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	f8c8 2000 	str.w	r2, [r8]
 80035e6:	4617      	mov	r7, r2
 80035e8:	f000 fb16 	bl	8003c18 <core_init>
 80035ec:	b1b8      	cbz	r0, 800361e <ai_platform_network_create+0x7a>
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <ai_platform_network_create+0xc8>)
 80035f0:	491f      	ldr	r1, [pc, #124]	; (8003670 <ai_platform_network_create+0xcc>)
 80035f2:	6813      	ldr	r3, [r2, #0]
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	2301      	movs	r3, #1
 80035fc:	6033      	str	r3, [r6, #0]
 80035fe:	680e      	ldr	r6, [r1, #0]
 8003600:	2e00      	cmp	r6, #0
 8003602:	d1fc      	bne.n	80035fe <ai_platform_network_create+0x5a>
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <ai_platform_network_create+0xd0>)
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <ai_platform_network_create+0xd4>)
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <ai_platform_network_create+0xd8>)
 800360e:	429a      	cmp	r2, r3
 8003610:	d016      	beq.n	8003640 <ai_platform_network_create+0x9c>
 8003612:	e7fe      	b.n	8003612 <ai_platform_network_create+0x6e>
 8003614:	f241 0010 	movw	r0, #4112	; 0x1010
 8003618:	b003      	add	sp, #12
 800361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800361e:	062d      	lsls	r5, r5, #24
 8003620:	0424      	lsls	r4, r4, #16
 8003622:	2130      	movs	r1, #48	; 0x30
 8003624:	2300      	movs	r3, #0
 8003626:	f8c8 3000 	str.w	r3, [r8]
 800362a:	2210      	movs	r2, #16
 800362c:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 8003630:	2000      	movs	r0, #0
 8003632:	432b      	orrs	r3, r5
 8003634:	f361 0007 	bfi	r0, r1, #0, #8
 8003638:	663b      	str	r3, [r7, #96]	; 0x60
 800363a:	f362 201f 	bfi	r0, r2, #8, #24
 800363e:	e7eb      	b.n	8003618 <ai_platform_network_create+0x74>
 8003640:	062d      	lsls	r5, r5, #24
 8003642:	0424      	lsls	r4, r4, #16
 8003644:	ea45 0304 	orr.w	r3, r5, r4
 8003648:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800364c:	d001      	beq.n	8003652 <ai_platform_network_create+0xae>
 800364e:	2101      	movs	r1, #1
 8003650:	e7e8      	b.n	8003624 <ai_platform_network_create+0x80>
 8003652:	a802      	add	r0, sp, #8
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <ai_platform_network_create+0xe0>)
 8003656:	f840 3d04 	str.w	r3, [r0, #-4]!
 800365a:	f001 f861 	bl	8004720 <ai_check_custom_types>
 800365e:	b110      	cbz	r0, 8003666 <ai_platform_network_create+0xc2>
 8003660:	4632      	mov	r2, r6
 8003662:	4631      	mov	r1, r6
 8003664:	e7e2      	b.n	800362c <ai_platform_network_create+0x88>
 8003666:	2102      	movs	r1, #2
 8003668:	e7dc      	b.n	8003624 <ai_platform_network_create+0x80>
 800366a:	bf00      	nop
 800366c:	e0002000 	.word	0xe0002000
 8003670:	40023008 	.word	0x40023008
 8003674:	40023000 	.word	0x40023000
 8003678:	f407a5c2 	.word	0xf407a5c2
 800367c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003680:	a1c00100 	.word	0xa1c00100
 8003684:	84048403 	.word	0x84048403

08003688 <ai_platform_network_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	460c      	mov	r4, r1
 800368c:	4605      	mov	r5, r0
 800368e:	b120      	cbz	r0, 800369a <ai_platform_network_init+0x12>
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <ai_platform_network_init+0xcc>)
 8003692:	6802      	ldr	r2, [r0, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	bf18      	it	ne
 8003698:	2500      	movne	r5, #0
 800369a:	492f      	ldr	r1, [pc, #188]	; (8003758 <ai_platform_network_init+0xd0>)
 800369c:	4a2f      	ldr	r2, [pc, #188]	; (800375c <ai_platform_network_init+0xd4>)
 800369e:	680b      	ldr	r3, [r1, #0]
 80036a0:	2001      	movs	r0, #1
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	6010      	str	r0, [r2, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d1fc      	bne.n	80036ac <ai_platform_network_init+0x24>
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <ai_platform_network_init+0xd8>)
 80036b4:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <ai_platform_network_init+0xdc>)
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <ai_platform_network_init+0xe0>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d000      	beq.n	80036c2 <ai_platform_network_init+0x3a>
 80036c0:	e7fe      	b.n	80036c0 <ai_platform_network_init+0x38>
 80036c2:	b1dd      	cbz	r5, 80036fc <ai_platform_network_init+0x74>
 80036c4:	b1e4      	cbz	r4, 8003700 <ai_platform_network_init+0x78>
 80036c6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80036c8:	6926      	ldr	r6, [r4, #16]
 80036ca:	b30f      	cbz	r7, 8003710 <ai_platform_network_init+0x88>
 80036cc:	b38e      	cbz	r6, 8003732 <ai_platform_network_init+0xaa>
 80036ce:	4627      	mov	r7, r4
 80036d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80036d2:	f105 0618 	add.w	r6, r5, #24
 80036d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036d8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80036dc:	e886 0003 	stmia.w	r6, {r0, r1}
 80036e0:	3418      	adds	r4, #24
 80036e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e4:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80036e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ee:	2303      	movs	r3, #3
 80036f0:	e886 0003 	stmia.w	r6, {r0, r1}
 80036f4:	60eb      	str	r3, [r5, #12]
 80036f6:	4628      	mov	r0, r5
 80036f8:	f001 f83c 	bl	8004774 <ai_layers_init_all>
 80036fc:	4628      	mov	r0, r5
 80036fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003700:	f105 0010 	add.w	r0, r5, #16
 8003704:	2211      	movs	r2, #17
 8003706:	2110      	movs	r1, #16
 8003708:	4625      	mov	r5, r4
 800370a:	f000 fa87 	bl	8003c1c <core_set_error>
 800370e:	e7f5      	b.n	80036fc <ai_platform_network_init+0x74>
 8003710:	8c21      	ldrh	r1, [r4, #32]
 8003712:	8be2      	ldrh	r2, [r4, #30]
 8003714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003716:	fb02 f201 	mul.w	r2, r2, r1
 800371a:	fb03 f302 	mul.w	r3, r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0d4      	beq.n	80036cc <ai_platform_network_init+0x44>
 8003722:	f105 0010 	add.w	r0, r5, #16
 8003726:	2213      	movs	r2, #19
 8003728:	2110      	movs	r1, #16
 800372a:	463d      	mov	r5, r7
 800372c:	f000 fa76 	bl	8003c1c <core_set_error>
 8003730:	e7e4      	b.n	80036fc <ai_platform_network_init+0x74>
 8003732:	8921      	ldrh	r1, [r4, #8]
 8003734:	88e2      	ldrh	r2, [r4, #6]
 8003736:	68e3      	ldr	r3, [r4, #12]
 8003738:	fb02 f201 	mul.w	r2, r2, r1
 800373c:	fb03 f302 	mul.w	r3, r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0c4      	beq.n	80036ce <ai_platform_network_init+0x46>
 8003744:	f105 0010 	add.w	r0, r5, #16
 8003748:	2212      	movs	r2, #18
 800374a:	2110      	movs	r1, #16
 800374c:	4635      	mov	r5, r6
 800374e:	f000 fa65 	bl	8003c1c <core_set_error>
 8003752:	e7d3      	b.n	80036fc <ai_platform_network_init+0x74>
 8003754:	a1c00100 	.word	0xa1c00100
 8003758:	e0002000 	.word	0xe0002000
 800375c:	40023008 	.word	0x40023008
 8003760:	40023000 	.word	0x40023000
 8003764:	f407a5c2 	.word	0xf407a5c2
 8003768:	b5e8b5cd 	.word	0xb5e8b5cd

0800376c <ai_platform_network_post_init>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	4604      	mov	r4, r0
 8003770:	b120      	cbz	r0, 800377c <ai_platform_network_post_init+0x10>
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <ai_platform_network_post_init+0x80>)
 8003774:	6802      	ldr	r2, [r0, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	bf18      	it	ne
 800377a:	2400      	movne	r4, #0
 800377c:	491c      	ldr	r1, [pc, #112]	; (80037f0 <ai_platform_network_post_init+0x84>)
 800377e:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <ai_platform_network_post_init+0x88>)
 8003780:	680b      	ldr	r3, [r1, #0]
 8003782:	2001      	movs	r0, #1
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	600b      	str	r3, [r1, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	6010      	str	r0, [r2, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2a00      	cmp	r2, #0
 8003792:	d1fc      	bne.n	800378e <ai_platform_network_post_init+0x22>
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <ai_platform_network_post_init+0x8c>)
 8003796:	4a19      	ldr	r2, [pc, #100]	; (80037fc <ai_platform_network_post_init+0x90>)
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <ai_platform_network_post_init+0x94>)
 800379e:	429a      	cmp	r2, r3
 80037a0:	d000      	beq.n	80037a4 <ai_platform_network_post_init+0x38>
 80037a2:	e7fe      	b.n	80037a2 <ai_platform_network_post_init+0x36>
 80037a4:	b1bc      	cbz	r4, 80037d6 <ai_platform_network_post_init+0x6a>
 80037a6:	68e3      	ldr	r3, [r4, #12]
 80037a8:	f013 0502 	ands.w	r5, r3, #2
 80037ac:	d015      	beq.n	80037da <ai_platform_network_post_init+0x6e>
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 fff4 	bl	800479c <ai_layers_post_init_all>
 80037b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037b6:	b163      	cbz	r3, 80037d2 <ai_platform_network_post_init+0x66>
 80037b8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80037ba:	b91d      	cbnz	r5, 80037c4 <ai_platform_network_post_init+0x58>
 80037bc:	e009      	b.n	80037d2 <ai_platform_network_post_init+0x66>
 80037be:	461d      	mov	r5, r3
 80037c0:	b13b      	cbz	r3, 80037d2 <ai_platform_network_post_init+0x66>
 80037c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037c6:	4629      	mov	r1, r5
 80037c8:	2000      	movs	r0, #0
 80037ca:	4798      	blx	r3
 80037cc:	692b      	ldr	r3, [r5, #16]
 80037ce:	42ab      	cmp	r3, r5
 80037d0:	d1f5      	bne.n	80037be <ai_platform_network_post_init+0x52>
 80037d2:	2001      	movs	r0, #1
 80037d4:	bd38      	pop	{r3, r4, r5, pc}
 80037d6:	4620      	mov	r0, r4
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	f104 0010 	add.w	r0, r4, #16
 80037de:	2210      	movs	r2, #16
 80037e0:	2111      	movs	r1, #17
 80037e2:	f000 fa1b 	bl	8003c1c <core_set_error>
 80037e6:	4628      	mov	r0, r5
 80037e8:	bd38      	pop	{r3, r4, r5, pc}
 80037ea:	bf00      	nop
 80037ec:	a1c00100 	.word	0xa1c00100
 80037f0:	e0002000 	.word	0xe0002000
 80037f4:	40023008 	.word	0x40023008
 80037f8:	40023000 	.word	0x40023000
 80037fc:	f407a5c2 	.word	0xf407a5c2
 8003800:	b5e8b5cd 	.word	0xb5e8b5cd

08003804 <ai_platform_network_process>:
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	b083      	sub	sp, #12
 800380a:	4604      	mov	r4, r0
 800380c:	9201      	str	r2, [sp, #4]
 800380e:	b120      	cbz	r0, 800381a <ai_platform_network_process+0x16>
 8003810:	4ba5      	ldr	r3, [pc, #660]	; (8003aa8 <ai_platform_network_process+0x2a4>)
 8003812:	6802      	ldr	r2, [r0, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	bf18      	it	ne
 8003818:	2400      	movne	r4, #0
 800381a:	48a4      	ldr	r0, [pc, #656]	; (8003aac <ai_platform_network_process+0x2a8>)
 800381c:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <ai_platform_network_process+0x2ac>)
 800381e:	6802      	ldr	r2, [r0, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	6002      	str	r2, [r0, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2a00      	cmp	r2, #0
 800382e:	d1fc      	bne.n	800382a <ai_platform_network_process+0x26>
 8003830:	4ba0      	ldr	r3, [pc, #640]	; (8003ab4 <ai_platform_network_process+0x2b0>)
 8003832:	4aa1      	ldr	r2, [pc, #644]	; (8003ab8 <ai_platform_network_process+0x2b4>)
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4ba0      	ldr	r3, [pc, #640]	; (8003abc <ai_platform_network_process+0x2b8>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d000      	beq.n	8003840 <ai_platform_network_process+0x3c>
 800383e:	e7fe      	b.n	800383e <ai_platform_network_process+0x3a>
 8003840:	2c00      	cmp	r4, #0
 8003842:	d066      	beq.n	8003912 <ai_platform_network_process+0x10e>
 8003844:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8003848:	b107      	cbz	r7, 800384c <ai_platform_network_process+0x48>
 800384a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2600      	movs	r6, #0
 8003854:	2b03      	cmp	r3, #3
 8003856:	6166      	str	r6, [r4, #20]
 8003858:	f040 80fe 	bne.w	8003a58 <ai_platform_network_process+0x254>
 800385c:	2900      	cmp	r1, #0
 800385e:	d07f      	beq.n	8003960 <ai_platform_network_process+0x15c>
 8003860:	2f00      	cmp	r7, #0
 8003862:	d07d      	beq.n	8003960 <ai_platform_network_process+0x15c>
 8003864:	883b      	ldrh	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07a      	beq.n	8003960 <ai_platform_network_process+0x15c>
 800386a:	460d      	mov	r5, r1
 800386c:	46a0      	mov	r8, r4
 800386e:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8003872:	429e      	cmp	r6, r3
 8003874:	d27d      	bcs.n	8003972 <ai_platform_network_process+0x16e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d07a      	beq.n	8003972 <ai_platform_network_process+0x16e>
 800387c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8003880:	2c00      	cmp	r4, #0
 8003882:	d076      	beq.n	8003972 <ai_platform_network_process+0x16e>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800388c:	d067      	beq.n	800395e <ai_platform_network_process+0x15a>
 800388e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8003892:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8003896:	69a0      	ldr	r0, [r4, #24]
 8003898:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800389c:	6841      	ldr	r1, [r0, #4]
 800389e:	fb0b f30e 	mul.w	r3, fp, lr
 80038a2:	fb0c f303 	mul.w	r3, ip, r3
 80038a6:	4299      	cmp	r1, r3
 80038a8:	d350      	bcc.n	800394c <ai_platform_network_process+0x148>
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	455a      	cmp	r2, fp
 80038b0:	d14c      	bne.n	800394c <ai_platform_network_process+0x148>
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	4572      	cmp	r2, lr
 80038b6:	d149      	bne.n	800394c <ai_platform_network_process+0x148>
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	459c      	cmp	ip, r3
 80038bc:	d146      	bne.n	800394c <ai_platform_network_process+0x148>
 80038be:	6800      	ldr	r0, [r0, #0]
 80038c0:	f001 f81e 	bl	8004900 <ai_array_get_byte_size>
 80038c4:	68e2      	ldr	r2, [r4, #12]
 80038c6:	6963      	ldr	r3, [r4, #20]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	fb03 f302 	mul.w	r3, r3, r2
 80038d0:	4298      	cmp	r0, r3
 80038d2:	d33b      	bcc.n	800394c <ai_platform_network_process+0x148>
 80038d4:	69a3      	ldr	r3, [r4, #24]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	f000 ffc6 	bl	8004868 <ai_array_to_buffer_fmt>
 80038dc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80038e0:	4043      	eors	r3, r0
 80038e2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80038e6:	d128      	bne.n	800393a <ai_platform_network_process+0x136>
 80038e8:	68eb      	ldr	r3, [r5, #12]
 80038ea:	b1f3      	cbz	r3, 800392a <ai_platform_network_process+0x126>
 80038ec:	f8b5 b000 	ldrh.w	fp, [r5]
 80038f0:	f1bb 0f00 	cmp.w	fp, #0
 80038f4:	d012      	beq.n	800391c <ai_platform_network_process+0x118>
 80038f6:	4623      	mov	r3, r4
 80038f8:	f105 020c 	add.w	r2, r5, #12
 80038fc:	4629      	mov	r1, r5
 80038fe:	4650      	mov	r0, sl
 8003900:	f7ff fe30 	bl	8003564 <_platform_network_state_setup.isra.1>
 8003904:	45d9      	cmp	r9, fp
 8003906:	883b      	ldrh	r3, [r7, #0]
 8003908:	bf38      	it	cc
 800390a:	46d9      	movcc	r9, fp
 800390c:	3601      	adds	r6, #1
 800390e:	3518      	adds	r5, #24
 8003910:	e7af      	b.n	8003872 <ai_platform_network_process+0x6e>
 8003912:	46a3      	mov	fp, r4
 8003914:	4658      	mov	r0, fp
 8003916:	b003      	add	sp, #12
 8003918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391c:	f108 0010 	add.w	r0, r8, #16
 8003920:	2221      	movs	r2, #33	; 0x21
 8003922:	2112      	movs	r1, #18
 8003924:	f000 f97a 	bl	8003c1c <core_set_error>
 8003928:	e7f4      	b.n	8003914 <ai_platform_network_process+0x110>
 800392a:	f108 0010 	add.w	r0, r8, #16
 800392e:	2217      	movs	r2, #23
 8003930:	2112      	movs	r1, #18
 8003932:	469b      	mov	fp, r3
 8003934:	f000 f972 	bl	8003c1c <core_set_error>
 8003938:	e7ec      	b.n	8003914 <ai_platform_network_process+0x110>
 800393a:	f108 0010 	add.w	r0, r8, #16
 800393e:	2219      	movs	r2, #25
 8003940:	2112      	movs	r1, #18
 8003942:	f000 f96b 	bl	8003c1c <core_set_error>
 8003946:	f04f 0b00 	mov.w	fp, #0
 800394a:	e7e3      	b.n	8003914 <ai_platform_network_process+0x110>
 800394c:	f108 0010 	add.w	r0, r8, #16
 8003950:	2218      	movs	r2, #24
 8003952:	2112      	movs	r1, #18
 8003954:	f000 f962 	bl	8003c1c <core_set_error>
 8003958:	f04f 0b00 	mov.w	fp, #0
 800395c:	e7da      	b.n	8003914 <ai_platform_network_process+0x110>
 800395e:	4644      	mov	r4, r8
 8003960:	f104 0010 	add.w	r0, r4, #16
 8003964:	2217      	movs	r2, #23
 8003966:	2112      	movs	r1, #18
 8003968:	f000 f958 	bl	8003c1c <core_set_error>
 800396c:	f04f 0b00 	mov.w	fp, #0
 8003970:	e7d0      	b.n	8003914 <ai_platform_network_process+0x110>
 8003972:	9a01      	ldr	r2, [sp, #4]
 8003974:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8003978:	4644      	mov	r4, r8
 800397a:	2a00      	cmp	r2, #0
 800397c:	f000 80a2 	beq.w	8003ac4 <ai_platform_network_process+0x2c0>
 8003980:	2b01      	cmp	r3, #1
 8003982:	f240 8140 	bls.w	8003c06 <ai_platform_network_process+0x402>
 8003986:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800398a:	f118 0f0c 	cmn.w	r8, #12
 800398e:	f000 813a 	beq.w	8003c06 <ai_platform_network_process+0x402>
 8003992:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8135 	beq.w	8003c06 <ai_platform_network_process+0x402>
 800399c:	9d01      	ldr	r5, [sp, #4]
 800399e:	2700      	movs	r7, #0
 80039a0:	3504      	adds	r5, #4
 80039a2:	429f      	cmp	r7, r3
 80039a4:	f080 808c 	bcs.w	8003ac0 <ai_platform_network_process+0x2bc>
 80039a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8087 	beq.w	8003ac0 <ai_platform_network_process+0x2bc>
 80039b2:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80039b6:	2e00      	cmp	r6, #0
 80039b8:	f000 8082 	beq.w	8003ac0 <ai_platform_network_process+0x2bc>
 80039bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80039c6:	d067      	beq.n	8003a98 <ai_platform_network_process+0x294>
 80039c8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80039cc:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80039d0:	69b0      	ldr	r0, [r6, #24]
 80039d2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80039d6:	6841      	ldr	r1, [r0, #4]
 80039d8:	fb0b f30e 	mul.w	r3, fp, lr
 80039dc:	fb0c f303 	mul.w	r3, ip, r3
 80039e0:	4299      	cmp	r1, r3
 80039e2:	f0c0 8110 	bcc.w	8003c06 <ai_platform_network_process+0x402>
 80039e6:	68f3      	ldr	r3, [r6, #12]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	455a      	cmp	r2, fp
 80039ec:	f040 810b 	bne.w	8003c06 <ai_platform_network_process+0x402>
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	4572      	cmp	r2, lr
 80039f4:	f040 8107 	bne.w	8003c06 <ai_platform_network_process+0x402>
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	459c      	cmp	ip, r3
 80039fc:	f040 8103 	bne.w	8003c06 <ai_platform_network_process+0x402>
 8003a00:	6800      	ldr	r0, [r0, #0]
 8003a02:	f000 ff7d 	bl	8004900 <ai_array_get_byte_size>
 8003a06:	68f2      	ldr	r2, [r6, #12]
 8003a08:	6973      	ldr	r3, [r6, #20]
 8003a0a:	68d2      	ldr	r2, [r2, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	fb03 f302 	mul.w	r3, r3, r2
 8003a12:	4298      	cmp	r0, r3
 8003a14:	f0c0 80f7 	bcc.w	8003c06 <ai_platform_network_process+0x402>
 8003a18:	69b3      	ldr	r3, [r6, #24]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	f000 ff24 	bl	8004868 <ai_array_to_buffer_fmt>
 8003a20:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8003a24:	4043      	eors	r3, r0
 8003a26:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8003a2a:	d12c      	bne.n	8003a86 <ai_platform_network_process+0x282>
 8003a2c:	68eb      	ldr	r3, [r5, #12]
 8003a2e:	b313      	cbz	r3, 8003a76 <ai_platform_network_process+0x272>
 8003a30:	f8b5 b000 	ldrh.w	fp, [r5]
 8003a34:	f1bb 0f00 	cmp.w	fp, #0
 8003a38:	d016      	beq.n	8003a68 <ai_platform_network_process+0x264>
 8003a3a:	4633      	mov	r3, r6
 8003a3c:	f105 020c 	add.w	r2, r5, #12
 8003a40:	4629      	mov	r1, r5
 8003a42:	4650      	mov	r0, sl
 8003a44:	f7ff fd8e 	bl	8003564 <_platform_network_state_setup.isra.1>
 8003a48:	45d9      	cmp	r9, fp
 8003a4a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003a4e:	bf38      	it	cc
 8003a50:	46d9      	movcc	r9, fp
 8003a52:	3701      	adds	r7, #1
 8003a54:	3518      	adds	r5, #24
 8003a56:	e7a4      	b.n	80039a2 <ai_platform_network_process+0x19e>
 8003a58:	f104 0010 	add.w	r0, r4, #16
 8003a5c:	2230      	movs	r2, #48	; 0x30
 8003a5e:	2111      	movs	r1, #17
 8003a60:	f000 f8dc 	bl	8003c1c <core_set_error>
 8003a64:	46b3      	mov	fp, r6
 8003a66:	e755      	b.n	8003914 <ai_platform_network_process+0x110>
 8003a68:	f104 0010 	add.w	r0, r4, #16
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	2113      	movs	r1, #19
 8003a70:	f000 f8d4 	bl	8003c1c <core_set_error>
 8003a74:	e74e      	b.n	8003914 <ai_platform_network_process+0x110>
 8003a76:	f104 0010 	add.w	r0, r4, #16
 8003a7a:	2217      	movs	r2, #23
 8003a7c:	2113      	movs	r1, #19
 8003a7e:	469b      	mov	fp, r3
 8003a80:	f000 f8cc 	bl	8003c1c <core_set_error>
 8003a84:	e746      	b.n	8003914 <ai_platform_network_process+0x110>
 8003a86:	f104 0010 	add.w	r0, r4, #16
 8003a8a:	2219      	movs	r2, #25
 8003a8c:	2113      	movs	r1, #19
 8003a8e:	f000 f8c5 	bl	8003c1c <core_set_error>
 8003a92:	f04f 0b00 	mov.w	fp, #0
 8003a96:	e73d      	b.n	8003914 <ai_platform_network_process+0x110>
 8003a98:	f104 0010 	add.w	r0, r4, #16
 8003a9c:	2217      	movs	r2, #23
 8003a9e:	2113      	movs	r1, #19
 8003aa0:	f000 f8bc 	bl	8003c1c <core_set_error>
 8003aa4:	46d3      	mov	fp, sl
 8003aa6:	e735      	b.n	8003914 <ai_platform_network_process+0x110>
 8003aa8:	a1c00100 	.word	0xa1c00100
 8003aac:	e0002000 	.word	0xe0002000
 8003ab0:	40023008 	.word	0x40023008
 8003ab4:	40023000 	.word	0x40023000
 8003ab8:	f407a5c2 	.word	0xf407a5c2
 8003abc:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ac0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8003ac4:	f8a4 9014 	strh.w	r9, [r4, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8099 	beq.w	8003c00 <ai_platform_network_process+0x3fc>
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003ad2:	f240 8093 	bls.w	8003bfc <ai_platform_network_process+0x3f8>
 8003ad6:	f105 070c 	add.w	r7, r5, #12
 8003ada:	8ae0      	ldrh	r0, [r4, #22]
 8003adc:	8aa3      	ldrh	r3, [r4, #20]
 8003ade:	4283      	cmp	r3, r0
 8003ae0:	d977      	bls.n	8003bd2 <ai_platform_network_process+0x3ce>
 8003ae2:	46a3      	mov	fp, r4
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	d032      	beq.n	8003b4e <ai_platform_network_process+0x34a>
 8003ae8:	882b      	ldrh	r3, [r5, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02f      	beq.n	8003b4e <ai_platform_network_process+0x34a>
 8003aee:	686b      	ldr	r3, [r5, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02c      	beq.n	8003b4e <ai_platform_network_process+0x34a>
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f04f 0800 	mov.w	r8, #0
 8003afa:	b343      	cbz	r3, 8003b4e <ai_platform_network_process+0x34a>
 8003afc:	68a9      	ldr	r1, [r5, #8]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	f8d1 a000 	ldr.w	sl, [r1]
 8003b04:	6814      	ldr	r4, [r2, #0]
 8003b06:	6890      	ldr	r0, [r2, #8]
 8003b08:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003b0c:	eb0a 0609 	add.w	r6, sl, r9
 8003b10:	00a4      	lsls	r4, r4, #2
 8003b12:	6871      	ldr	r1, [r6, #4]
 8003b14:	d45f      	bmi.n	8003bd6 <ai_platform_network_process+0x3d2>
 8003b16:	68d4      	ldr	r4, [r2, #12]
 8003b18:	1b00      	subs	r0, r0, r4
 8003b1a:	4401      	add	r1, r0
 8003b1c:	6091      	str	r1, [r2, #8]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	6872      	ldr	r2, [r6, #4]
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8003b28:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003b2c:	440b      	add	r3, r1
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	bf24      	itt	cs
 8003b32:	68f3      	ldrcs	r3, [r6, #12]
 8003b34:	1ad3      	subcs	r3, r2, r3
 8003b36:	6073      	str	r3, [r6, #4]
 8003b38:	882b      	ldrh	r3, [r5, #0]
 8003b3a:	f108 0801 	add.w	r8, r8, #1
 8003b3e:	4598      	cmp	r8, r3
 8003b40:	d205      	bcs.n	8003b4e <ai_platform_network_process+0x34a>
 8003b42:	686b      	ldr	r3, [r5, #4]
 8003b44:	b11b      	cbz	r3, 8003b4e <ai_platform_network_process+0x34a>
 8003b46:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1d6      	bne.n	8003afc <ai_platform_network_process+0x2f8>
 8003b4e:	4658      	mov	r0, fp
 8003b50:	f000 fe3c 	bl	80047cc <ai_layers_forward_all>
 8003b54:	2f00      	cmp	r7, #0
 8003b56:	d032      	beq.n	8003bbe <ai_platform_network_process+0x3ba>
 8003b58:	883b      	ldrh	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02f      	beq.n	8003bbe <ai_platform_network_process+0x3ba>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	b36b      	cbz	r3, 8003bbe <ai_platform_network_process+0x3ba>
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	b358      	cbz	r0, 8003bbe <ai_platform_network_process+0x3ba>
 8003b66:	f04f 0800 	mov.w	r8, #0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6981      	ldr	r1, [r0, #24]
 8003b6e:	f8d3 a000 	ldr.w	sl, [r3]
 8003b72:	680c      	ldr	r4, [r1, #0]
 8003b74:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8003b78:	eb0a 0609 	add.w	r6, sl, r9
 8003b7c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8003b80:	00a4      	lsls	r4, r4, #2
 8003b82:	eb0c 0302 	add.w	r3, ip, r2
 8003b86:	d42a      	bmi.n	8003bde <ai_platform_network_process+0x3da>
 8003b88:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf24      	itt	cs
 8003b90:	68f3      	ldrcs	r3, [r6, #12]
 8003b92:	1ad3      	subcs	r3, r2, r3
 8003b94:	6073      	str	r3, [r6, #4]
 8003b96:	6981      	ldr	r1, [r0, #24]
 8003b98:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8003b9c:	1b12      	subs	r2, r2, r4
 8003b9e:	4413      	add	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
 8003ba2:	6983      	ldr	r3, [r0, #24]
 8003ba4:	6872      	ldr	r2, [r6, #4]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	883b      	ldrh	r3, [r7, #0]
 8003baa:	f108 0801 	add.w	r8, r8, #1
 8003bae:	4598      	cmp	r8, r3
 8003bb0:	d205      	bcs.n	8003bbe <ai_platform_network_process+0x3ba>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	b11b      	cbz	r3, 8003bbe <ai_platform_network_process+0x3ba>
 8003bb6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d1d5      	bne.n	8003b6a <ai_platform_network_process+0x366>
 8003bbe:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8003bc2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	b280      	uxth	r0, r0
 8003bca:	4283      	cmp	r3, r0
 8003bcc:	f8ab 0016 	strh.w	r0, [fp, #22]
 8003bd0:	d888      	bhi.n	8003ae4 <ai_platform_network_process+0x2e0>
 8003bd2:	4683      	mov	fp, r0
 8003bd4:	e69e      	b.n	8003914 <ai_platform_network_process+0x110>
 8003bd6:	68b2      	ldr	r2, [r6, #8]
 8003bd8:	f000 fee6 	bl	80049a8 <memcpy>
 8003bdc:	e7a2      	b.n	8003b24 <ai_platform_network_process+0x320>
 8003bde:	6889      	ldr	r1, [r1, #8]
 8003be0:	4660      	mov	r0, ip
 8003be2:	f000 fee1 	bl	80049a8 <memcpy>
 8003be6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8003bea:	f85a 2009 	ldr.w	r2, [sl, r9]
 8003bee:	440b      	add	r3, r1
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf24      	itt	cs
 8003bf4:	68f3      	ldrcs	r3, [r6, #12]
 8003bf6:	1ad3      	subcs	r3, r2, r3
 8003bf8:	6073      	str	r3, [r6, #4]
 8003bfa:	e7d5      	b.n	8003ba8 <ai_platform_network_process+0x3a4>
 8003bfc:	2700      	movs	r7, #0
 8003bfe:	e76c      	b.n	8003ada <ai_platform_network_process+0x2d6>
 8003c00:	461d      	mov	r5, r3
 8003c02:	461f      	mov	r7, r3
 8003c04:	e769      	b.n	8003ada <ai_platform_network_process+0x2d6>
 8003c06:	f104 0010 	add.w	r0, r4, #16
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	2113      	movs	r1, #19
 8003c0e:	f000 f805 	bl	8003c1c <core_set_error>
 8003c12:	f04f 0b00 	mov.w	fp, #0
 8003c16:	e67d      	b.n	8003914 <ai_platform_network_process+0x110>

08003c18 <core_init>:
 8003c18:	2001      	movs	r0, #1
 8003c1a:	4770      	bx	lr

08003c1c <core_set_error>:
 8003c1c:	7803      	ldrb	r3, [r0, #0]
 8003c1e:	b933      	cbnz	r3, 8003c2e <core_set_error+0x12>
 8003c20:	7001      	strb	r1, [r0, #0]
 8003c22:	6803      	ldr	r3, [r0, #0]
 8003c24:	f362 231f 	bfi	r3, r2, #8, #24
 8003c28:	6003      	str	r3, [r0, #0]
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	4770      	bx	lr
 8003c2e:	2000      	movs	r0, #0
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop

08003c34 <ai_dict8_dot_array_f32>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003c3c:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8003c40:	f000 80c0 	beq.w	8003dc4 <ai_dict8_dot_array_f32+0x190>
 8003c44:	f101 0408 	add.w	r4, r1, #8
 8003c48:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8003c4c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003dcc <ai_dict8_dot_array_f32+0x198>
 8003c50:	eb04 0e09 	add.w	lr, r4, r9
 8003c54:	f103 0520 	add.w	r5, r3, #32
 8003c58:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8003c5c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8003c60:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8003c64:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8003c68:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8003c6c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8003c70:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8003c74:	ed55 3a04 	vldr	s7, [r5, #-16]
 8003c78:	ed55 4a03 	vldr	s9, [r5, #-12]
 8003c7c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003c80:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003c84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003c88:	edd6 7a00 	vldr	s15, [r6]
 8003c8c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8003c90:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003c94:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003c98:	ed9a 3a00 	vldr	s6, [sl]
 8003c9c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8003ca0:	eee3 7a05 	vfma.f32	s15, s6, s10
 8003ca4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003ca8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003cac:	ed97 3a00 	vldr	s6, [r7]
 8003cb0:	ed96 5a00 	vldr	s10, [r6]
 8003cb4:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8003cb8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8003cbc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8003cc0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003cc8:	ed9a 3a00 	vldr	s6, [sl]
 8003ccc:	ed96 4a00 	vldr	s8, [r6]
 8003cd0:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8003cd4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8003cd8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003cdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003ce0:	ed97 5a00 	vldr	s10, [r7]
 8003ce4:	ed96 6a00 	vldr	s12, [r6]
 8003ce8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003cec:	3408      	adds	r4, #8
 8003cee:	45a6      	cmp	lr, r4
 8003cf0:	f105 0520 	add.w	r5, r5, #32
 8003cf4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003cf8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003cfc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d04:	d1a8      	bne.n	8003c58 <ai_dict8_dot_array_f32+0x24>
 8003d06:	4449      	add	r1, r9
 8003d08:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8003d0c:	f01c 0c07 	ands.w	ip, ip, #7
 8003d10:	d050      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003d12:	780c      	ldrb	r4, [r1, #0]
 8003d14:	edd3 6a00 	vldr	s13, [r3]
 8003d18:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003d1c:	edd4 7a00 	vldr	s15, [r4]
 8003d20:	f1bc 0f01 	cmp.w	ip, #1
 8003d24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d28:	d044      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003d2a:	784c      	ldrb	r4, [r1, #1]
 8003d2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d30:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003d34:	edd4 7a00 	vldr	s15, [r4]
 8003d38:	f1bc 0f02 	cmp.w	ip, #2
 8003d3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d40:	d038      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003d42:	788c      	ldrb	r4, [r1, #2]
 8003d44:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d48:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003d4c:	edd4 7a00 	vldr	s15, [r4]
 8003d50:	f1bc 0f03 	cmp.w	ip, #3
 8003d54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d58:	d02c      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003d5a:	78cc      	ldrb	r4, [r1, #3]
 8003d5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003d60:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003d64:	edd4 7a00 	vldr	s15, [r4]
 8003d68:	f1bc 0f04 	cmp.w	ip, #4
 8003d6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d70:	d020      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003d72:	790c      	ldrb	r4, [r1, #4]
 8003d74:	edd3 6a04 	vldr	s13, [r3, #16]
 8003d78:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003d7c:	edd4 7a00 	vldr	s15, [r4]
 8003d80:	f1bc 0f05 	cmp.w	ip, #5
 8003d84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003d88:	d014      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003d8a:	794c      	ldrb	r4, [r1, #5]
 8003d8c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003d90:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003d94:	edd4 7a00 	vldr	s15, [r4]
 8003d98:	f1bc 0f06 	cmp.w	ip, #6
 8003d9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003da0:	d008      	beq.n	8003db4 <ai_dict8_dot_array_f32+0x180>
 8003da2:	7989      	ldrb	r1, [r1, #6]
 8003da4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003da8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003dac:	edd2 6a00 	vldr	s13, [r2]
 8003db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003db4:	edd0 7a00 	vldr	s15, [r0]
 8003db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dbc:	ed80 7a00 	vstr	s14, [r0]
 8003dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8003dcc <ai_dict8_dot_array_f32+0x198>
 8003dc8:	e7a0      	b.n	8003d0c <ai_dict8_dot_array_f32+0xd8>
 8003dca:	bf00      	nop
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <ai_dict4_dot_array_f32>:
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003dd6:	f027 0c01 	bic.w	ip, r7, #1
 8003dda:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8003dde:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003de2:	f000 80ae 	beq.w	8003f42 <ai_dict4_dot_array_f32+0x172>
 8003de6:	1d0d      	adds	r5, r1, #4
 8003de8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8003dec:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003f48 <ai_dict4_dot_array_f32+0x178>
 8003df0:	eb05 0e09 	add.w	lr, r5, r9
 8003df4:	f103 0420 	add.w	r4, r3, #32
 8003df8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8003dfc:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8003e00:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8003e04:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8003e08:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8003e0c:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8003e10:	ed14 5a04 	vldr	s10, [r4, #-16]
 8003e14:	ed54 5a03 	vldr	s11, [r4, #-12]
 8003e18:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003e1c:	ed54 6a01 	vldr	s13, [r4, #-4]
 8003e20:	f006 0a0f 	and.w	sl, r6, #15
 8003e24:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003e28:	edda 7a00 	vldr	s15, [sl]
 8003e2c:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8003e30:	0936      	lsrs	r6, r6, #4
 8003e32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003e36:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003e3a:	ed96 3a00 	vldr	s6, [r6]
 8003e3e:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8003e42:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003e46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003e4a:	f00b 0b0f 	and.w	fp, fp, #15
 8003e4e:	edd6 3a00 	vldr	s7, [r6]
 8003e52:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8003e56:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003e5a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003e5e:	3504      	adds	r5, #4
 8003e60:	ed9b 4a00 	vldr	s8, [fp]
 8003e64:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8003e68:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003e6c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003e70:	f00a 0a0f 	and.w	sl, sl, #15
 8003e74:	eddb 4a00 	vldr	s9, [fp]
 8003e78:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003e7c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003e80:	45ae      	cmp	lr, r5
 8003e82:	ed9a 5a00 	vldr	s10, [sl]
 8003e86:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8003e8a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003e8e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003e92:	f006 060f 	and.w	r6, r6, #15
 8003e96:	edda 5a00 	vldr	s11, [sl]
 8003e9a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003e9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003ea2:	f104 0420 	add.w	r4, r4, #32
 8003ea6:	ed96 6a00 	vldr	s12, [r6]
 8003eaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eb2:	d1a1      	bne.n	8003df8 <ai_dict4_dot_array_f32+0x28>
 8003eb4:	4449      	add	r1, r9
 8003eb6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8003eba:	459c      	cmp	ip, r3
 8003ebc:	d92d      	bls.n	8003f1a <ai_dict4_dot_array_f32+0x14a>
 8003ebe:	f10c 0c07 	add.w	ip, ip, #7
 8003ec2:	f103 0508 	add.w	r5, r3, #8
 8003ec6:	ebac 0c05 	sub.w	ip, ip, r5
 8003eca:	f02c 0407 	bic.w	r4, ip, #7
 8003ece:	f103 0810 	add.w	r8, r3, #16
 8003ed2:	44a0      	add	r8, r4
 8003ed4:	f101 3eff 	add.w	lr, r1, #4294967295
 8003ed8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8003edc:	ed15 6a01 	vldr	s12, [r5, #-4]
 8003ee0:	ed55 6a02 	vldr	s13, [r5, #-8]
 8003ee4:	f004 060f 	and.w	r6, r4, #15
 8003ee8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003eec:	0924      	lsrs	r4, r4, #4
 8003eee:	edd6 7a00 	vldr	s15, [r6]
 8003ef2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003ef6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003efa:	ed94 6a00 	vldr	s12, [r4]
 8003efe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003f02:	3508      	adds	r5, #8
 8003f04:	45a8      	cmp	r8, r5
 8003f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f0a:	d1e5      	bne.n	8003ed8 <ai_dict4_dot_array_f32+0x108>
 8003f0c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8003f10:	f10c 0c01 	add.w	ip, ip, #1
 8003f14:	4461      	add	r1, ip
 8003f16:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003f1a:	07fc      	lsls	r4, r7, #31
 8003f1c:	d509      	bpl.n	8003f32 <ai_dict4_dot_array_f32+0x162>
 8003f1e:	7809      	ldrb	r1, [r1, #0]
 8003f20:	edd3 7a00 	vldr	s15, [r3]
 8003f24:	090b      	lsrs	r3, r1, #4
 8003f26:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003f2a:	edd2 6a00 	vldr	s13, [r2]
 8003f2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003f32:	edd0 7a00 	vldr	s15, [r0]
 8003f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f3a:	ed80 7a00 	vstr	s14, [r0]
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f42:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8003f48 <ai_dict4_dot_array_f32+0x178>
 8003f46:	e7b8      	b.n	8003eba <ai_dict4_dot_array_f32+0xea>
 8003f48:	00000000 	.word	0x00000000

08003f4c <forward_dense>:
 8003f4c:	6982      	ldr	r2, [r0, #24]
 8003f4e:	8813      	ldrh	r3, [r2, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 81ca 	beq.w	80042ea <forward_dense+0x39e>
 8003f56:	6852      	ldr	r2, [r2, #4]
 8003f58:	6850      	ldr	r0, [r2, #4]
 8003f5a:	b100      	cbz	r0, 8003f5e <forward_dense+0x12>
 8003f5c:	6800      	ldr	r0, [r0, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	f240 81c0 	bls.w	80042e4 <forward_dense+0x398>
 8003f64:	6911      	ldr	r1, [r2, #16]
 8003f66:	b101      	cbz	r1, 8003f6a <forward_dense+0x1e>
 8003f68:	6809      	ldr	r1, [r1, #0]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	f000 81bf 	beq.w	80042ee <forward_dense+0x3a2>
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	ed2d 8b10 	vpush	{d8-d15}
 8003f78:	69d3      	ldr	r3, [r2, #28]
 8003f7a:	b091      	sub	sp, #68	; 0x44
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 820b 	beq.w	8004398 <forward_dense+0x44c>
 8003f82:	681c      	ldr	r4, [r3, #0]
 8003f84:	9408      	str	r4, [sp, #32]
 8003f86:	f112 0418 	adds.w	r4, r2, #24
 8003f8a:	f000 81df 	beq.w	800434c <forward_dense+0x400>
 8003f8e:	8b12      	ldrh	r2, [r2, #24]
 8003f90:	2a01      	cmp	r2, #1
 8003f92:	f240 81fe 	bls.w	8004392 <forward_dense+0x446>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 81da 	beq.w	8004350 <forward_dense+0x404>
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	9306      	str	r3, [sp, #24]
 8003fa0:	9b08      	ldr	r3, [sp, #32]
 8003fa2:	68cc      	ldr	r4, [r1, #12]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	68c5      	ldr	r5, [r0, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8003fae:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003fb2:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8003fb6:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8003fba:	fa4c f505 	asr.w	r5, ip, r5
 8003fbe:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8003fc2:	950b      	str	r5, [sp, #44]	; 0x2c
 8003fc4:	2a04      	cmp	r2, #4
 8003fc6:	fb07 f506 	mul.w	r5, r7, r6
 8003fca:	6864      	ldr	r4, [r4, #4]
 8003fcc:	9507      	str	r5, [sp, #28]
 8003fce:	f000 81dd 	beq.w	800438c <forward_dense+0x440>
 8003fd2:	2a08      	cmp	r2, #8
 8003fd4:	f000 81da 	beq.w	800438c <forward_dense+0x440>
 8003fd8:	f04f 0a00 	mov.w	sl, #0
 8003fdc:	698a      	ldr	r2, [r1, #24]
 8003fde:	6981      	ldr	r1, [r0, #24]
 8003fe0:	6890      	ldr	r0, [r2, #8]
 8003fe2:	9a08      	ldr	r2, [sp, #32]
 8003fe4:	9004      	str	r0, [sp, #16]
 8003fe6:	6952      	ldr	r2, [r2, #20]
 8003fe8:	688f      	ldr	r7, [r1, #8]
 8003fea:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003fee:	00a2      	lsls	r2, r4, #2
 8003ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ff2:	1886      	adds	r6, r0, r2
 8003ff4:	9a07      	ldr	r2, [sp, #28]
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	f000 81c3 	beq.w	8004382 <forward_dense+0x436>
 8003ffc:	f1a8 0210 	sub.w	r2, r8, #16
 8004000:	0912      	lsrs	r2, r2, #4
 8004002:	3201      	adds	r2, #1
 8004004:	0192      	lsls	r2, r2, #6
 8004006:	920c      	str	r2, [sp, #48]	; 0x30
 8004008:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800400c:	920a      	str	r2, [sp, #40]	; 0x28
 800400e:	689d      	ldr	r5, [r3, #8]
 8004010:	9b06      	ldr	r3, [sp, #24]
 8004012:	eddf aad0 	vldr	s21, [pc, #832]	; 8004354 <forward_dense+0x408>
 8004016:	2200      	movs	r2, #0
 8004018:	9205      	str	r2, [sp, #20]
 800401a:	f008 020f 	and.w	r2, r8, #15
 800401e:	920d      	str	r2, [sp, #52]	; 0x34
 8004020:	2b00      	cmp	r3, #0
 8004022:	d043      	beq.n	80040ac <forward_dense+0x160>
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	689c      	ldr	r4, [r3, #8]
 8004028:	9b04      	ldr	r3, [sp, #16]
 800402a:	f1ba 0f00 	cmp.w	sl, #0
 800402e:	d042      	beq.n	80040b6 <forward_dense+0x16a>
 8004030:	42b3      	cmp	r3, r6
 8004032:	d22a      	bcs.n	800408a <forward_dense+0x13e>
 8004034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004036:	469b      	mov	fp, r3
 8004038:	ab0f      	add	r3, sp, #60	; 0x3c
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	2a04      	cmp	r2, #4
 800403e:	4633      	mov	r3, r6
 8004040:	4646      	mov	r6, r8
 8004042:	4698      	mov	r8, r3
 8004044:	f000 8156 	beq.w	80042f4 <forward_dense+0x3a8>
 8004048:	2c00      	cmp	r4, #0
 800404a:	f000 8185 	beq.w	8004358 <forward_dense+0x40c>
 800404e:	f8d4 c000 	ldr.w	ip, [r4]
 8004052:	9803      	ldr	r0, [sp, #12]
 8004054:	9600      	str	r6, [sp, #0]
 8004056:	463b      	mov	r3, r7
 8004058:	4629      	mov	r1, r5
 800405a:	4652      	mov	r2, sl
 800405c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004060:	f7ff fde8 	bl	8003c34 <ai_dict8_dot_array_f32>
 8004064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004066:	f84b 3b04 	str.w	r3, [fp], #4
 800406a:	45c3      	cmp	fp, r8
 800406c:	f104 0404 	add.w	r4, r4, #4
 8004070:	444d      	add	r5, r9
 8004072:	d3e9      	bcc.n	8004048 <forward_dense+0xfc>
 8004074:	4643      	mov	r3, r8
 8004076:	46b0      	mov	r8, r6
 8004078:	461e      	mov	r6, r3
 800407a:	9a04      	ldr	r2, [sp, #16]
 800407c:	43d3      	mvns	r3, r2
 800407e:	4433      	add	r3, r6
 8004080:	f023 0303 	bic.w	r3, r3, #3
 8004084:	3304      	adds	r3, #4
 8004086:	18d3      	adds	r3, r2, r3
 8004088:	9304      	str	r3, [sp, #16]
 800408a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800408c:	9b05      	ldr	r3, [sp, #20]
 800408e:	4417      	add	r7, r2
 8004090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004092:	4416      	add	r6, r2
 8004094:	9a07      	ldr	r2, [sp, #28]
 8004096:	3301      	adds	r3, #1
 8004098:	4293      	cmp	r3, r2
 800409a:	9305      	str	r3, [sp, #20]
 800409c:	f000 8171 	beq.w	8004382 <forward_dense+0x436>
 80040a0:	9b08      	ldr	r3, [sp, #32]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	689d      	ldr	r5, [r3, #8]
 80040a6:	9b06      	ldr	r3, [sp, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1bb      	bne.n	8004024 <forward_dense+0xd8>
 80040ac:	461c      	mov	r4, r3
 80040ae:	9b04      	ldr	r3, [sp, #16]
 80040b0:	f1ba 0f00 	cmp.w	sl, #0
 80040b4:	d1bc      	bne.n	8004030 <forward_dense+0xe4>
 80040b6:	42b3      	cmp	r3, r6
 80040b8:	d2e7      	bcs.n	800408a <forward_dense+0x13e>
 80040ba:	4618      	mov	r0, r3
 80040bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040be:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80040c2:	eb07 0c03 	add.w	ip, r7, r3
 80040c6:	469e      	mov	lr, r3
 80040c8:	2c00      	cmp	r4, #0
 80040ca:	f000 80ff 	beq.w	80042cc <forward_dense+0x380>
 80040ce:	f1b8 0f0f 	cmp.w	r8, #15
 80040d2:	edd4 fa00 	vldr	s31, [r4]
 80040d6:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8004354 <forward_dense+0x408>
 80040da:	f104 0404 	add.w	r4, r4, #4
 80040de:	f240 80fd 	bls.w	80042dc <forward_dense+0x390>
 80040e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80040ea:	4641      	mov	r1, r8
 80040ec:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80040f0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80040f4:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80040f8:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80040fc:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004100:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004104:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004108:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800410c:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004110:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004114:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004118:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800411c:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004120:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004124:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004128:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800412c:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004130:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004134:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004138:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800413c:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004140:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004144:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004148:	ed13 4a04 	vldr	s8, [r3, #-16]
 800414c:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004150:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004154:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004158:	ed12 6a02 	vldr	s12, [r2, #-8]
 800415c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8004160:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004164:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004168:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800416c:	3910      	subs	r1, #16
 800416e:	290f      	cmp	r1, #15
 8004170:	ed53 ea01 	vldr	s29, [r3, #-4]
 8004174:	ed12 ea01 	vldr	s28, [r2, #-4]
 8004178:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800417c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004180:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004184:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8004188:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800418c:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8004190:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004194:	eee8 7a88 	vfma.f32	s15, s17, s16
 8004198:	eee0 7a20 	vfma.f32	s15, s0, s1
 800419c:	eee1 7a21 	vfma.f32	s15, s2, s3
 80041a0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80041a4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80041a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80041ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80041b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80041b4:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80041b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041bc:	d896      	bhi.n	80040ec <forward_dense+0x1a0>
 80041be:	eb05 010e 	add.w	r1, r5, lr
 80041c2:	465b      	mov	r3, fp
 80041c4:	4662      	mov	r2, ip
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d075      	beq.n	80042b6 <forward_dense+0x36a>
 80041ca:	ed91 7a00 	vldr	s14, [r1]
 80041ce:	edd2 7a00 	vldr	s15, [r2]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041d8:	d06d      	beq.n	80042b6 <forward_dense+0x36a>
 80041da:	ed91 7a01 	vldr	s14, [r1, #4]
 80041de:	edd2 7a01 	vldr	s15, [r2, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041e8:	d065      	beq.n	80042b6 <forward_dense+0x36a>
 80041ea:	ed91 7a02 	vldr	s14, [r1, #8]
 80041ee:	edd2 7a02 	vldr	s15, [r2, #8]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041f8:	d05d      	beq.n	80042b6 <forward_dense+0x36a>
 80041fa:	ed91 7a03 	vldr	s14, [r1, #12]
 80041fe:	edd2 7a03 	vldr	s15, [r2, #12]
 8004202:	2b04      	cmp	r3, #4
 8004204:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004208:	d055      	beq.n	80042b6 <forward_dense+0x36a>
 800420a:	ed91 7a04 	vldr	s14, [r1, #16]
 800420e:	edd2 7a04 	vldr	s15, [r2, #16]
 8004212:	2b05      	cmp	r3, #5
 8004214:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004218:	d04d      	beq.n	80042b6 <forward_dense+0x36a>
 800421a:	ed91 7a05 	vldr	s14, [r1, #20]
 800421e:	edd2 7a05 	vldr	s15, [r2, #20]
 8004222:	2b06      	cmp	r3, #6
 8004224:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004228:	d045      	beq.n	80042b6 <forward_dense+0x36a>
 800422a:	ed91 7a06 	vldr	s14, [r1, #24]
 800422e:	edd2 7a06 	vldr	s15, [r2, #24]
 8004232:	2b07      	cmp	r3, #7
 8004234:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004238:	d03d      	beq.n	80042b6 <forward_dense+0x36a>
 800423a:	ed91 7a07 	vldr	s14, [r1, #28]
 800423e:	edd2 7a07 	vldr	s15, [r2, #28]
 8004242:	2b08      	cmp	r3, #8
 8004244:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004248:	d035      	beq.n	80042b6 <forward_dense+0x36a>
 800424a:	ed91 7a08 	vldr	s14, [r1, #32]
 800424e:	edd2 7a08 	vldr	s15, [r2, #32]
 8004252:	2b09      	cmp	r3, #9
 8004254:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004258:	d02d      	beq.n	80042b6 <forward_dense+0x36a>
 800425a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800425e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004262:	2b0a      	cmp	r3, #10
 8004264:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004268:	d025      	beq.n	80042b6 <forward_dense+0x36a>
 800426a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800426e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004272:	2b0b      	cmp	r3, #11
 8004274:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004278:	d01d      	beq.n	80042b6 <forward_dense+0x36a>
 800427a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800427e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004282:	2b0c      	cmp	r3, #12
 8004284:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004288:	d015      	beq.n	80042b6 <forward_dense+0x36a>
 800428a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800428e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004292:	2b0d      	cmp	r3, #13
 8004294:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004298:	d00d      	beq.n	80042b6 <forward_dense+0x36a>
 800429a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800429e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80042a2:	2b0e      	cmp	r3, #14
 80042a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80042a8:	d005      	beq.n	80042b6 <forward_dense+0x36a>
 80042aa:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80042ae:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80042b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80042b6:	444d      	add	r5, r9
 80042b8:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80042bc:	ece0 6a01 	vstmia	r0!, {s13}
 80042c0:	42b0      	cmp	r0, r6
 80042c2:	f4bf aeda 	bcs.w	800407a <forward_dense+0x12e>
 80042c6:	2c00      	cmp	r4, #0
 80042c8:	f47f af01 	bne.w	80040ce <forward_dense+0x182>
 80042cc:	f1b8 0f0f 	cmp.w	r8, #15
 80042d0:	eef0 fa6a 	vmov.f32	s31, s21
 80042d4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004354 <forward_dense+0x408>
 80042d8:	f63f af03 	bhi.w	80040e2 <forward_dense+0x196>
 80042dc:	4643      	mov	r3, r8
 80042de:	4629      	mov	r1, r5
 80042e0:	463a      	mov	r2, r7
 80042e2:	e770      	b.n	80041c6 <forward_dense+0x27a>
 80042e4:	2300      	movs	r3, #0
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	deff      	udf	#255	; 0xff
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	deff      	udf	#255	; 0xff
 80042ee:	2300      	movs	r3, #0
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	deff      	udf	#255	; 0xff
 80042f4:	b1ac      	cbz	r4, 8004322 <forward_dense+0x3d6>
 80042f6:	f8d4 c000 	ldr.w	ip, [r4]
 80042fa:	9803      	ldr	r0, [sp, #12]
 80042fc:	9600      	str	r6, [sp, #0]
 80042fe:	463b      	mov	r3, r7
 8004300:	4629      	mov	r1, r5
 8004302:	4652      	mov	r2, sl
 8004304:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004308:	f7ff fd62 	bl	8003dd0 <ai_dict4_dot_array_f32>
 800430c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800430e:	f84b 3b04 	str.w	r3, [fp], #4
 8004312:	45c3      	cmp	fp, r8
 8004314:	f104 0404 	add.w	r4, r4, #4
 8004318:	444d      	add	r5, r9
 800431a:	f4bf aeab 	bcs.w	8004074 <forward_dense+0x128>
 800431e:	2c00      	cmp	r4, #0
 8004320:	d1e9      	bne.n	80042f6 <forward_dense+0x3aa>
 8004322:	4634      	mov	r4, r6
 8004324:	4646      	mov	r6, r8
 8004326:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800432a:	9400      	str	r4, [sp, #0]
 800432c:	463b      	mov	r3, r7
 800432e:	4629      	mov	r1, r5
 8004330:	4652      	mov	r2, sl
 8004332:	4640      	mov	r0, r8
 8004334:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004338:	f7ff fd4a 	bl	8003dd0 <ai_dict4_dot_array_f32>
 800433c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800433e:	f84b 3b04 	str.w	r3, [fp], #4
 8004342:	45b3      	cmp	fp, r6
 8004344:	444d      	add	r5, r9
 8004346:	d3f0      	bcc.n	800432a <forward_dense+0x3de>
 8004348:	46a0      	mov	r8, r4
 800434a:	e696      	b.n	800407a <forward_dense+0x12e>
 800434c:	9406      	str	r4, [sp, #24]
 800434e:	e627      	b.n	8003fa0 <forward_dense+0x54>
 8004350:	9306      	str	r3, [sp, #24]
 8004352:	e625      	b.n	8003fa0 <forward_dense+0x54>
 8004354:	00000000 	.word	0x00000000
 8004358:	4634      	mov	r4, r6
 800435a:	4646      	mov	r6, r8
 800435c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004360:	9400      	str	r4, [sp, #0]
 8004362:	463b      	mov	r3, r7
 8004364:	4629      	mov	r1, r5
 8004366:	4652      	mov	r2, sl
 8004368:	4640      	mov	r0, r8
 800436a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800436e:	f7ff fc61 	bl	8003c34 <ai_dict8_dot_array_f32>
 8004372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004374:	f84b 3b04 	str.w	r3, [fp], #4
 8004378:	45b3      	cmp	fp, r6
 800437a:	444d      	add	r5, r9
 800437c:	d3f0      	bcc.n	8004360 <forward_dense+0x414>
 800437e:	46a0      	mov	r8, r4
 8004380:	e67b      	b.n	800407a <forward_dense+0x12e>
 8004382:	b011      	add	sp, #68	; 0x44
 8004384:	ecbd 8b10 	vpop	{d8-d15}
 8004388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8004390:	e624      	b.n	8003fdc <forward_dense+0x90>
 8004392:	2300      	movs	r3, #0
 8004394:	9306      	str	r3, [sp, #24]
 8004396:	e603      	b.n	8003fa0 <forward_dense+0x54>
 8004398:	9308      	str	r3, [sp, #32]
 800439a:	e5f4      	b.n	8003f86 <forward_dense+0x3a>

0800439c <nl_func_sm_array_f32>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	ed2d 8b04 	vpush	{d8-d9}
 80043a4:	b089      	sub	sp, #36	; 0x24
 80043a6:	698f      	ldr	r7, [r1, #24]
 80043a8:	6984      	ldr	r4, [r0, #24]
 80043aa:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80043ae:	68bd      	ldr	r5, [r7, #8]
 80043b0:	9402      	str	r4, [sp, #8]
 80043b2:	4626      	mov	r6, r4
 80043b4:	4696      	mov	lr, r2
 80043b6:	eba2 020c 	sub.w	r2, r2, ip
 80043ba:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80043be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	68b6      	ldr	r6, [r6, #8]
 80043c4:	ebae 0e04 	sub.w	lr, lr, r4
 80043c8:	4295      	cmp	r5, r2
 80043ca:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 80043ce:	d354      	bcc.n	800447a <nl_func_sm_array_f32+0xde>
 80043d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80043d4:	f1cc 0200 	rsb	r2, ip, #0
 80043d8:	00a4      	lsls	r4, r4, #2
 80043da:	e9cd 1006 	strd	r1, r0, [sp, #24]
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	9204      	str	r2, [sp, #16]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4262      	negs	r2, r4
 80043e6:	9205      	str	r2, [sp, #20]
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	9a07      	ldr	r2, [sp, #28]
 80043f2:	60bd      	str	r5, [r7, #8]
 80043f4:	609e      	str	r6, [r3, #8]
 80043f6:	9b06      	ldr	r3, [sp, #24]
 80043f8:	6992      	ldr	r2, [r2, #24]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	6894      	ldr	r4, [r2, #8]
 80043fe:	9a03      	ldr	r2, [sp, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2a01      	cmp	r2, #1
 8004404:	ed93 8a00 	vldr	s16, [r3]
 8004408:	d940      	bls.n	800448c <nl_func_sm_array_f32+0xf0>
 800440a:	9901      	ldr	r1, [sp, #4]
 800440c:	1d1a      	adds	r2, r3, #4
 800440e:	eb03 0b01 	add.w	fp, r3, r1
 8004412:	ecf2 7a01 	vldmia	r2!, {s15}
 8004416:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	bfb8      	it	lt
 8004420:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004424:	4593      	cmp	fp, r2
 8004426:	d1f4      	bne.n	8004412 <nl_func_sm_array_f32+0x76>
 8004428:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8004498 <nl_func_sm_array_f32+0xfc>
 800442c:	469a      	mov	sl, r3
 800442e:	46a1      	mov	r9, r4
 8004430:	46a0      	mov	r8, r4
 8004432:	ecba 0a01 	vldmia	sl!, {s0}
 8004436:	ee30 0a48 	vsub.f32	s0, s0, s16
 800443a:	f003 f949 	bl	80076d0 <expf>
 800443e:	45d3      	cmp	fp, sl
 8004440:	eca8 0a01 	vstmia	r8!, {s0}
 8004444:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004448:	d1f3      	bne.n	8004432 <nl_func_sm_array_f32+0x96>
 800444a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004452:	d00b      	beq.n	800446c <nl_func_sm_array_f32+0xd0>
 8004454:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004458:	9b01      	ldr	r3, [sp, #4]
 800445a:	441c      	add	r4, r3
 800445c:	edd9 7a00 	vldr	s15, [r9]
 8004460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004464:	ece9 7a01 	vstmia	r9!, {s15}
 8004468:	454c      	cmp	r4, r9
 800446a:	d1f7      	bne.n	800445c <nl_func_sm_array_f32+0xc0>
 800446c:	9b04      	ldr	r3, [sp, #16]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	441d      	add	r5, r3
 8004472:	9b05      	ldr	r3, [sp, #20]
 8004474:	42aa      	cmp	r2, r5
 8004476:	441e      	add	r6, r3
 8004478:	d9b9      	bls.n	80043ee <nl_func_sm_array_f32+0x52>
 800447a:	60ba      	str	r2, [r7, #8]
 800447c:	9a02      	ldr	r2, [sp, #8]
 800447e:	68d3      	ldr	r3, [r2, #12]
 8004480:	6093      	str	r3, [r2, #8]
 8004482:	b009      	add	sp, #36	; 0x24
 8004484:	ecbd 8b04 	vpop	{d8-d9}
 8004488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448c:	2a00      	cmp	r2, #0
 800448e:	d0ed      	beq.n	800446c <nl_func_sm_array_f32+0xd0>
 8004490:	9a01      	ldr	r2, [sp, #4]
 8004492:	eb03 0b02 	add.w	fp, r3, r2
 8004496:	e7c7      	b.n	8004428 <nl_func_sm_array_f32+0x8c>
 8004498:	00000000 	.word	0x00000000

0800449c <nl_func_relu_generic_array_f32>:
 800449c:	b430      	push	{r4, r5}
 800449e:	6989      	ldr	r1, [r1, #24]
 80044a0:	6980      	ldr	r0, [r0, #24]
 80044a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80044a6:	688c      	ldr	r4, [r1, #8]
 80044a8:	6880      	ldr	r0, [r0, #8]
 80044aa:	ed93 7a00 	vldr	s14, [r3]
 80044ae:	ed93 6a01 	vldr	s12, [r3, #4]
 80044b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80044b6:	3a01      	subs	r2, #1
 80044b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80044bc:	0092      	lsls	r2, r2, #2
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	4410      	add	r0, r2
 80044c4:	4422      	add	r2, r4
 80044c6:	d421      	bmi.n	800450c <nl_func_relu_generic_array_f32+0x70>
 80044c8:	4294      	cmp	r4, r2
 80044ca:	d83d      	bhi.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 80044cc:	1d13      	adds	r3, r2, #4
 80044ce:	1d02      	adds	r2, r0, #4
 80044d0:	e010      	b.n	80044f4 <nl_func_relu_generic_array_f32+0x58>
 80044d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80044de:	d501      	bpl.n	80044e4 <nl_func_relu_generic_array_f32+0x48>
 80044e0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80044e4:	ed62 7a01 	vstmdb	r2!, {s15}
 80044e8:	6888      	ldr	r0, [r1, #8]
 80044ea:	f1a3 0408 	sub.w	r4, r3, #8
 80044ee:	4284      	cmp	r4, r0
 80044f0:	462b      	mov	r3, r5
 80044f2:	d329      	bcc.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 80044f4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80044f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	f1a3 0504 	sub.w	r5, r3, #4
 8004504:	d4e5      	bmi.n	80044d2 <nl_func_relu_generic_array_f32+0x36>
 8004506:	eef0 7a66 	vmov.f32	s15, s13
 800450a:	e7eb      	b.n	80044e4 <nl_func_relu_generic_array_f32+0x48>
 800450c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	d01a      	beq.n	800454c <nl_func_relu_generic_array_f32+0xb0>
 8004516:	4294      	cmp	r4, r2
 8004518:	d816      	bhi.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 800451a:	1d13      	adds	r3, r2, #4
 800451c:	1d02      	adds	r2, r0, #4
 800451e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004522:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452a:	f1a3 0408 	sub.w	r4, r3, #8
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	f1a3 0004 	sub.w	r0, r3, #4
 8004536:	ee66 6a86 	vmul.f32	s13, s13, s12
 800453a:	4623      	mov	r3, r4
 800453c:	d51e      	bpl.n	800457c <nl_func_relu_generic_array_f32+0xe0>
 800453e:	ed62 6a01 	vstmdb	r2!, {s13}
 8004542:	688b      	ldr	r3, [r1, #8]
 8004544:	42a3      	cmp	r3, r4
 8004546:	d91e      	bls.n	8004586 <nl_func_relu_generic_array_f32+0xea>
 8004548:	bc30      	pop	{r4, r5}
 800454a:	4770      	bx	lr
 800454c:	4294      	cmp	r4, r2
 800454e:	d8fb      	bhi.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 8004550:	1d13      	adds	r3, r2, #4
 8004552:	2500      	movs	r5, #0
 8004554:	1d02      	adds	r2, r0, #4
 8004556:	ed53 7a01 	vldr	s15, [r3, #-4]
 800455a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455e:	f1a3 0408 	sub.w	r4, r3, #8
 8004562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004566:	f1a3 0004 	sub.w	r0, r3, #4
 800456a:	4623      	mov	r3, r4
 800456c:	db0d      	blt.n	800458a <nl_func_relu_generic_array_f32+0xee>
 800456e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004572:	688b      	ldr	r3, [r1, #8]
 8004574:	42a3      	cmp	r3, r4
 8004576:	d8e7      	bhi.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 8004578:	4603      	mov	r3, r0
 800457a:	e7ec      	b.n	8004556 <nl_func_relu_generic_array_f32+0xba>
 800457c:	ed62 7a01 	vstmdb	r2!, {s15}
 8004580:	688c      	ldr	r4, [r1, #8]
 8004582:	429c      	cmp	r4, r3
 8004584:	d8e0      	bhi.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 8004586:	4603      	mov	r3, r0
 8004588:	e7c9      	b.n	800451e <nl_func_relu_generic_array_f32+0x82>
 800458a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800458e:	688c      	ldr	r4, [r1, #8]
 8004590:	429c      	cmp	r4, r3
 8004592:	d8d9      	bhi.n	8004548 <nl_func_relu_generic_array_f32+0xac>
 8004594:	4603      	mov	r3, r0
 8004596:	e7de      	b.n	8004556 <nl_func_relu_generic_array_f32+0xba>

08004598 <forward_relu>:
 8004598:	6982      	ldr	r2, [r0, #24]
 800459a:	8813      	ldrh	r3, [r2, #0]
 800459c:	b333      	cbz	r3, 80045ec <forward_relu+0x54>
 800459e:	6852      	ldr	r2, [r2, #4]
 80045a0:	6851      	ldr	r1, [r2, #4]
 80045a2:	b101      	cbz	r1, 80045a6 <forward_relu+0xe>
 80045a4:	6809      	ldr	r1, [r1, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d91d      	bls.n	80045e6 <forward_relu+0x4e>
 80045aa:	b4f0      	push	{r4, r5, r6, r7}
 80045ac:	6917      	ldr	r7, [r2, #16]
 80045ae:	b107      	cbz	r7, 80045b2 <forward_relu+0x1a>
 80045b0:	683f      	ldr	r7, [r7, #0]
 80045b2:	688c      	ldr	r4, [r1, #8]
 80045b4:	69c3      	ldr	r3, [r0, #28]
 80045b6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d044      	beq.n	8004648 <forward_relu+0xb0>
 80045be:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80045c2:	2d01      	cmp	r5, #1
 80045c4:	d014      	beq.n	80045f0 <forward_relu+0x58>
 80045c6:	2c00      	cmp	r4, #0
 80045c8:	d074      	beq.n	80046b4 <forward_relu+0x11c>
 80045ca:	68ce      	ldr	r6, [r1, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80045d2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80045d6:	42a6      	cmp	r6, r4
 80045d8:	fb05 f202 	mul.w	r2, r5, r2
 80045dc:	d1f9      	bne.n	80045d2 <forward_relu+0x3a>
 80045de:	4638      	mov	r0, r7
 80045e0:	bcf0      	pop	{r4, r5, r6, r7}
 80045e2:	f7ff bf5b 	b.w	800449c <nl_func_relu_generic_array_f32>
 80045e6:	2300      	movs	r3, #0
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	deff      	udf	#255	; 0xff
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	deff      	udf	#255	; 0xff
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	6988      	ldr	r0, [r1, #24]
 80045f4:	6896      	ldr	r6, [r2, #8]
 80045f6:	ed93 7a00 	vldr	s14, [r3]
 80045fa:	6882      	ldr	r2, [r0, #8]
 80045fc:	b184      	cbz	r4, 8004620 <forward_relu+0x88>
 80045fe:	68cf      	ldr	r7, [r1, #12]
 8004600:	462b      	mov	r3, r5
 8004602:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8004606:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800460a:	42a7      	cmp	r7, r4
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	d1f9      	bne.n	8004606 <forward_relu+0x6e>
 8004612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004616:	3b01      	subs	r3, #1
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	18d2      	adds	r2, r2, r3
 800461c:	441e      	add	r6, r3
 800461e:	d23f      	bcs.n	80046a0 <forward_relu+0x108>
 8004620:	1d13      	adds	r3, r2, #4
 8004622:	2500      	movs	r5, #0
 8004624:	1d32      	adds	r2, r6, #4
 8004626:	ed53 7a01 	vldr	s15, [r3, #-4]
 800462a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	f1a3 0104 	sub.w	r1, r3, #4
 8004636:	d835      	bhi.n	80046a4 <forward_relu+0x10c>
 8004638:	ed62 7a01 	vstmdb	r2!, {s15}
 800463c:	6884      	ldr	r4, [r0, #8]
 800463e:	3b08      	subs	r3, #8
 8004640:	429c      	cmp	r4, r3
 8004642:	d82d      	bhi.n	80046a0 <forward_relu+0x108>
 8004644:	460b      	mov	r3, r1
 8004646:	e7ee      	b.n	8004626 <forward_relu+0x8e>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	698d      	ldr	r5, [r1, #24]
 800464c:	6898      	ldr	r0, [r3, #8]
 800464e:	68ab      	ldr	r3, [r5, #8]
 8004650:	b184      	cbz	r4, 8004674 <forward_relu+0xdc>
 8004652:	68ce      	ldr	r6, [r1, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800465a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800465e:	42a6      	cmp	r6, r4
 8004660:	fb01 f202 	mul.w	r2, r1, r2
 8004664:	d1f9      	bne.n	800465a <forward_relu+0xc2>
 8004666:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800466a:	3a01      	subs	r2, #1
 800466c:	0092      	lsls	r2, r2, #2
 800466e:	189b      	adds	r3, r3, r2
 8004670:	4410      	add	r0, r2
 8004672:	d215      	bcs.n	80046a0 <forward_relu+0x108>
 8004674:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80046b8 <forward_relu+0x120>
 8004678:	3304      	adds	r3, #4
 800467a:	1d01      	adds	r1, r0, #4
 800467c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	bfb8      	it	lt
 800468a:	eef0 7a47 	vmovlt.f32	s15, s14
 800468e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004692:	68a8      	ldr	r0, [r5, #8]
 8004694:	f1a3 0208 	sub.w	r2, r3, #8
 8004698:	4290      	cmp	r0, r2
 800469a:	f1a3 0304 	sub.w	r3, r3, #4
 800469e:	d9ed      	bls.n	800467c <forward_relu+0xe4>
 80046a0:	bcf0      	pop	{r4, r5, r6, r7}
 80046a2:	4770      	bx	lr
 80046a4:	f842 5d04 	str.w	r5, [r2, #-4]!
 80046a8:	6884      	ldr	r4, [r0, #8]
 80046aa:	3b08      	subs	r3, #8
 80046ac:	429c      	cmp	r4, r3
 80046ae:	d8f7      	bhi.n	80046a0 <forward_relu+0x108>
 80046b0:	460b      	mov	r3, r1
 80046b2:	e7b8      	b.n	8004626 <forward_relu+0x8e>
 80046b4:	2201      	movs	r2, #1
 80046b6:	e792      	b.n	80045de <forward_relu+0x46>
 80046b8:	00000000 	.word	0x00000000

080046bc <forward_sm>:
 80046bc:	6982      	ldr	r2, [r0, #24]
 80046be:	8813      	ldrh	r3, [r2, #0]
 80046c0:	b32b      	cbz	r3, 800470e <forward_sm+0x52>
 80046c2:	6852      	ldr	r2, [r2, #4]
 80046c4:	6851      	ldr	r1, [r2, #4]
 80046c6:	b101      	cbz	r1, 80046ca <forward_sm+0xe>
 80046c8:	6809      	ldr	r1, [r1, #0]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d91c      	bls.n	8004708 <forward_sm+0x4c>
 80046ce:	6913      	ldr	r3, [r2, #16]
 80046d0:	b1c3      	cbz	r3, 8004704 <forward_sm+0x48>
 80046d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	688c      	ldr	r4, [r1, #8]
 80046d8:	68c3      	ldr	r3, [r0, #12]
 80046da:	68ce      	ldr	r6, [r1, #12]
 80046dc:	685f      	ldr	r7, [r3, #4]
 80046de:	6873      	ldr	r3, [r6, #4]
 80046e0:	0a24      	lsrs	r4, r4, #8
 80046e2:	b083      	sub	sp, #12
 80046e4:	d015      	beq.n	8004712 <forward_sm+0x56>
 80046e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80046ea:	2201      	movs	r2, #1
 80046ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	fb05 f202 	mul.w	r2, r5, r2
 80046f6:	d1f9      	bne.n	80046ec <forward_sm+0x30>
 80046f8:	e9cd 3700 	strd	r3, r7, [sp]
 80046fc:	f7ff fe4e 	bl	800439c <nl_func_sm_array_f32>
 8004700:	b003      	add	sp, #12
 8004702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	deff      	udf	#255	; 0xff
 8004708:	2300      	movs	r3, #0
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	deff      	udf	#255	; 0xff
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	deff      	udf	#255	; 0xff
 8004712:	2201      	movs	r2, #1
 8004714:	e9cd 3700 	strd	r3, r7, [sp]
 8004718:	f7ff fe40 	bl	800439c <nl_func_sm_array_f32>
 800471c:	b003      	add	sp, #12
 800471e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004720 <ai_check_custom_types>:
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <ai_check_custom_types+0x50>)
 8004722:	b082      	sub	sp, #8
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	b118      	cbz	r0, 8004732 <ai_check_custom_types+0x12>
 800472a:	7803      	ldrb	r3, [r0, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d002      	beq.n	8004736 <ai_check_custom_types+0x16>
 8004730:	2000      	movs	r0, #0
 8004732:	b002      	add	sp, #8
 8004734:	4770      	bx	lr
 8004736:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <ai_check_custom_types+0x28>
 800473e:	2001      	movs	r0, #1
 8004740:	f080 0001 	eor.w	r0, r0, #1
 8004744:	b002      	add	sp, #8
 8004746:	4770      	bx	lr
 8004748:	7842      	ldrb	r2, [r0, #1]
 800474a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800474e:	429a      	cmp	r2, r3
 8004750:	f100 0001 	add.w	r0, r0, #1
 8004754:	d1f3      	bne.n	800473e <ai_check_custom_types+0x1e>
 8004756:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800475a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800475e:	429a      	cmp	r2, r3
 8004760:	d1ed      	bne.n	800473e <ai_check_custom_types+0x1e>
 8004762:	7842      	ldrb	r2, [r0, #1]
 8004764:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d1e8      	bne.n	800473e <ai_check_custom_types+0x1e>
 800476c:	2000      	movs	r0, #0
 800476e:	e7e7      	b.n	8004740 <ai_check_custom_types+0x20>
 8004770:	08007dcc 	.word	0x08007dcc

08004774 <ai_layers_init_all>:
 8004774:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004776:	b17a      	cbz	r2, 8004798 <ai_layers_init_all+0x24>
 8004778:	6913      	ldr	r3, [r2, #16]
 800477a:	60d0      	str	r0, [r2, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	f04f 0201 	mov.w	r2, #1
 8004782:	d009      	beq.n	8004798 <ai_layers_init_all+0x24>
 8004784:	b143      	cbz	r3, 8004798 <ai_layers_init_all+0x24>
 8004786:	6919      	ldr	r1, [r3, #16]
 8004788:	60d8      	str	r0, [r3, #12]
 800478a:	4299      	cmp	r1, r3
 800478c:	f102 0201 	add.w	r2, r2, #1
 8004790:	d002      	beq.n	8004798 <ai_layers_init_all+0x24>
 8004792:	460b      	mov	r3, r1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f6      	bne.n	8004786 <ai_layers_init_all+0x12>
 8004798:	4610      	mov	r0, r2
 800479a:	4770      	bx	lr

0800479c <ai_layers_post_init_all>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80047a0:	b18c      	cbz	r4, 80047c6 <ai_layers_post_init_all+0x2a>
 80047a2:	2500      	movs	r5, #0
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	f013 0f01 	tst.w	r3, #1
 80047aa:	4620      	mov	r0, r4
 80047ac:	d003      	beq.n	80047b6 <ai_layers_post_init_all+0x1a>
 80047ae:	6a23      	ldr	r3, [r4, #32]
 80047b0:	b10b      	cbz	r3, 80047b6 <ai_layers_post_init_all+0x1a>
 80047b2:	4798      	blx	r3
 80047b4:	3501      	adds	r5, #1
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	d002      	beq.n	80047c2 <ai_layers_post_init_all+0x26>
 80047bc:	461c      	mov	r4, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <ai_layers_post_init_all+0x8>
 80047c2:	4628      	mov	r0, r5
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
 80047c6:	4625      	mov	r5, r4
 80047c8:	e7fb      	b.n	80047c2 <ai_layers_post_init_all+0x26>
 80047ca:	bf00      	nop

080047cc <ai_layers_forward_all>:
 80047cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d0:	6d87      	ldr	r7, [r0, #88]	; 0x58
 80047d2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80047d4:	4604      	mov	r4, r0
 80047d6:	2f00      	cmp	r7, #0
 80047d8:	d02c      	beq.n	8004834 <ai_layers_forward_all+0x68>
 80047da:	2d00      	cmp	r5, #0
 80047dc:	d03f      	beq.n	800485e <ai_layers_forward_all+0x92>
 80047de:	6545      	str	r5, [r0, #84]	; 0x54
 80047e0:	4629      	mov	r1, r5
 80047e2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80047e4:	2001      	movs	r0, #1
 80047e6:	47b8      	blx	r7
 80047e8:	2600      	movs	r6, #0
 80047ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80047ec:	46b0      	mov	r8, r6
 80047ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047f0:	2002      	movs	r0, #2
 80047f2:	47b8      	blx	r7
 80047f4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80047f6:	696b      	ldr	r3, [r5, #20]
 80047f8:	4628      	mov	r0, r5
 80047fa:	4798      	blx	r3
 80047fc:	692b      	ldr	r3, [r5, #16]
 80047fe:	429d      	cmp	r5, r3
 8004800:	f04f 0003 	mov.w	r0, #3
 8004804:	4619      	mov	r1, r3
 8004806:	d009      	beq.n	800481c <ai_layers_forward_all+0x50>
 8004808:	6563      	str	r3, [r4, #84]	; 0x54
 800480a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800480c:	47b8      	blx	r7
 800480e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004810:	3601      	adds	r6, #1
 8004812:	2900      	cmp	r1, #0
 8004814:	d1eb      	bne.n	80047ee <ai_layers_forward_all+0x22>
 8004816:	4630      	mov	r0, r6
 8004818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481c:	2100      	movs	r1, #0
 800481e:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8004822:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004824:	47b8      	blx	r7
 8004826:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004828:	3601      	adds	r6, #1
 800482a:	2900      	cmp	r1, #0
 800482c:	d1df      	bne.n	80047ee <ai_layers_forward_all+0x22>
 800482e:	4630      	mov	r0, r6
 8004830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004834:	b19d      	cbz	r5, 800485e <ai_layers_forward_all+0x92>
 8004836:	6545      	str	r5, [r0, #84]	; 0x54
 8004838:	463e      	mov	r6, r7
 800483a:	696b      	ldr	r3, [r5, #20]
 800483c:	4628      	mov	r0, r5
 800483e:	4798      	blx	r3
 8004840:	692b      	ldr	r3, [r5, #16]
 8004842:	42ab      	cmp	r3, r5
 8004844:	f106 0601 	add.w	r6, r6, #1
 8004848:	d004      	beq.n	8004854 <ai_layers_forward_all+0x88>
 800484a:	6563      	str	r3, [r4, #84]	; 0x54
 800484c:	461d      	mov	r5, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f3      	bne.n	800483a <ai_layers_forward_all+0x6e>
 8004852:	e7e0      	b.n	8004816 <ai_layers_forward_all+0x4a>
 8004854:	2300      	movs	r3, #0
 8004856:	6563      	str	r3, [r4, #84]	; 0x54
 8004858:	4630      	mov	r0, r6
 800485a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485e:	462e      	mov	r6, r5
 8004860:	4630      	mov	r0, r6
 8004862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004866:	bf00      	nop

08004868 <ai_array_to_buffer_fmt>:
 8004868:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800486c:	2b02      	cmp	r3, #2
 800486e:	d02e      	beq.n	80048ce <ai_array_to_buffer_fmt+0x66>
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <ai_array_to_buffer_fmt+0x78>)
 8004872:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 800487a:	dd11      	ble.n	80048a0 <ai_array_to_buffer_fmt+0x38>
 800487c:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <ai_array_to_buffer_fmt+0x7c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00a      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 8004882:	dd18      	ble.n	80048b6 <ai_array_to_buffer_fmt+0x4e>
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <ai_array_to_buffer_fmt+0x80>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d006      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 800488a:	4a18      	ldr	r2, [pc, #96]	; (80048ec <ai_array_to_buffer_fmt+0x84>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 8004890:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <ai_array_to_buffer_fmt+0x88>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d000      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 8004896:	2340      	movs	r3, #64	; 0x40
 8004898:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800489c:	4318      	orrs	r0, r3
 800489e:	4770      	bx	lr
 80048a0:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <ai_array_to_buffer_fmt+0x8c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d0f8      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 80048a6:	dd06      	ble.n	80048b6 <ai_array_to_buffer_fmt+0x4e>
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <ai_array_to_buffer_fmt+0x90>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d0f4      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 80048ae:	320f      	adds	r2, #15
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d0f1      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 80048b4:	e7ef      	b.n	8004896 <ai_array_to_buffer_fmt+0x2e>
 80048b6:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d0ec      	beq.n	8004898 <ai_array_to_buffer_fmt+0x30>
 80048be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d1e7      	bne.n	8004896 <ai_array_to_buffer_fmt+0x2e>
 80048c6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80048ca:	4318      	orrs	r0, r3
 80048cc:	4770      	bx	lr
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <ai_array_to_buffer_fmt+0x94>)
 80048d0:	4003      	ands	r3, r0
 80048d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80048da:	4318      	orrs	r0, r3
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	00060440 	.word	0x00060440
 80048e4:	00840447 	.word	0x00840447
 80048e8:	0084084f 	.word	0x0084084f
 80048ec:	01821040 	.word	0x01821040
 80048f0:	00840840 	.word	0x00840840
 80048f4:	00040447 	.word	0x00040447
 80048f8:	00040840 	.word	0x00040840
 80048fc:	00803fff 	.word	0x00803fff

08004900 <ai_array_get_byte_size>:
 8004900:	b1c1      	cbz	r1, 8004934 <ai_array_get_byte_size+0x34>
 8004902:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8004906:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800490a:	4413      	add	r3, r2
 800490c:	fb01 f103 	mul.w	r1, r1, r3
 8004910:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004914:	3107      	adds	r1, #7
 8004916:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800491a:	f021 0107 	bic.w	r1, r1, #7
 800491e:	2804      	cmp	r0, #4
 8004920:	fa21 f102 	lsr.w	r1, r1, r2
 8004924:	d008      	beq.n	8004938 <ai_array_get_byte_size+0x38>
 8004926:	2808      	cmp	r0, #8
 8004928:	d101      	bne.n	800492e <ai_array_get_byte_size+0x2e>
 800492a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800492e:	3107      	adds	r1, #7
 8004930:	08c8      	lsrs	r0, r1, #3
 8004932:	4770      	bx	lr
 8004934:	4608      	mov	r0, r1
 8004936:	4770      	bx	lr
 8004938:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800493c:	3107      	adds	r1, #7
 800493e:	08c8      	lsrs	r0, r1, #3
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <__errno>:
 8004944:	4b01      	ldr	r3, [pc, #4]	; (800494c <__errno+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	200006dc 	.word	0x200006dc

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4d0d      	ldr	r5, [pc, #52]	; (8004988 <__libc_init_array+0x38>)
 8004954:	4c0d      	ldr	r4, [pc, #52]	; (800498c <__libc_init_array+0x3c>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	2600      	movs	r6, #0
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	4d0b      	ldr	r5, [pc, #44]	; (8004990 <__libc_init_array+0x40>)
 8004962:	4c0c      	ldr	r4, [pc, #48]	; (8004994 <__libc_init_array+0x44>)
 8004964:	f003 f816 	bl	8007994 <_init>
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	2600      	movs	r6, #0
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	0807ba4c 	.word	0x0807ba4c
 800498c:	0807ba4c 	.word	0x0807ba4c
 8004990:	0807ba4c 	.word	0x0807ba4c
 8004994:	0807ba50 	.word	0x0807ba50

08004998 <malloc>:
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <malloc+0xc>)
 800499a:	4601      	mov	r1, r0
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	f000 b869 	b.w	8004a74 <_malloc_r>
 80049a2:	bf00      	nop
 80049a4:	200006dc 	.word	0x200006dc

080049a8 <memcpy>:
 80049a8:	440a      	add	r2, r1
 80049aa:	4291      	cmp	r1, r2
 80049ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80049b0:	d100      	bne.n	80049b4 <memcpy+0xc>
 80049b2:	4770      	bx	lr
 80049b4:	b510      	push	{r4, lr}
 80049b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049be:	4291      	cmp	r1, r2
 80049c0:	d1f9      	bne.n	80049b6 <memcpy+0xe>
 80049c2:	bd10      	pop	{r4, pc}

080049c4 <memset>:
 80049c4:	4402      	add	r2, r0
 80049c6:	4603      	mov	r3, r0
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	f803 1b01 	strb.w	r1, [r3], #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <_free_r>:
 80049d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d048      	beq.n	8004a6c <_free_r+0x98>
 80049da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049de:	9001      	str	r0, [sp, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f1a1 0404 	sub.w	r4, r1, #4
 80049e6:	bfb8      	it	lt
 80049e8:	18e4      	addlt	r4, r4, r3
 80049ea:	f001 fbb5 	bl	8006158 <__malloc_lock>
 80049ee:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <_free_r+0x9c>)
 80049f0:	9801      	ldr	r0, [sp, #4]
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	4615      	mov	r5, r2
 80049f6:	b933      	cbnz	r3, 8004a06 <_free_r+0x32>
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6014      	str	r4, [r2, #0]
 80049fc:	b003      	add	sp, #12
 80049fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a02:	f001 bbaf 	b.w	8006164 <__malloc_unlock>
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	d90b      	bls.n	8004a22 <_free_r+0x4e>
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	1862      	adds	r2, r4, r1
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	bf04      	itt	eq
 8004a12:	681a      	ldreq	r2, [r3, #0]
 8004a14:	685b      	ldreq	r3, [r3, #4]
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	bf04      	itt	eq
 8004a1a:	1852      	addeq	r2, r2, r1
 8004a1c:	6022      	streq	r2, [r4, #0]
 8004a1e:	602c      	str	r4, [r5, #0]
 8004a20:	e7ec      	b.n	80049fc <_free_r+0x28>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x58>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x4e>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1855      	adds	r5, r2, r1
 8004a30:	42a5      	cmp	r5, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x78>
 8004a34:	6824      	ldr	r4, [r4, #0]
 8004a36:	4421      	add	r1, r4
 8004a38:	1854      	adds	r4, r2, r1
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1dd      	bne.n	80049fc <_free_r+0x28>
 8004a40:	681c      	ldr	r4, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	4421      	add	r1, r4
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7d7      	b.n	80049fc <_free_r+0x28>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x80>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	e7d3      	b.n	80049fc <_free_r+0x28>
 8004a54:	6825      	ldr	r5, [r4, #0]
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1949      	addeq	r1, r1, r5
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7c7      	b.n	80049fc <_free_r+0x28>
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bd30      	pop	{r4, r5, pc}
 8004a70:	20000954 	.word	0x20000954

08004a74 <_malloc_r>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	1ccd      	adds	r5, r1, #3
 8004a78:	f025 0503 	bic.w	r5, r5, #3
 8004a7c:	3508      	adds	r5, #8
 8004a7e:	2d0c      	cmp	r5, #12
 8004a80:	bf38      	it	cc
 8004a82:	250c      	movcc	r5, #12
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	4606      	mov	r6, r0
 8004a88:	db01      	blt.n	8004a8e <_malloc_r+0x1a>
 8004a8a:	42a9      	cmp	r1, r5
 8004a8c:	d903      	bls.n	8004a96 <_malloc_r+0x22>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	2000      	movs	r0, #0
 8004a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a96:	f001 fb5f 	bl	8006158 <__malloc_lock>
 8004a9a:	4921      	ldr	r1, [pc, #132]	; (8004b20 <_malloc_r+0xac>)
 8004a9c:	680a      	ldr	r2, [r1, #0]
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	b99c      	cbnz	r4, 8004aca <_malloc_r+0x56>
 8004aa2:	4f20      	ldr	r7, [pc, #128]	; (8004b24 <_malloc_r+0xb0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b923      	cbnz	r3, 8004ab2 <_malloc_r+0x3e>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f000 fca6 	bl	80053fc <_sbrk_r>
 8004ab0:	6038      	str	r0, [r7, #0]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 fca1 	bl	80053fc <_sbrk_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d123      	bne.n	8004b06 <_malloc_r+0x92>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f001 fb4e 	bl	8006164 <__malloc_unlock>
 8004ac8:	e7e3      	b.n	8004a92 <_malloc_r+0x1e>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	1b5b      	subs	r3, r3, r5
 8004ace:	d417      	bmi.n	8004b00 <_malloc_r+0x8c>
 8004ad0:	2b0b      	cmp	r3, #11
 8004ad2:	d903      	bls.n	8004adc <_malloc_r+0x68>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	441c      	add	r4, r3
 8004ad8:	6025      	str	r5, [r4, #0]
 8004ada:	e004      	b.n	8004ae6 <_malloc_r+0x72>
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	42a2      	cmp	r2, r4
 8004ae0:	bf0c      	ite	eq
 8004ae2:	600b      	streq	r3, [r1, #0]
 8004ae4:	6053      	strne	r3, [r2, #4]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f001 fb3c 	bl	8006164 <__malloc_unlock>
 8004aec:	f104 000b 	add.w	r0, r4, #11
 8004af0:	1d23      	adds	r3, r4, #4
 8004af2:	f020 0007 	bic.w	r0, r0, #7
 8004af6:	1ac2      	subs	r2, r0, r3
 8004af8:	d0cc      	beq.n	8004a94 <_malloc_r+0x20>
 8004afa:	1a1b      	subs	r3, r3, r0
 8004afc:	50a3      	str	r3, [r4, r2]
 8004afe:	e7c9      	b.n	8004a94 <_malloc_r+0x20>
 8004b00:	4622      	mov	r2, r4
 8004b02:	6864      	ldr	r4, [r4, #4]
 8004b04:	e7cc      	b.n	8004aa0 <_malloc_r+0x2c>
 8004b06:	1cc4      	adds	r4, r0, #3
 8004b08:	f024 0403 	bic.w	r4, r4, #3
 8004b0c:	42a0      	cmp	r0, r4
 8004b0e:	d0e3      	beq.n	8004ad8 <_malloc_r+0x64>
 8004b10:	1a21      	subs	r1, r4, r0
 8004b12:	4630      	mov	r0, r6
 8004b14:	f000 fc72 	bl	80053fc <_sbrk_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d1dd      	bne.n	8004ad8 <_malloc_r+0x64>
 8004b1c:	e7cf      	b.n	8004abe <_malloc_r+0x4a>
 8004b1e:	bf00      	nop
 8004b20:	20000954 	.word	0x20000954
 8004b24:	20000958 	.word	0x20000958

08004b28 <__cvt>:
 8004b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	ec55 4b10 	vmov	r4, r5, d0
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	460e      	mov	r6, r1
 8004b34:	4619      	mov	r1, r3
 8004b36:	462b      	mov	r3, r5
 8004b38:	bfbb      	ittet	lt
 8004b3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b3e:	461d      	movlt	r5, r3
 8004b40:	2300      	movge	r3, #0
 8004b42:	232d      	movlt	r3, #45	; 0x2d
 8004b44:	700b      	strb	r3, [r1, #0]
 8004b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b4c:	4691      	mov	r9, r2
 8004b4e:	f023 0820 	bic.w	r8, r3, #32
 8004b52:	bfbc      	itt	lt
 8004b54:	4622      	movlt	r2, r4
 8004b56:	4614      	movlt	r4, r2
 8004b58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b5c:	d005      	beq.n	8004b6a <__cvt+0x42>
 8004b5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b62:	d100      	bne.n	8004b66 <__cvt+0x3e>
 8004b64:	3601      	adds	r6, #1
 8004b66:	2102      	movs	r1, #2
 8004b68:	e000      	b.n	8004b6c <__cvt+0x44>
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	ab03      	add	r3, sp, #12
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	ab02      	add	r3, sp, #8
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	ec45 4b10 	vmov	d0, r4, r5
 8004b78:	4653      	mov	r3, sl
 8004b7a:	4632      	mov	r2, r6
 8004b7c:	f000 fcfc 	bl	8005578 <_dtoa_r>
 8004b80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b84:	4607      	mov	r7, r0
 8004b86:	d102      	bne.n	8004b8e <__cvt+0x66>
 8004b88:	f019 0f01 	tst.w	r9, #1
 8004b8c:	d022      	beq.n	8004bd4 <__cvt+0xac>
 8004b8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b92:	eb07 0906 	add.w	r9, r7, r6
 8004b96:	d110      	bne.n	8004bba <__cvt+0x92>
 8004b98:	783b      	ldrb	r3, [r7, #0]
 8004b9a:	2b30      	cmp	r3, #48	; 0x30
 8004b9c:	d10a      	bne.n	8004bb4 <__cvt+0x8c>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	f7fb ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 8004baa:	b918      	cbnz	r0, 8004bb4 <__cvt+0x8c>
 8004bac:	f1c6 0601 	rsb	r6, r6, #1
 8004bb0:	f8ca 6000 	str.w	r6, [sl]
 8004bb4:	f8da 3000 	ldr.w	r3, [sl]
 8004bb8:	4499      	add	r9, r3
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	f7fb ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8004bc6:	b108      	cbz	r0, 8004bcc <__cvt+0xa4>
 8004bc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bcc:	2230      	movs	r2, #48	; 0x30
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	454b      	cmp	r3, r9
 8004bd2:	d307      	bcc.n	8004be4 <__cvt+0xbc>
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bd8:	1bdb      	subs	r3, r3, r7
 8004bda:	4638      	mov	r0, r7
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	b004      	add	sp, #16
 8004be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be4:	1c59      	adds	r1, r3, #1
 8004be6:	9103      	str	r1, [sp, #12]
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e7f0      	b.n	8004bce <__cvt+0xa6>

08004bec <__exponent>:
 8004bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	bfb8      	it	lt
 8004bf4:	4249      	neglt	r1, r1
 8004bf6:	f803 2b02 	strb.w	r2, [r3], #2
 8004bfa:	bfb4      	ite	lt
 8004bfc:	222d      	movlt	r2, #45	; 0x2d
 8004bfe:	222b      	movge	r2, #43	; 0x2b
 8004c00:	2909      	cmp	r1, #9
 8004c02:	7042      	strb	r2, [r0, #1]
 8004c04:	dd2a      	ble.n	8004c5c <__exponent+0x70>
 8004c06:	f10d 0407 	add.w	r4, sp, #7
 8004c0a:	46a4      	mov	ip, r4
 8004c0c:	270a      	movs	r7, #10
 8004c0e:	46a6      	mov	lr, r4
 8004c10:	460a      	mov	r2, r1
 8004c12:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c16:	fb07 1516 	mls	r5, r7, r6, r1
 8004c1a:	3530      	adds	r5, #48	; 0x30
 8004c1c:	2a63      	cmp	r2, #99	; 0x63
 8004c1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c26:	4631      	mov	r1, r6
 8004c28:	dcf1      	bgt.n	8004c0e <__exponent+0x22>
 8004c2a:	3130      	adds	r1, #48	; 0x30
 8004c2c:	f1ae 0502 	sub.w	r5, lr, #2
 8004c30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c34:	1c44      	adds	r4, r0, #1
 8004c36:	4629      	mov	r1, r5
 8004c38:	4561      	cmp	r1, ip
 8004c3a:	d30a      	bcc.n	8004c52 <__exponent+0x66>
 8004c3c:	f10d 0209 	add.w	r2, sp, #9
 8004c40:	eba2 020e 	sub.w	r2, r2, lr
 8004c44:	4565      	cmp	r5, ip
 8004c46:	bf88      	it	hi
 8004c48:	2200      	movhi	r2, #0
 8004c4a:	4413      	add	r3, r2
 8004c4c:	1a18      	subs	r0, r3, r0
 8004c4e:	b003      	add	sp, #12
 8004c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c5a:	e7ed      	b.n	8004c38 <__exponent+0x4c>
 8004c5c:	2330      	movs	r3, #48	; 0x30
 8004c5e:	3130      	adds	r1, #48	; 0x30
 8004c60:	7083      	strb	r3, [r0, #2]
 8004c62:	70c1      	strb	r1, [r0, #3]
 8004c64:	1d03      	adds	r3, r0, #4
 8004c66:	e7f1      	b.n	8004c4c <__exponent+0x60>

08004c68 <_printf_float>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	ed2d 8b02 	vpush	{d8}
 8004c70:	b08d      	sub	sp, #52	; 0x34
 8004c72:	460c      	mov	r4, r1
 8004c74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c78:	4616      	mov	r6, r2
 8004c7a:	461f      	mov	r7, r3
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	f001 fa67 	bl	8006150 <_localeconv_r>
 8004c82:	f8d0 a000 	ldr.w	sl, [r0]
 8004c86:	4650      	mov	r0, sl
 8004c88:	f7fb fac2 	bl	8000210 <strlen>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	9305      	str	r3, [sp, #20]
 8004c94:	f8d8 3000 	ldr.w	r3, [r8]
 8004c98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c9c:	3307      	adds	r3, #7
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	f103 0208 	add.w	r2, r3, #8
 8004ca6:	f8c8 2000 	str.w	r2, [r8]
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cba:	9307      	str	r3, [sp, #28]
 8004cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cc0:	ee08 0a10 	vmov	s16, r0
 8004cc4:	4b9f      	ldr	r3, [pc, #636]	; (8004f44 <_printf_float+0x2dc>)
 8004cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	f7fb ff4d 	bl	8000b6c <__aeabi_dcmpun>
 8004cd2:	bb88      	cbnz	r0, 8004d38 <_printf_float+0xd0>
 8004cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cd8:	4b9a      	ldr	r3, [pc, #616]	; (8004f44 <_printf_float+0x2dc>)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	f7fb ff27 	bl	8000b30 <__aeabi_dcmple>
 8004ce2:	bb48      	cbnz	r0, 8004d38 <_printf_float+0xd0>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	f7fb ff16 	bl	8000b1c <__aeabi_dcmplt>
 8004cf0:	b110      	cbz	r0, 8004cf8 <_printf_float+0x90>
 8004cf2:	232d      	movs	r3, #45	; 0x2d
 8004cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf8:	4b93      	ldr	r3, [pc, #588]	; (8004f48 <_printf_float+0x2e0>)
 8004cfa:	4894      	ldr	r0, [pc, #592]	; (8004f4c <_printf_float+0x2e4>)
 8004cfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d00:	bf94      	ite	ls
 8004d02:	4698      	movls	r8, r3
 8004d04:	4680      	movhi	r8, r0
 8004d06:	2303      	movs	r3, #3
 8004d08:	6123      	str	r3, [r4, #16]
 8004d0a:	9b05      	ldr	r3, [sp, #20]
 8004d0c:	f023 0204 	bic.w	r2, r3, #4
 8004d10:	6022      	str	r2, [r4, #0]
 8004d12:	f04f 0900 	mov.w	r9, #0
 8004d16:	9700      	str	r7, [sp, #0]
 8004d18:	4633      	mov	r3, r6
 8004d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f9d8 	bl	80050d4 <_printf_common>
 8004d24:	3001      	adds	r0, #1
 8004d26:	f040 8090 	bne.w	8004e4a <_printf_float+0x1e2>
 8004d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2e:	b00d      	add	sp, #52	; 0x34
 8004d30:	ecbd 8b02 	vpop	{d8}
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	4649      	mov	r1, r9
 8004d40:	f7fb ff14 	bl	8000b6c <__aeabi_dcmpun>
 8004d44:	b140      	cbz	r0, 8004d58 <_printf_float+0xf0>
 8004d46:	464b      	mov	r3, r9
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bfbc      	itt	lt
 8004d4c:	232d      	movlt	r3, #45	; 0x2d
 8004d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d52:	487f      	ldr	r0, [pc, #508]	; (8004f50 <_printf_float+0x2e8>)
 8004d54:	4b7f      	ldr	r3, [pc, #508]	; (8004f54 <_printf_float+0x2ec>)
 8004d56:	e7d1      	b.n	8004cfc <_printf_float+0x94>
 8004d58:	6863      	ldr	r3, [r4, #4]
 8004d5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d5e:	9206      	str	r2, [sp, #24]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	d13f      	bne.n	8004de4 <_printf_float+0x17c>
 8004d64:	2306      	movs	r3, #6
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	9b05      	ldr	r3, [sp, #20]
 8004d6a:	6861      	ldr	r1, [r4, #4]
 8004d6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d70:	2300      	movs	r3, #0
 8004d72:	9303      	str	r3, [sp, #12]
 8004d74:	ab0a      	add	r3, sp, #40	; 0x28
 8004d76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d7a:	ab09      	add	r3, sp, #36	; 0x24
 8004d7c:	ec49 8b10 	vmov	d0, r8, r9
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6022      	str	r2, [r4, #0]
 8004d84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7ff fecd 	bl	8004b28 <__cvt>
 8004d8e:	9b06      	ldr	r3, [sp, #24]
 8004d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d92:	2b47      	cmp	r3, #71	; 0x47
 8004d94:	4680      	mov	r8, r0
 8004d96:	d108      	bne.n	8004daa <_printf_float+0x142>
 8004d98:	1cc8      	adds	r0, r1, #3
 8004d9a:	db02      	blt.n	8004da2 <_printf_float+0x13a>
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	dd41      	ble.n	8004e26 <_printf_float+0x1be>
 8004da2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004da6:	fa5f fb8b 	uxtb.w	fp, fp
 8004daa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dae:	d820      	bhi.n	8004df2 <_printf_float+0x18a>
 8004db0:	3901      	subs	r1, #1
 8004db2:	465a      	mov	r2, fp
 8004db4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004db8:	9109      	str	r1, [sp, #36]	; 0x24
 8004dba:	f7ff ff17 	bl	8004bec <__exponent>
 8004dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dc0:	1813      	adds	r3, r2, r0
 8004dc2:	2a01      	cmp	r2, #1
 8004dc4:	4681      	mov	r9, r0
 8004dc6:	6123      	str	r3, [r4, #16]
 8004dc8:	dc02      	bgt.n	8004dd0 <_printf_float+0x168>
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	07d2      	lsls	r2, r2, #31
 8004dce:	d501      	bpl.n	8004dd4 <_printf_float+0x16c>
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	6123      	str	r3, [r4, #16]
 8004dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d09c      	beq.n	8004d16 <_printf_float+0xae>
 8004ddc:	232d      	movs	r3, #45	; 0x2d
 8004dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de2:	e798      	b.n	8004d16 <_printf_float+0xae>
 8004de4:	9a06      	ldr	r2, [sp, #24]
 8004de6:	2a47      	cmp	r2, #71	; 0x47
 8004de8:	d1be      	bne.n	8004d68 <_printf_float+0x100>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1bc      	bne.n	8004d68 <_printf_float+0x100>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e7b9      	b.n	8004d66 <_printf_float+0xfe>
 8004df2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004df6:	d118      	bne.n	8004e2a <_printf_float+0x1c2>
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	dd0b      	ble.n	8004e16 <_printf_float+0x1ae>
 8004dfe:	6121      	str	r1, [r4, #16]
 8004e00:	b913      	cbnz	r3, 8004e08 <_printf_float+0x1a0>
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	07d0      	lsls	r0, r2, #31
 8004e06:	d502      	bpl.n	8004e0e <_printf_float+0x1a6>
 8004e08:	3301      	adds	r3, #1
 8004e0a:	440b      	add	r3, r1
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e10:	f04f 0900 	mov.w	r9, #0
 8004e14:	e7de      	b.n	8004dd4 <_printf_float+0x16c>
 8004e16:	b913      	cbnz	r3, 8004e1e <_printf_float+0x1b6>
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	07d2      	lsls	r2, r2, #31
 8004e1c:	d501      	bpl.n	8004e22 <_printf_float+0x1ba>
 8004e1e:	3302      	adds	r3, #2
 8004e20:	e7f4      	b.n	8004e0c <_printf_float+0x1a4>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e7f2      	b.n	8004e0c <_printf_float+0x1a4>
 8004e26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	db05      	blt.n	8004e3c <_printf_float+0x1d4>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	6121      	str	r1, [r4, #16]
 8004e34:	07d8      	lsls	r0, r3, #31
 8004e36:	d5ea      	bpl.n	8004e0e <_printf_float+0x1a6>
 8004e38:	1c4b      	adds	r3, r1, #1
 8004e3a:	e7e7      	b.n	8004e0c <_printf_float+0x1a4>
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	bfd4      	ite	le
 8004e40:	f1c1 0202 	rsble	r2, r1, #2
 8004e44:	2201      	movgt	r2, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	e7e0      	b.n	8004e0c <_printf_float+0x1a4>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	055a      	lsls	r2, r3, #21
 8004e4e:	d407      	bmi.n	8004e60 <_printf_float+0x1f8>
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	4642      	mov	r2, r8
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	47b8      	blx	r7
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d12c      	bne.n	8004eb8 <_printf_float+0x250>
 8004e5e:	e764      	b.n	8004d2a <_printf_float+0xc2>
 8004e60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e64:	f240 80e0 	bls.w	8005028 <_printf_float+0x3c0>
 8004e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f7fb fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d034      	beq.n	8004ee2 <_printf_float+0x27a>
 8004e78:	4a37      	ldr	r2, [pc, #220]	; (8004f58 <_printf_float+0x2f0>)
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b8      	blx	r7
 8004e82:	3001      	adds	r0, #1
 8004e84:	f43f af51 	beq.w	8004d2a <_printf_float+0xc2>
 8004e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	db02      	blt.n	8004e96 <_printf_float+0x22e>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07d8      	lsls	r0, r3, #31
 8004e94:	d510      	bpl.n	8004eb8 <_printf_float+0x250>
 8004e96:	ee18 3a10 	vmov	r3, s16
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f43f af41 	beq.w	8004d2a <_printf_float+0xc2>
 8004ea8:	f04f 0800 	mov.w	r8, #0
 8004eac:	f104 091a 	add.w	r9, r4, #26
 8004eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	4543      	cmp	r3, r8
 8004eb6:	dc09      	bgt.n	8004ecc <_printf_float+0x264>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	079b      	lsls	r3, r3, #30
 8004ebc:	f100 8105 	bmi.w	80050ca <_printf_float+0x462>
 8004ec0:	68e0      	ldr	r0, [r4, #12]
 8004ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	bfb8      	it	lt
 8004ec8:	4618      	movlt	r0, r3
 8004eca:	e730      	b.n	8004d2e <_printf_float+0xc6>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	464a      	mov	r2, r9
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f af27 	beq.w	8004d2a <_printf_float+0xc2>
 8004edc:	f108 0801 	add.w	r8, r8, #1
 8004ee0:	e7e6      	b.n	8004eb0 <_printf_float+0x248>
 8004ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dc39      	bgt.n	8004f5c <_printf_float+0x2f4>
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <_printf_float+0x2f0>)
 8004eea:	2301      	movs	r3, #1
 8004eec:	4631      	mov	r1, r6
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f af19 	beq.w	8004d2a <_printf_float+0xc2>
 8004ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d102      	bne.n	8004f06 <_printf_float+0x29e>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	d5d8      	bpl.n	8004eb8 <_printf_float+0x250>
 8004f06:	ee18 3a10 	vmov	r3, s16
 8004f0a:	4652      	mov	r2, sl
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	f43f af09 	beq.w	8004d2a <_printf_float+0xc2>
 8004f18:	f04f 0900 	mov.w	r9, #0
 8004f1c:	f104 0a1a 	add.w	sl, r4, #26
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	425b      	negs	r3, r3
 8004f24:	454b      	cmp	r3, r9
 8004f26:	dc01      	bgt.n	8004f2c <_printf_float+0x2c4>
 8004f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2a:	e792      	b.n	8004e52 <_printf_float+0x1ea>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4652      	mov	r2, sl
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f aef7 	beq.w	8004d2a <_printf_float+0xc2>
 8004f3c:	f109 0901 	add.w	r9, r9, #1
 8004f40:	e7ee      	b.n	8004f20 <_printf_float+0x2b8>
 8004f42:	bf00      	nop
 8004f44:	7fefffff 	.word	0x7fefffff
 8004f48:	0807b64c 	.word	0x0807b64c
 8004f4c:	0807b650 	.word	0x0807b650
 8004f50:	0807b658 	.word	0x0807b658
 8004f54:	0807b654 	.word	0x0807b654
 8004f58:	0807b65c 	.word	0x0807b65c
 8004f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f60:	429a      	cmp	r2, r3
 8004f62:	bfa8      	it	ge
 8004f64:	461a      	movge	r2, r3
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	4691      	mov	r9, r2
 8004f6a:	dc37      	bgt.n	8004fdc <_printf_float+0x374>
 8004f6c:	f04f 0b00 	mov.w	fp, #0
 8004f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f74:	f104 021a 	add.w	r2, r4, #26
 8004f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	eba3 0309 	sub.w	r3, r3, r9
 8004f80:	455b      	cmp	r3, fp
 8004f82:	dc33      	bgt.n	8004fec <_printf_float+0x384>
 8004f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	db3b      	blt.n	8005004 <_printf_float+0x39c>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	07da      	lsls	r2, r3, #31
 8004f90:	d438      	bmi.n	8005004 <_printf_float+0x39c>
 8004f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f94:	9b05      	ldr	r3, [sp, #20]
 8004f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	eba2 0901 	sub.w	r9, r2, r1
 8004f9e:	4599      	cmp	r9, r3
 8004fa0:	bfa8      	it	ge
 8004fa2:	4699      	movge	r9, r3
 8004fa4:	f1b9 0f00 	cmp.w	r9, #0
 8004fa8:	dc35      	bgt.n	8005016 <_printf_float+0x3ae>
 8004faa:	f04f 0800 	mov.w	r8, #0
 8004fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fb2:	f104 0a1a 	add.w	sl, r4, #26
 8004fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	eba3 0309 	sub.w	r3, r3, r9
 8004fc0:	4543      	cmp	r3, r8
 8004fc2:	f77f af79 	ble.w	8004eb8 <_printf_float+0x250>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4652      	mov	r2, sl
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	f43f aeaa 	beq.w	8004d2a <_printf_float+0xc2>
 8004fd6:	f108 0801 	add.w	r8, r8, #1
 8004fda:	e7ec      	b.n	8004fb6 <_printf_float+0x34e>
 8004fdc:	4613      	mov	r3, r2
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d1c0      	bne.n	8004f6c <_printf_float+0x304>
 8004fea:	e69e      	b.n	8004d2a <_printf_float+0xc2>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	9205      	str	r2, [sp, #20]
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f ae97 	beq.w	8004d2a <_printf_float+0xc2>
 8004ffc:	9a05      	ldr	r2, [sp, #20]
 8004ffe:	f10b 0b01 	add.w	fp, fp, #1
 8005002:	e7b9      	b.n	8004f78 <_printf_float+0x310>
 8005004:	ee18 3a10 	vmov	r3, s16
 8005008:	4652      	mov	r2, sl
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	d1be      	bne.n	8004f92 <_printf_float+0x32a>
 8005014:	e689      	b.n	8004d2a <_printf_float+0xc2>
 8005016:	9a05      	ldr	r2, [sp, #20]
 8005018:	464b      	mov	r3, r9
 800501a:	4442      	add	r2, r8
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	3001      	adds	r0, #1
 8005024:	d1c1      	bne.n	8004faa <_printf_float+0x342>
 8005026:	e680      	b.n	8004d2a <_printf_float+0xc2>
 8005028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800502a:	2a01      	cmp	r2, #1
 800502c:	dc01      	bgt.n	8005032 <_printf_float+0x3ca>
 800502e:	07db      	lsls	r3, r3, #31
 8005030:	d538      	bpl.n	80050a4 <_printf_float+0x43c>
 8005032:	2301      	movs	r3, #1
 8005034:	4642      	mov	r2, r8
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	f43f ae74 	beq.w	8004d2a <_printf_float+0xc2>
 8005042:	ee18 3a10 	vmov	r3, s16
 8005046:	4652      	mov	r2, sl
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	f43f ae6b 	beq.w	8004d2a <_printf_float+0xc2>
 8005054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005058:	2200      	movs	r2, #0
 800505a:	2300      	movs	r3, #0
 800505c:	f7fb fd54 	bl	8000b08 <__aeabi_dcmpeq>
 8005060:	b9d8      	cbnz	r0, 800509a <_printf_float+0x432>
 8005062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005064:	f108 0201 	add.w	r2, r8, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	d10e      	bne.n	8005092 <_printf_float+0x42a>
 8005074:	e659      	b.n	8004d2a <_printf_float+0xc2>
 8005076:	2301      	movs	r3, #1
 8005078:	4652      	mov	r2, sl
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	f43f ae52 	beq.w	8004d2a <_printf_float+0xc2>
 8005086:	f108 0801 	add.w	r8, r8, #1
 800508a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508c:	3b01      	subs	r3, #1
 800508e:	4543      	cmp	r3, r8
 8005090:	dcf1      	bgt.n	8005076 <_printf_float+0x40e>
 8005092:	464b      	mov	r3, r9
 8005094:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005098:	e6dc      	b.n	8004e54 <_printf_float+0x1ec>
 800509a:	f04f 0800 	mov.w	r8, #0
 800509e:	f104 0a1a 	add.w	sl, r4, #26
 80050a2:	e7f2      	b.n	800508a <_printf_float+0x422>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4642      	mov	r2, r8
 80050a8:	e7df      	b.n	800506a <_printf_float+0x402>
 80050aa:	2301      	movs	r3, #1
 80050ac:	464a      	mov	r2, r9
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b8      	blx	r7
 80050b4:	3001      	adds	r0, #1
 80050b6:	f43f ae38 	beq.w	8004d2a <_printf_float+0xc2>
 80050ba:	f108 0801 	add.w	r8, r8, #1
 80050be:	68e3      	ldr	r3, [r4, #12]
 80050c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050c2:	1a5b      	subs	r3, r3, r1
 80050c4:	4543      	cmp	r3, r8
 80050c6:	dcf0      	bgt.n	80050aa <_printf_float+0x442>
 80050c8:	e6fa      	b.n	8004ec0 <_printf_float+0x258>
 80050ca:	f04f 0800 	mov.w	r8, #0
 80050ce:	f104 0919 	add.w	r9, r4, #25
 80050d2:	e7f4      	b.n	80050be <_printf_float+0x456>

080050d4 <_printf_common>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	4616      	mov	r6, r2
 80050da:	4699      	mov	r9, r3
 80050dc:	688a      	ldr	r2, [r1, #8]
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bfb8      	it	lt
 80050e8:	4613      	movlt	r3, r2
 80050ea:	6033      	str	r3, [r6, #0]
 80050ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f0:	4607      	mov	r7, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	b10a      	cbz	r2, 80050fa <_printf_common+0x26>
 80050f6:	3301      	adds	r3, #1
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	0699      	lsls	r1, r3, #26
 80050fe:	bf42      	ittt	mi
 8005100:	6833      	ldrmi	r3, [r6, #0]
 8005102:	3302      	addmi	r3, #2
 8005104:	6033      	strmi	r3, [r6, #0]
 8005106:	6825      	ldr	r5, [r4, #0]
 8005108:	f015 0506 	ands.w	r5, r5, #6
 800510c:	d106      	bne.n	800511c <_printf_common+0x48>
 800510e:	f104 0a19 	add.w	sl, r4, #25
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	6832      	ldr	r2, [r6, #0]
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	42ab      	cmp	r3, r5
 800511a:	dc26      	bgt.n	800516a <_printf_common+0x96>
 800511c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005120:	1e13      	subs	r3, r2, #0
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	bf18      	it	ne
 8005126:	2301      	movne	r3, #1
 8005128:	0692      	lsls	r2, r2, #26
 800512a:	d42b      	bmi.n	8005184 <_printf_common+0xb0>
 800512c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005130:	4649      	mov	r1, r9
 8005132:	4638      	mov	r0, r7
 8005134:	47c0      	blx	r8
 8005136:	3001      	adds	r0, #1
 8005138:	d01e      	beq.n	8005178 <_printf_common+0xa4>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	68e5      	ldr	r5, [r4, #12]
 800513e:	6832      	ldr	r2, [r6, #0]
 8005140:	f003 0306 	and.w	r3, r3, #6
 8005144:	2b04      	cmp	r3, #4
 8005146:	bf08      	it	eq
 8005148:	1aad      	subeq	r5, r5, r2
 800514a:	68a3      	ldr	r3, [r4, #8]
 800514c:	6922      	ldr	r2, [r4, #16]
 800514e:	bf0c      	ite	eq
 8005150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005154:	2500      	movne	r5, #0
 8005156:	4293      	cmp	r3, r2
 8005158:	bfc4      	itt	gt
 800515a:	1a9b      	subgt	r3, r3, r2
 800515c:	18ed      	addgt	r5, r5, r3
 800515e:	2600      	movs	r6, #0
 8005160:	341a      	adds	r4, #26
 8005162:	42b5      	cmp	r5, r6
 8005164:	d11a      	bne.n	800519c <_printf_common+0xc8>
 8005166:	2000      	movs	r0, #0
 8005168:	e008      	b.n	800517c <_printf_common+0xa8>
 800516a:	2301      	movs	r3, #1
 800516c:	4652      	mov	r2, sl
 800516e:	4649      	mov	r1, r9
 8005170:	4638      	mov	r0, r7
 8005172:	47c0      	blx	r8
 8005174:	3001      	adds	r0, #1
 8005176:	d103      	bne.n	8005180 <_printf_common+0xac>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005180:	3501      	adds	r5, #1
 8005182:	e7c6      	b.n	8005112 <_printf_common+0x3e>
 8005184:	18e1      	adds	r1, r4, r3
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	2030      	movs	r0, #48	; 0x30
 800518a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800518e:	4422      	add	r2, r4
 8005190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005198:	3302      	adds	r3, #2
 800519a:	e7c7      	b.n	800512c <_printf_common+0x58>
 800519c:	2301      	movs	r3, #1
 800519e:	4622      	mov	r2, r4
 80051a0:	4649      	mov	r1, r9
 80051a2:	4638      	mov	r0, r7
 80051a4:	47c0      	blx	r8
 80051a6:	3001      	adds	r0, #1
 80051a8:	d0e6      	beq.n	8005178 <_printf_common+0xa4>
 80051aa:	3601      	adds	r6, #1
 80051ac:	e7d9      	b.n	8005162 <_printf_common+0x8e>
	...

080051b0 <_printf_i>:
 80051b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	460c      	mov	r4, r1
 80051b6:	4691      	mov	r9, r2
 80051b8:	7e27      	ldrb	r7, [r4, #24]
 80051ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051bc:	2f78      	cmp	r7, #120	; 0x78
 80051be:	4680      	mov	r8, r0
 80051c0:	469a      	mov	sl, r3
 80051c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c6:	d807      	bhi.n	80051d8 <_printf_i+0x28>
 80051c8:	2f62      	cmp	r7, #98	; 0x62
 80051ca:	d80a      	bhi.n	80051e2 <_printf_i+0x32>
 80051cc:	2f00      	cmp	r7, #0
 80051ce:	f000 80d8 	beq.w	8005382 <_printf_i+0x1d2>
 80051d2:	2f58      	cmp	r7, #88	; 0x58
 80051d4:	f000 80a3 	beq.w	800531e <_printf_i+0x16e>
 80051d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051e0:	e03a      	b.n	8005258 <_printf_i+0xa8>
 80051e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051e6:	2b15      	cmp	r3, #21
 80051e8:	d8f6      	bhi.n	80051d8 <_printf_i+0x28>
 80051ea:	a001      	add	r0, pc, #4	; (adr r0, 80051f0 <_printf_i+0x40>)
 80051ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051f0:	08005249 	.word	0x08005249
 80051f4:	0800525d 	.word	0x0800525d
 80051f8:	080051d9 	.word	0x080051d9
 80051fc:	080051d9 	.word	0x080051d9
 8005200:	080051d9 	.word	0x080051d9
 8005204:	080051d9 	.word	0x080051d9
 8005208:	0800525d 	.word	0x0800525d
 800520c:	080051d9 	.word	0x080051d9
 8005210:	080051d9 	.word	0x080051d9
 8005214:	080051d9 	.word	0x080051d9
 8005218:	080051d9 	.word	0x080051d9
 800521c:	08005369 	.word	0x08005369
 8005220:	0800528d 	.word	0x0800528d
 8005224:	0800534b 	.word	0x0800534b
 8005228:	080051d9 	.word	0x080051d9
 800522c:	080051d9 	.word	0x080051d9
 8005230:	0800538b 	.word	0x0800538b
 8005234:	080051d9 	.word	0x080051d9
 8005238:	0800528d 	.word	0x0800528d
 800523c:	080051d9 	.word	0x080051d9
 8005240:	080051d9 	.word	0x080051d9
 8005244:	08005353 	.word	0x08005353
 8005248:	680b      	ldr	r3, [r1, #0]
 800524a:	1d1a      	adds	r2, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	600a      	str	r2, [r1, #0]
 8005250:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005258:	2301      	movs	r3, #1
 800525a:	e0a3      	b.n	80053a4 <_printf_i+0x1f4>
 800525c:	6825      	ldr	r5, [r4, #0]
 800525e:	6808      	ldr	r0, [r1, #0]
 8005260:	062e      	lsls	r6, r5, #24
 8005262:	f100 0304 	add.w	r3, r0, #4
 8005266:	d50a      	bpl.n	800527e <_printf_i+0xce>
 8005268:	6805      	ldr	r5, [r0, #0]
 800526a:	600b      	str	r3, [r1, #0]
 800526c:	2d00      	cmp	r5, #0
 800526e:	da03      	bge.n	8005278 <_printf_i+0xc8>
 8005270:	232d      	movs	r3, #45	; 0x2d
 8005272:	426d      	negs	r5, r5
 8005274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005278:	485e      	ldr	r0, [pc, #376]	; (80053f4 <_printf_i+0x244>)
 800527a:	230a      	movs	r3, #10
 800527c:	e019      	b.n	80052b2 <_printf_i+0x102>
 800527e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005282:	6805      	ldr	r5, [r0, #0]
 8005284:	600b      	str	r3, [r1, #0]
 8005286:	bf18      	it	ne
 8005288:	b22d      	sxthne	r5, r5
 800528a:	e7ef      	b.n	800526c <_printf_i+0xbc>
 800528c:	680b      	ldr	r3, [r1, #0]
 800528e:	6825      	ldr	r5, [r4, #0]
 8005290:	1d18      	adds	r0, r3, #4
 8005292:	6008      	str	r0, [r1, #0]
 8005294:	0628      	lsls	r0, r5, #24
 8005296:	d501      	bpl.n	800529c <_printf_i+0xec>
 8005298:	681d      	ldr	r5, [r3, #0]
 800529a:	e002      	b.n	80052a2 <_printf_i+0xf2>
 800529c:	0669      	lsls	r1, r5, #25
 800529e:	d5fb      	bpl.n	8005298 <_printf_i+0xe8>
 80052a0:	881d      	ldrh	r5, [r3, #0]
 80052a2:	4854      	ldr	r0, [pc, #336]	; (80053f4 <_printf_i+0x244>)
 80052a4:	2f6f      	cmp	r7, #111	; 0x6f
 80052a6:	bf0c      	ite	eq
 80052a8:	2308      	moveq	r3, #8
 80052aa:	230a      	movne	r3, #10
 80052ac:	2100      	movs	r1, #0
 80052ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b2:	6866      	ldr	r6, [r4, #4]
 80052b4:	60a6      	str	r6, [r4, #8]
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	bfa2      	ittt	ge
 80052ba:	6821      	ldrge	r1, [r4, #0]
 80052bc:	f021 0104 	bicge.w	r1, r1, #4
 80052c0:	6021      	strge	r1, [r4, #0]
 80052c2:	b90d      	cbnz	r5, 80052c8 <_printf_i+0x118>
 80052c4:	2e00      	cmp	r6, #0
 80052c6:	d04d      	beq.n	8005364 <_printf_i+0x1b4>
 80052c8:	4616      	mov	r6, r2
 80052ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ce:	fb03 5711 	mls	r7, r3, r1, r5
 80052d2:	5dc7      	ldrb	r7, [r0, r7]
 80052d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052d8:	462f      	mov	r7, r5
 80052da:	42bb      	cmp	r3, r7
 80052dc:	460d      	mov	r5, r1
 80052de:	d9f4      	bls.n	80052ca <_printf_i+0x11a>
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d10b      	bne.n	80052fc <_printf_i+0x14c>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	07df      	lsls	r7, r3, #31
 80052e8:	d508      	bpl.n	80052fc <_printf_i+0x14c>
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	6861      	ldr	r1, [r4, #4]
 80052ee:	4299      	cmp	r1, r3
 80052f0:	bfde      	ittt	le
 80052f2:	2330      	movle	r3, #48	; 0x30
 80052f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052fc:	1b92      	subs	r2, r2, r6
 80052fe:	6122      	str	r2, [r4, #16]
 8005300:	f8cd a000 	str.w	sl, [sp]
 8005304:	464b      	mov	r3, r9
 8005306:	aa03      	add	r2, sp, #12
 8005308:	4621      	mov	r1, r4
 800530a:	4640      	mov	r0, r8
 800530c:	f7ff fee2 	bl	80050d4 <_printf_common>
 8005310:	3001      	adds	r0, #1
 8005312:	d14c      	bne.n	80053ae <_printf_i+0x1fe>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	b004      	add	sp, #16
 800531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531e:	4835      	ldr	r0, [pc, #212]	; (80053f4 <_printf_i+0x244>)
 8005320:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	680e      	ldr	r6, [r1, #0]
 8005328:	061f      	lsls	r7, r3, #24
 800532a:	f856 5b04 	ldr.w	r5, [r6], #4
 800532e:	600e      	str	r6, [r1, #0]
 8005330:	d514      	bpl.n	800535c <_printf_i+0x1ac>
 8005332:	07d9      	lsls	r1, r3, #31
 8005334:	bf44      	itt	mi
 8005336:	f043 0320 	orrmi.w	r3, r3, #32
 800533a:	6023      	strmi	r3, [r4, #0]
 800533c:	b91d      	cbnz	r5, 8005346 <_printf_i+0x196>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	f023 0320 	bic.w	r3, r3, #32
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	2310      	movs	r3, #16
 8005348:	e7b0      	b.n	80052ac <_printf_i+0xfc>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	2378      	movs	r3, #120	; 0x78
 8005354:	4828      	ldr	r0, [pc, #160]	; (80053f8 <_printf_i+0x248>)
 8005356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800535a:	e7e3      	b.n	8005324 <_printf_i+0x174>
 800535c:	065e      	lsls	r6, r3, #25
 800535e:	bf48      	it	mi
 8005360:	b2ad      	uxthmi	r5, r5
 8005362:	e7e6      	b.n	8005332 <_printf_i+0x182>
 8005364:	4616      	mov	r6, r2
 8005366:	e7bb      	b.n	80052e0 <_printf_i+0x130>
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	6826      	ldr	r6, [r4, #0]
 800536c:	6960      	ldr	r0, [r4, #20]
 800536e:	1d1d      	adds	r5, r3, #4
 8005370:	600d      	str	r5, [r1, #0]
 8005372:	0635      	lsls	r5, r6, #24
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	d501      	bpl.n	800537c <_printf_i+0x1cc>
 8005378:	6018      	str	r0, [r3, #0]
 800537a:	e002      	b.n	8005382 <_printf_i+0x1d2>
 800537c:	0671      	lsls	r1, r6, #25
 800537e:	d5fb      	bpl.n	8005378 <_printf_i+0x1c8>
 8005380:	8018      	strh	r0, [r3, #0]
 8005382:	2300      	movs	r3, #0
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	4616      	mov	r6, r2
 8005388:	e7ba      	b.n	8005300 <_printf_i+0x150>
 800538a:	680b      	ldr	r3, [r1, #0]
 800538c:	1d1a      	adds	r2, r3, #4
 800538e:	600a      	str	r2, [r1, #0]
 8005390:	681e      	ldr	r6, [r3, #0]
 8005392:	6862      	ldr	r2, [r4, #4]
 8005394:	2100      	movs	r1, #0
 8005396:	4630      	mov	r0, r6
 8005398:	f7fa ff42 	bl	8000220 <memchr>
 800539c:	b108      	cbz	r0, 80053a2 <_printf_i+0x1f2>
 800539e:	1b80      	subs	r0, r0, r6
 80053a0:	6060      	str	r0, [r4, #4]
 80053a2:	6863      	ldr	r3, [r4, #4]
 80053a4:	6123      	str	r3, [r4, #16]
 80053a6:	2300      	movs	r3, #0
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ac:	e7a8      	b.n	8005300 <_printf_i+0x150>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	4632      	mov	r2, r6
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d0ab      	beq.n	8005314 <_printf_i+0x164>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	079b      	lsls	r3, r3, #30
 80053c0:	d413      	bmi.n	80053ea <_printf_i+0x23a>
 80053c2:	68e0      	ldr	r0, [r4, #12]
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	4298      	cmp	r0, r3
 80053c8:	bfb8      	it	lt
 80053ca:	4618      	movlt	r0, r3
 80053cc:	e7a4      	b.n	8005318 <_printf_i+0x168>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4632      	mov	r2, r6
 80053d2:	4649      	mov	r1, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	47d0      	blx	sl
 80053d8:	3001      	adds	r0, #1
 80053da:	d09b      	beq.n	8005314 <_printf_i+0x164>
 80053dc:	3501      	adds	r5, #1
 80053de:	68e3      	ldr	r3, [r4, #12]
 80053e0:	9903      	ldr	r1, [sp, #12]
 80053e2:	1a5b      	subs	r3, r3, r1
 80053e4:	42ab      	cmp	r3, r5
 80053e6:	dcf2      	bgt.n	80053ce <_printf_i+0x21e>
 80053e8:	e7eb      	b.n	80053c2 <_printf_i+0x212>
 80053ea:	2500      	movs	r5, #0
 80053ec:	f104 0619 	add.w	r6, r4, #25
 80053f0:	e7f5      	b.n	80053de <_printf_i+0x22e>
 80053f2:	bf00      	nop
 80053f4:	0807b65e 	.word	0x0807b65e
 80053f8:	0807b66f 	.word	0x0807b66f

080053fc <_sbrk_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	; (8005418 <_sbrk_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fc f9fa 	bl	8001800 <_sbrk>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_sbrk_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_sbrk_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	200009f4 	.word	0x200009f4

0800541c <siprintf>:
 800541c:	b40e      	push	{r1, r2, r3}
 800541e:	b500      	push	{lr}
 8005420:	b09c      	sub	sp, #112	; 0x70
 8005422:	ab1d      	add	r3, sp, #116	; 0x74
 8005424:	9002      	str	r0, [sp, #8]
 8005426:	9006      	str	r0, [sp, #24]
 8005428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800542c:	4809      	ldr	r0, [pc, #36]	; (8005454 <siprintf+0x38>)
 800542e:	9107      	str	r1, [sp, #28]
 8005430:	9104      	str	r1, [sp, #16]
 8005432:	4909      	ldr	r1, [pc, #36]	; (8005458 <siprintf+0x3c>)
 8005434:	f853 2b04 	ldr.w	r2, [r3], #4
 8005438:	9105      	str	r1, [sp, #20]
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	a902      	add	r1, sp, #8
 8005440:	f001 faa4 	bl	800698c <_svfiprintf_r>
 8005444:	9b02      	ldr	r3, [sp, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	b01c      	add	sp, #112	; 0x70
 800544c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005450:	b003      	add	sp, #12
 8005452:	4770      	bx	lr
 8005454:	200006dc 	.word	0x200006dc
 8005458:	ffff0208 	.word	0xffff0208

0800545c <quorem>:
 800545c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005460:	6903      	ldr	r3, [r0, #16]
 8005462:	690c      	ldr	r4, [r1, #16]
 8005464:	42a3      	cmp	r3, r4
 8005466:	4607      	mov	r7, r0
 8005468:	f2c0 8081 	blt.w	800556e <quorem+0x112>
 800546c:	3c01      	subs	r4, #1
 800546e:	f101 0814 	add.w	r8, r1, #20
 8005472:	f100 0514 	add.w	r5, r0, #20
 8005476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005484:	3301      	adds	r3, #1
 8005486:	429a      	cmp	r2, r3
 8005488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800548c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005490:	fbb2 f6f3 	udiv	r6, r2, r3
 8005494:	d331      	bcc.n	80054fa <quorem+0x9e>
 8005496:	f04f 0e00 	mov.w	lr, #0
 800549a:	4640      	mov	r0, r8
 800549c:	46ac      	mov	ip, r5
 800549e:	46f2      	mov	sl, lr
 80054a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80054a4:	b293      	uxth	r3, r2
 80054a6:	fb06 e303 	mla	r3, r6, r3, lr
 80054aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	ebaa 0303 	sub.w	r3, sl, r3
 80054b4:	0c12      	lsrs	r2, r2, #16
 80054b6:	f8dc a000 	ldr.w	sl, [ip]
 80054ba:	fb06 e202 	mla	r2, r6, r2, lr
 80054be:	fa13 f38a 	uxtah	r3, r3, sl
 80054c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054c6:	fa1f fa82 	uxth.w	sl, r2
 80054ca:	f8dc 2000 	ldr.w	r2, [ip]
 80054ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80054d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054dc:	4581      	cmp	r9, r0
 80054de:	f84c 3b04 	str.w	r3, [ip], #4
 80054e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054e6:	d2db      	bcs.n	80054a0 <quorem+0x44>
 80054e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80054ec:	b92b      	cbnz	r3, 80054fa <quorem+0x9e>
 80054ee:	9b01      	ldr	r3, [sp, #4]
 80054f0:	3b04      	subs	r3, #4
 80054f2:	429d      	cmp	r5, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	d32e      	bcc.n	8005556 <quorem+0xfa>
 80054f8:	613c      	str	r4, [r7, #16]
 80054fa:	4638      	mov	r0, r7
 80054fc:	f001 f8b6 	bl	800666c <__mcmp>
 8005500:	2800      	cmp	r0, #0
 8005502:	db24      	blt.n	800554e <quorem+0xf2>
 8005504:	3601      	adds	r6, #1
 8005506:	4628      	mov	r0, r5
 8005508:	f04f 0c00 	mov.w	ip, #0
 800550c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005510:	f8d0 e000 	ldr.w	lr, [r0]
 8005514:	b293      	uxth	r3, r2
 8005516:	ebac 0303 	sub.w	r3, ip, r3
 800551a:	0c12      	lsrs	r2, r2, #16
 800551c:	fa13 f38e 	uxtah	r3, r3, lr
 8005520:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800552e:	45c1      	cmp	r9, r8
 8005530:	f840 3b04 	str.w	r3, [r0], #4
 8005534:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005538:	d2e8      	bcs.n	800550c <quorem+0xb0>
 800553a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800553e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005542:	b922      	cbnz	r2, 800554e <quorem+0xf2>
 8005544:	3b04      	subs	r3, #4
 8005546:	429d      	cmp	r5, r3
 8005548:	461a      	mov	r2, r3
 800554a:	d30a      	bcc.n	8005562 <quorem+0x106>
 800554c:	613c      	str	r4, [r7, #16]
 800554e:	4630      	mov	r0, r6
 8005550:	b003      	add	sp, #12
 8005552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	3b04      	subs	r3, #4
 800555a:	2a00      	cmp	r2, #0
 800555c:	d1cc      	bne.n	80054f8 <quorem+0x9c>
 800555e:	3c01      	subs	r4, #1
 8005560:	e7c7      	b.n	80054f2 <quorem+0x96>
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	3b04      	subs	r3, #4
 8005566:	2a00      	cmp	r2, #0
 8005568:	d1f0      	bne.n	800554c <quorem+0xf0>
 800556a:	3c01      	subs	r4, #1
 800556c:	e7eb      	b.n	8005546 <quorem+0xea>
 800556e:	2000      	movs	r0, #0
 8005570:	e7ee      	b.n	8005550 <quorem+0xf4>
 8005572:	0000      	movs	r0, r0
 8005574:	0000      	movs	r0, r0
	...

08005578 <_dtoa_r>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	ed2d 8b02 	vpush	{d8}
 8005580:	ec57 6b10 	vmov	r6, r7, d0
 8005584:	b095      	sub	sp, #84	; 0x54
 8005586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800558c:	9105      	str	r1, [sp, #20]
 800558e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005592:	4604      	mov	r4, r0
 8005594:	9209      	str	r2, [sp, #36]	; 0x24
 8005596:	930f      	str	r3, [sp, #60]	; 0x3c
 8005598:	b975      	cbnz	r5, 80055b8 <_dtoa_r+0x40>
 800559a:	2010      	movs	r0, #16
 800559c:	f7ff f9fc 	bl	8004998 <malloc>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6260      	str	r0, [r4, #36]	; 0x24
 80055a4:	b920      	cbnz	r0, 80055b0 <_dtoa_r+0x38>
 80055a6:	4bb2      	ldr	r3, [pc, #712]	; (8005870 <_dtoa_r+0x2f8>)
 80055a8:	21ea      	movs	r1, #234	; 0xea
 80055aa:	48b2      	ldr	r0, [pc, #712]	; (8005874 <_dtoa_r+0x2fc>)
 80055ac:	f001 faee 	bl	8006b8c <__assert_func>
 80055b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055b4:	6005      	str	r5, [r0, #0]
 80055b6:	60c5      	str	r5, [r0, #12]
 80055b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	b151      	cbz	r1, 80055d4 <_dtoa_r+0x5c>
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	604a      	str	r2, [r1, #4]
 80055c2:	2301      	movs	r3, #1
 80055c4:	4093      	lsls	r3, r2
 80055c6:	608b      	str	r3, [r1, #8]
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fe11 	bl	80061f0 <_Bfree>
 80055ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	1e3b      	subs	r3, r7, #0
 80055d6:	bfb9      	ittee	lt
 80055d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	9303      	strlt	r3, [sp, #12]
 80055de:	2300      	movge	r3, #0
 80055e0:	f8c8 3000 	strge.w	r3, [r8]
 80055e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80055e8:	4ba3      	ldr	r3, [pc, #652]	; (8005878 <_dtoa_r+0x300>)
 80055ea:	bfbc      	itt	lt
 80055ec:	2201      	movlt	r2, #1
 80055ee:	f8c8 2000 	strlt.w	r2, [r8]
 80055f2:	ea33 0309 	bics.w	r3, r3, r9
 80055f6:	d11b      	bne.n	8005630 <_dtoa_r+0xb8>
 80055f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005604:	4333      	orrs	r3, r6
 8005606:	f000 857a 	beq.w	80060fe <_dtoa_r+0xb86>
 800560a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800560c:	b963      	cbnz	r3, 8005628 <_dtoa_r+0xb0>
 800560e:	4b9b      	ldr	r3, [pc, #620]	; (800587c <_dtoa_r+0x304>)
 8005610:	e024      	b.n	800565c <_dtoa_r+0xe4>
 8005612:	4b9b      	ldr	r3, [pc, #620]	; (8005880 <_dtoa_r+0x308>)
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	9800      	ldr	r0, [sp, #0]
 800561e:	b015      	add	sp, #84	; 0x54
 8005620:	ecbd 8b02 	vpop	{d8}
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	4b94      	ldr	r3, [pc, #592]	; (800587c <_dtoa_r+0x304>)
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	3303      	adds	r3, #3
 800562e:	e7f3      	b.n	8005618 <_dtoa_r+0xa0>
 8005630:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	ec51 0b17 	vmov	r0, r1, d7
 800563a:	2300      	movs	r3, #0
 800563c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005640:	f7fb fa62 	bl	8000b08 <__aeabi_dcmpeq>
 8005644:	4680      	mov	r8, r0
 8005646:	b158      	cbz	r0, 8005660 <_dtoa_r+0xe8>
 8005648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800564a:	2301      	movs	r3, #1
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8551 	beq.w	80060f8 <_dtoa_r+0xb80>
 8005656:	488b      	ldr	r0, [pc, #556]	; (8005884 <_dtoa_r+0x30c>)
 8005658:	6018      	str	r0, [r3, #0]
 800565a:	1e43      	subs	r3, r0, #1
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	e7dd      	b.n	800561c <_dtoa_r+0xa4>
 8005660:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005664:	aa12      	add	r2, sp, #72	; 0x48
 8005666:	a913      	add	r1, sp, #76	; 0x4c
 8005668:	4620      	mov	r0, r4
 800566a:	f001 f8a3 	bl	80067b4 <__d2b>
 800566e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005672:	4683      	mov	fp, r0
 8005674:	2d00      	cmp	r5, #0
 8005676:	d07c      	beq.n	8005772 <_dtoa_r+0x1fa>
 8005678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800567a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800567e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005682:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005686:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800568a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800568e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005692:	4b7d      	ldr	r3, [pc, #500]	; (8005888 <_dtoa_r+0x310>)
 8005694:	2200      	movs	r2, #0
 8005696:	4630      	mov	r0, r6
 8005698:	4639      	mov	r1, r7
 800569a:	f7fa fe15 	bl	80002c8 <__aeabi_dsub>
 800569e:	a36e      	add	r3, pc, #440	; (adr r3, 8005858 <_dtoa_r+0x2e0>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa ffc8 	bl	8000638 <__aeabi_dmul>
 80056a8:	a36d      	add	r3, pc, #436	; (adr r3, 8005860 <_dtoa_r+0x2e8>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa fe0d 	bl	80002cc <__adddf3>
 80056b2:	4606      	mov	r6, r0
 80056b4:	4628      	mov	r0, r5
 80056b6:	460f      	mov	r7, r1
 80056b8:	f7fa ff54 	bl	8000564 <__aeabi_i2d>
 80056bc:	a36a      	add	r3, pc, #424	; (adr r3, 8005868 <_dtoa_r+0x2f0>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa ffb9 	bl	8000638 <__aeabi_dmul>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	f7fa fdfd 	bl	80002cc <__adddf3>
 80056d2:	4606      	mov	r6, r0
 80056d4:	460f      	mov	r7, r1
 80056d6:	f7fb fa5f 	bl	8000b98 <__aeabi_d2iz>
 80056da:	2200      	movs	r2, #0
 80056dc:	4682      	mov	sl, r0
 80056de:	2300      	movs	r3, #0
 80056e0:	4630      	mov	r0, r6
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7fb fa1a 	bl	8000b1c <__aeabi_dcmplt>
 80056e8:	b148      	cbz	r0, 80056fe <_dtoa_r+0x186>
 80056ea:	4650      	mov	r0, sl
 80056ec:	f7fa ff3a 	bl	8000564 <__aeabi_i2d>
 80056f0:	4632      	mov	r2, r6
 80056f2:	463b      	mov	r3, r7
 80056f4:	f7fb fa08 	bl	8000b08 <__aeabi_dcmpeq>
 80056f8:	b908      	cbnz	r0, 80056fe <_dtoa_r+0x186>
 80056fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056fe:	f1ba 0f16 	cmp.w	sl, #22
 8005702:	d854      	bhi.n	80057ae <_dtoa_r+0x236>
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <_dtoa_r+0x314>)
 8005706:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005712:	f7fb fa03 	bl	8000b1c <__aeabi_dcmplt>
 8005716:	2800      	cmp	r0, #0
 8005718:	d04b      	beq.n	80057b2 <_dtoa_r+0x23a>
 800571a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800571e:	2300      	movs	r3, #0
 8005720:	930e      	str	r3, [sp, #56]	; 0x38
 8005722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005724:	1b5d      	subs	r5, r3, r5
 8005726:	1e6b      	subs	r3, r5, #1
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	bf43      	ittte	mi
 800572c:	2300      	movmi	r3, #0
 800572e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005732:	9304      	strmi	r3, [sp, #16]
 8005734:	f04f 0800 	movpl.w	r8, #0
 8005738:	f1ba 0f00 	cmp.w	sl, #0
 800573c:	db3b      	blt.n	80057b6 <_dtoa_r+0x23e>
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005744:	4453      	add	r3, sl
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	2300      	movs	r3, #0
 800574a:	9306      	str	r3, [sp, #24]
 800574c:	9b05      	ldr	r3, [sp, #20]
 800574e:	2b09      	cmp	r3, #9
 8005750:	d869      	bhi.n	8005826 <_dtoa_r+0x2ae>
 8005752:	2b05      	cmp	r3, #5
 8005754:	bfc4      	itt	gt
 8005756:	3b04      	subgt	r3, #4
 8005758:	9305      	strgt	r3, [sp, #20]
 800575a:	9b05      	ldr	r3, [sp, #20]
 800575c:	f1a3 0302 	sub.w	r3, r3, #2
 8005760:	bfcc      	ite	gt
 8005762:	2500      	movgt	r5, #0
 8005764:	2501      	movle	r5, #1
 8005766:	2b03      	cmp	r3, #3
 8005768:	d869      	bhi.n	800583e <_dtoa_r+0x2c6>
 800576a:	e8df f003 	tbb	[pc, r3]
 800576e:	4e2c      	.short	0x4e2c
 8005770:	5a4c      	.short	0x5a4c
 8005772:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005776:	441d      	add	r5, r3
 8005778:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800577c:	2b20      	cmp	r3, #32
 800577e:	bfc1      	itttt	gt
 8005780:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005784:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005788:	fa09 f303 	lslgt.w	r3, r9, r3
 800578c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005790:	bfda      	itte	le
 8005792:	f1c3 0320 	rsble	r3, r3, #32
 8005796:	fa06 f003 	lslle.w	r0, r6, r3
 800579a:	4318      	orrgt	r0, r3
 800579c:	f7fa fed2 	bl	8000544 <__aeabi_ui2d>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4606      	mov	r6, r0
 80057a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80057a8:	3d01      	subs	r5, #1
 80057aa:	9310      	str	r3, [sp, #64]	; 0x40
 80057ac:	e771      	b.n	8005692 <_dtoa_r+0x11a>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e7b6      	b.n	8005720 <_dtoa_r+0x1a8>
 80057b2:	900e      	str	r0, [sp, #56]	; 0x38
 80057b4:	e7b5      	b.n	8005722 <_dtoa_r+0x1aa>
 80057b6:	f1ca 0300 	rsb	r3, sl, #0
 80057ba:	9306      	str	r3, [sp, #24]
 80057bc:	2300      	movs	r3, #0
 80057be:	eba8 080a 	sub.w	r8, r8, sl
 80057c2:	930d      	str	r3, [sp, #52]	; 0x34
 80057c4:	e7c2      	b.n	800574c <_dtoa_r+0x1d4>
 80057c6:	2300      	movs	r3, #0
 80057c8:	9308      	str	r3, [sp, #32]
 80057ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc39      	bgt.n	8005844 <_dtoa_r+0x2cc>
 80057d0:	f04f 0901 	mov.w	r9, #1
 80057d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80057d8:	464b      	mov	r3, r9
 80057da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80057de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80057e0:	2200      	movs	r2, #0
 80057e2:	6042      	str	r2, [r0, #4]
 80057e4:	2204      	movs	r2, #4
 80057e6:	f102 0614 	add.w	r6, r2, #20
 80057ea:	429e      	cmp	r6, r3
 80057ec:	6841      	ldr	r1, [r0, #4]
 80057ee:	d92f      	bls.n	8005850 <_dtoa_r+0x2d8>
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 fcbd 	bl	8006170 <_Balloc>
 80057f6:	9000      	str	r0, [sp, #0]
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d14b      	bne.n	8005894 <_dtoa_r+0x31c>
 80057fc:	4b24      	ldr	r3, [pc, #144]	; (8005890 <_dtoa_r+0x318>)
 80057fe:	4602      	mov	r2, r0
 8005800:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005804:	e6d1      	b.n	80055aa <_dtoa_r+0x32>
 8005806:	2301      	movs	r3, #1
 8005808:	e7de      	b.n	80057c8 <_dtoa_r+0x250>
 800580a:	2300      	movs	r3, #0
 800580c:	9308      	str	r3, [sp, #32]
 800580e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005810:	eb0a 0903 	add.w	r9, sl, r3
 8005814:	f109 0301 	add.w	r3, r9, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	bfb8      	it	lt
 800581e:	2301      	movlt	r3, #1
 8005820:	e7dd      	b.n	80057de <_dtoa_r+0x266>
 8005822:	2301      	movs	r3, #1
 8005824:	e7f2      	b.n	800580c <_dtoa_r+0x294>
 8005826:	2501      	movs	r5, #1
 8005828:	2300      	movs	r3, #0
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	9508      	str	r5, [sp, #32]
 800582e:	f04f 39ff 	mov.w	r9, #4294967295
 8005832:	2200      	movs	r2, #0
 8005834:	f8cd 9004 	str.w	r9, [sp, #4]
 8005838:	2312      	movs	r3, #18
 800583a:	9209      	str	r2, [sp, #36]	; 0x24
 800583c:	e7cf      	b.n	80057de <_dtoa_r+0x266>
 800583e:	2301      	movs	r3, #1
 8005840:	9308      	str	r3, [sp, #32]
 8005842:	e7f4      	b.n	800582e <_dtoa_r+0x2b6>
 8005844:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005848:	f8cd 9004 	str.w	r9, [sp, #4]
 800584c:	464b      	mov	r3, r9
 800584e:	e7c6      	b.n	80057de <_dtoa_r+0x266>
 8005850:	3101      	adds	r1, #1
 8005852:	6041      	str	r1, [r0, #4]
 8005854:	0052      	lsls	r2, r2, #1
 8005856:	e7c6      	b.n	80057e6 <_dtoa_r+0x26e>
 8005858:	636f4361 	.word	0x636f4361
 800585c:	3fd287a7 	.word	0x3fd287a7
 8005860:	8b60c8b3 	.word	0x8b60c8b3
 8005864:	3fc68a28 	.word	0x3fc68a28
 8005868:	509f79fb 	.word	0x509f79fb
 800586c:	3fd34413 	.word	0x3fd34413
 8005870:	0807b68d 	.word	0x0807b68d
 8005874:	0807b6a4 	.word	0x0807b6a4
 8005878:	7ff00000 	.word	0x7ff00000
 800587c:	0807b689 	.word	0x0807b689
 8005880:	0807b680 	.word	0x0807b680
 8005884:	0807b65d 	.word	0x0807b65d
 8005888:	3ff80000 	.word	0x3ff80000
 800588c:	0807b7a0 	.word	0x0807b7a0
 8005890:	0807b703 	.word	0x0807b703
 8005894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005896:	9a00      	ldr	r2, [sp, #0]
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	2b0e      	cmp	r3, #14
 800589e:	f200 80ad 	bhi.w	80059fc <_dtoa_r+0x484>
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	f000 80aa 	beq.w	80059fc <_dtoa_r+0x484>
 80058a8:	f1ba 0f00 	cmp.w	sl, #0
 80058ac:	dd36      	ble.n	800591c <_dtoa_r+0x3a4>
 80058ae:	4ac3      	ldr	r2, [pc, #780]	; (8005bbc <_dtoa_r+0x644>)
 80058b0:	f00a 030f 	and.w	r3, sl, #15
 80058b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058b8:	ed93 7b00 	vldr	d7, [r3]
 80058bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80058c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80058c4:	eeb0 8a47 	vmov.f32	s16, s14
 80058c8:	eef0 8a67 	vmov.f32	s17, s15
 80058cc:	d016      	beq.n	80058fc <_dtoa_r+0x384>
 80058ce:	4bbc      	ldr	r3, [pc, #752]	; (8005bc0 <_dtoa_r+0x648>)
 80058d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058d8:	f7fa ffd8 	bl	800088c <__aeabi_ddiv>
 80058dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058e0:	f007 070f 	and.w	r7, r7, #15
 80058e4:	2503      	movs	r5, #3
 80058e6:	4eb6      	ldr	r6, [pc, #728]	; (8005bc0 <_dtoa_r+0x648>)
 80058e8:	b957      	cbnz	r7, 8005900 <_dtoa_r+0x388>
 80058ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ee:	ec53 2b18 	vmov	r2, r3, d8
 80058f2:	f7fa ffcb 	bl	800088c <__aeabi_ddiv>
 80058f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058fa:	e029      	b.n	8005950 <_dtoa_r+0x3d8>
 80058fc:	2502      	movs	r5, #2
 80058fe:	e7f2      	b.n	80058e6 <_dtoa_r+0x36e>
 8005900:	07f9      	lsls	r1, r7, #31
 8005902:	d508      	bpl.n	8005916 <_dtoa_r+0x39e>
 8005904:	ec51 0b18 	vmov	r0, r1, d8
 8005908:	e9d6 2300 	ldrd	r2, r3, [r6]
 800590c:	f7fa fe94 	bl	8000638 <__aeabi_dmul>
 8005910:	ec41 0b18 	vmov	d8, r0, r1
 8005914:	3501      	adds	r5, #1
 8005916:	107f      	asrs	r7, r7, #1
 8005918:	3608      	adds	r6, #8
 800591a:	e7e5      	b.n	80058e8 <_dtoa_r+0x370>
 800591c:	f000 80a6 	beq.w	8005a6c <_dtoa_r+0x4f4>
 8005920:	f1ca 0600 	rsb	r6, sl, #0
 8005924:	4ba5      	ldr	r3, [pc, #660]	; (8005bbc <_dtoa_r+0x644>)
 8005926:	4fa6      	ldr	r7, [pc, #664]	; (8005bc0 <_dtoa_r+0x648>)
 8005928:	f006 020f 	and.w	r2, r6, #15
 800592c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005938:	f7fa fe7e 	bl	8000638 <__aeabi_dmul>
 800593c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005940:	1136      	asrs	r6, r6, #4
 8005942:	2300      	movs	r3, #0
 8005944:	2502      	movs	r5, #2
 8005946:	2e00      	cmp	r6, #0
 8005948:	f040 8085 	bne.w	8005a56 <_dtoa_r+0x4de>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1d2      	bne.n	80058f6 <_dtoa_r+0x37e>
 8005950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 808c 	beq.w	8005a70 <_dtoa_r+0x4f8>
 8005958:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800595c:	4b99      	ldr	r3, [pc, #612]	; (8005bc4 <_dtoa_r+0x64c>)
 800595e:	2200      	movs	r2, #0
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	f7fb f8da 	bl	8000b1c <__aeabi_dcmplt>
 8005968:	2800      	cmp	r0, #0
 800596a:	f000 8081 	beq.w	8005a70 <_dtoa_r+0x4f8>
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d07d      	beq.n	8005a70 <_dtoa_r+0x4f8>
 8005974:	f1b9 0f00 	cmp.w	r9, #0
 8005978:	dd3c      	ble.n	80059f4 <_dtoa_r+0x47c>
 800597a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800597e:	9307      	str	r3, [sp, #28]
 8005980:	2200      	movs	r2, #0
 8005982:	4b91      	ldr	r3, [pc, #580]	; (8005bc8 <_dtoa_r+0x650>)
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fa fe56 	bl	8000638 <__aeabi_dmul>
 800598c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005990:	3501      	adds	r5, #1
 8005992:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005996:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800599a:	4628      	mov	r0, r5
 800599c:	f7fa fde2 	bl	8000564 <__aeabi_i2d>
 80059a0:	4632      	mov	r2, r6
 80059a2:	463b      	mov	r3, r7
 80059a4:	f7fa fe48 	bl	8000638 <__aeabi_dmul>
 80059a8:	4b88      	ldr	r3, [pc, #544]	; (8005bcc <_dtoa_r+0x654>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f7fa fc8e 	bl	80002cc <__adddf3>
 80059b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80059b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d15c      	bne.n	8005a7a <_dtoa_r+0x502>
 80059c0:	4b83      	ldr	r3, [pc, #524]	; (8005bd0 <_dtoa_r+0x658>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	4630      	mov	r0, r6
 80059c6:	4639      	mov	r1, r7
 80059c8:	f7fa fc7e 	bl	80002c8 <__aeabi_dsub>
 80059cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d0:	4606      	mov	r6, r0
 80059d2:	460f      	mov	r7, r1
 80059d4:	f7fb f8c0 	bl	8000b58 <__aeabi_dcmpgt>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f040 8296 	bne.w	8005f0a <_dtoa_r+0x992>
 80059de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80059e2:	4630      	mov	r0, r6
 80059e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fb f897 	bl	8000b1c <__aeabi_dcmplt>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f040 8288 	bne.w	8005f04 <_dtoa_r+0x98c>
 80059f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f2c0 8158 	blt.w	8005cb4 <_dtoa_r+0x73c>
 8005a04:	f1ba 0f0e 	cmp.w	sl, #14
 8005a08:	f300 8154 	bgt.w	8005cb4 <_dtoa_r+0x73c>
 8005a0c:	4b6b      	ldr	r3, [pc, #428]	; (8005bbc <_dtoa_r+0x644>)
 8005a0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f280 80e3 	bge.w	8005be4 <_dtoa_r+0x66c>
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f300 80df 	bgt.w	8005be4 <_dtoa_r+0x66c>
 8005a26:	f040 826d 	bne.w	8005f04 <_dtoa_r+0x98c>
 8005a2a:	4b69      	ldr	r3, [pc, #420]	; (8005bd0 <_dtoa_r+0x658>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fe01 	bl	8000638 <__aeabi_dmul>
 8005a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a3a:	f7fb f883 	bl	8000b44 <__aeabi_dcmpge>
 8005a3e:	9e01      	ldr	r6, [sp, #4]
 8005a40:	4637      	mov	r7, r6
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f040 8243 	bne.w	8005ece <_dtoa_r+0x956>
 8005a48:	9d00      	ldr	r5, [sp, #0]
 8005a4a:	2331      	movs	r3, #49	; 0x31
 8005a4c:	f805 3b01 	strb.w	r3, [r5], #1
 8005a50:	f10a 0a01 	add.w	sl, sl, #1
 8005a54:	e23f      	b.n	8005ed6 <_dtoa_r+0x95e>
 8005a56:	07f2      	lsls	r2, r6, #31
 8005a58:	d505      	bpl.n	8005a66 <_dtoa_r+0x4ee>
 8005a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5e:	f7fa fdeb 	bl	8000638 <__aeabi_dmul>
 8005a62:	3501      	adds	r5, #1
 8005a64:	2301      	movs	r3, #1
 8005a66:	1076      	asrs	r6, r6, #1
 8005a68:	3708      	adds	r7, #8
 8005a6a:	e76c      	b.n	8005946 <_dtoa_r+0x3ce>
 8005a6c:	2502      	movs	r5, #2
 8005a6e:	e76f      	b.n	8005950 <_dtoa_r+0x3d8>
 8005a70:	9b01      	ldr	r3, [sp, #4]
 8005a72:	f8cd a01c 	str.w	sl, [sp, #28]
 8005a76:	930c      	str	r3, [sp, #48]	; 0x30
 8005a78:	e78d      	b.n	8005996 <_dtoa_r+0x41e>
 8005a7a:	9900      	ldr	r1, [sp, #0]
 8005a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a80:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <_dtoa_r+0x644>)
 8005a82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a86:	4401      	add	r1, r0
 8005a88:	9102      	str	r1, [sp, #8]
 8005a8a:	9908      	ldr	r1, [sp, #32]
 8005a8c:	eeb0 8a47 	vmov.f32	s16, s14
 8005a90:	eef0 8a67 	vmov.f32	s17, s15
 8005a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d045      	beq.n	8005b2c <_dtoa_r+0x5b4>
 8005aa0:	494c      	ldr	r1, [pc, #304]	; (8005bd4 <_dtoa_r+0x65c>)
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f7fa fef2 	bl	800088c <__aeabi_ddiv>
 8005aa8:	ec53 2b18 	vmov	r2, r3, d8
 8005aac:	f7fa fc0c 	bl	80002c8 <__aeabi_dsub>
 8005ab0:	9d00      	ldr	r5, [sp, #0]
 8005ab2:	ec41 0b18 	vmov	d8, r0, r1
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7fb f86d 	bl	8000b98 <__aeabi_d2iz>
 8005abe:	900c      	str	r0, [sp, #48]	; 0x30
 8005ac0:	f7fa fd50 	bl	8000564 <__aeabi_i2d>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4630      	mov	r0, r6
 8005aca:	4639      	mov	r1, r7
 8005acc:	f7fa fbfc 	bl	80002c8 <__aeabi_dsub>
 8005ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ad2:	3330      	adds	r3, #48	; 0x30
 8005ad4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ad8:	ec53 2b18 	vmov	r2, r3, d8
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	f7fb f81c 	bl	8000b1c <__aeabi_dcmplt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d165      	bne.n	8005bb4 <_dtoa_r+0x63c>
 8005ae8:	4632      	mov	r2, r6
 8005aea:	463b      	mov	r3, r7
 8005aec:	4935      	ldr	r1, [pc, #212]	; (8005bc4 <_dtoa_r+0x64c>)
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7fa fbea 	bl	80002c8 <__aeabi_dsub>
 8005af4:	ec53 2b18 	vmov	r2, r3, d8
 8005af8:	f7fb f810 	bl	8000b1c <__aeabi_dcmplt>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f040 80b9 	bne.w	8005c74 <_dtoa_r+0x6fc>
 8005b02:	9b02      	ldr	r3, [sp, #8]
 8005b04:	429d      	cmp	r5, r3
 8005b06:	f43f af75 	beq.w	80059f4 <_dtoa_r+0x47c>
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <_dtoa_r+0x650>)
 8005b0c:	ec51 0b18 	vmov	r0, r1, d8
 8005b10:	2200      	movs	r2, #0
 8005b12:	f7fa fd91 	bl	8000638 <__aeabi_dmul>
 8005b16:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <_dtoa_r+0x650>)
 8005b18:	ec41 0b18 	vmov	d8, r0, r1
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fd89 	bl	8000638 <__aeabi_dmul>
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	e7c4      	b.n	8005ab6 <_dtoa_r+0x53e>
 8005b2c:	ec51 0b17 	vmov	r0, r1, d7
 8005b30:	f7fa fd82 	bl	8000638 <__aeabi_dmul>
 8005b34:	9b02      	ldr	r3, [sp, #8]
 8005b36:	9d00      	ldr	r5, [sp, #0]
 8005b38:	930c      	str	r3, [sp, #48]	; 0x30
 8005b3a:	ec41 0b18 	vmov	d8, r0, r1
 8005b3e:	4639      	mov	r1, r7
 8005b40:	4630      	mov	r0, r6
 8005b42:	f7fb f829 	bl	8000b98 <__aeabi_d2iz>
 8005b46:	9011      	str	r0, [sp, #68]	; 0x44
 8005b48:	f7fa fd0c 	bl	8000564 <__aeabi_i2d>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4630      	mov	r0, r6
 8005b52:	4639      	mov	r1, r7
 8005b54:	f7fa fbb8 	bl	80002c8 <__aeabi_dsub>
 8005b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b5a:	3330      	adds	r3, #48	; 0x30
 8005b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8005b60:	9b02      	ldr	r3, [sp, #8]
 8005b62:	429d      	cmp	r5, r3
 8005b64:	4606      	mov	r6, r0
 8005b66:	460f      	mov	r7, r1
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	d134      	bne.n	8005bd8 <_dtoa_r+0x660>
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <_dtoa_r+0x65c>)
 8005b70:	ec51 0b18 	vmov	r0, r1, d8
 8005b74:	f7fa fbaa 	bl	80002cc <__adddf3>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa ffea 	bl	8000b58 <__aeabi_dcmpgt>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d175      	bne.n	8005c74 <_dtoa_r+0x6fc>
 8005b88:	ec53 2b18 	vmov	r2, r3, d8
 8005b8c:	4911      	ldr	r1, [pc, #68]	; (8005bd4 <_dtoa_r+0x65c>)
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f7fa fb9a 	bl	80002c8 <__aeabi_dsub>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa ffbe 	bl	8000b1c <__aeabi_dcmplt>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	f43f af27 	beq.w	80059f4 <_dtoa_r+0x47c>
 8005ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ba8:	1e6b      	subs	r3, r5, #1
 8005baa:	930c      	str	r3, [sp, #48]	; 0x30
 8005bac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bb0:	2b30      	cmp	r3, #48	; 0x30
 8005bb2:	d0f8      	beq.n	8005ba6 <_dtoa_r+0x62e>
 8005bb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005bb8:	e04a      	b.n	8005c50 <_dtoa_r+0x6d8>
 8005bba:	bf00      	nop
 8005bbc:	0807b7a0 	.word	0x0807b7a0
 8005bc0:	0807b778 	.word	0x0807b778
 8005bc4:	3ff00000 	.word	0x3ff00000
 8005bc8:	40240000 	.word	0x40240000
 8005bcc:	401c0000 	.word	0x401c0000
 8005bd0:	40140000 	.word	0x40140000
 8005bd4:	3fe00000 	.word	0x3fe00000
 8005bd8:	4baf      	ldr	r3, [pc, #700]	; (8005e98 <_dtoa_r+0x920>)
 8005bda:	f7fa fd2d 	bl	8000638 <__aeabi_dmul>
 8005bde:	4606      	mov	r6, r0
 8005be0:	460f      	mov	r7, r1
 8005be2:	e7ac      	b.n	8005b3e <_dtoa_r+0x5c6>
 8005be4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005be8:	9d00      	ldr	r5, [sp, #0]
 8005bea:	4642      	mov	r2, r8
 8005bec:	464b      	mov	r3, r9
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa fe4b 	bl	800088c <__aeabi_ddiv>
 8005bf6:	f7fa ffcf 	bl	8000b98 <__aeabi_d2iz>
 8005bfa:	9002      	str	r0, [sp, #8]
 8005bfc:	f7fa fcb2 	bl	8000564 <__aeabi_i2d>
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	f7fa fd18 	bl	8000638 <__aeabi_dmul>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	4639      	mov	r1, r7
 8005c10:	f7fa fb5a 	bl	80002c8 <__aeabi_dsub>
 8005c14:	9e02      	ldr	r6, [sp, #8]
 8005c16:	9f01      	ldr	r7, [sp, #4]
 8005c18:	3630      	adds	r6, #48	; 0x30
 8005c1a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c1e:	9e00      	ldr	r6, [sp, #0]
 8005c20:	1bae      	subs	r6, r5, r6
 8005c22:	42b7      	cmp	r7, r6
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	d137      	bne.n	8005c9a <_dtoa_r+0x722>
 8005c2a:	f7fa fb4f 	bl	80002cc <__adddf3>
 8005c2e:	4642      	mov	r2, r8
 8005c30:	464b      	mov	r3, r9
 8005c32:	4606      	mov	r6, r0
 8005c34:	460f      	mov	r7, r1
 8005c36:	f7fa ff8f 	bl	8000b58 <__aeabi_dcmpgt>
 8005c3a:	b9c8      	cbnz	r0, 8005c70 <_dtoa_r+0x6f8>
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	4630      	mov	r0, r6
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa ff60 	bl	8000b08 <__aeabi_dcmpeq>
 8005c48:	b110      	cbz	r0, 8005c50 <_dtoa_r+0x6d8>
 8005c4a:	9b02      	ldr	r3, [sp, #8]
 8005c4c:	07d9      	lsls	r1, r3, #31
 8005c4e:	d40f      	bmi.n	8005c70 <_dtoa_r+0x6f8>
 8005c50:	4620      	mov	r0, r4
 8005c52:	4659      	mov	r1, fp
 8005c54:	f000 facc 	bl	80061f0 <_Bfree>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	702b      	strb	r3, [r5, #0]
 8005c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c5e:	f10a 0001 	add.w	r0, sl, #1
 8005c62:	6018      	str	r0, [r3, #0]
 8005c64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f43f acd8 	beq.w	800561c <_dtoa_r+0xa4>
 8005c6c:	601d      	str	r5, [r3, #0]
 8005c6e:	e4d5      	b.n	800561c <_dtoa_r+0xa4>
 8005c70:	f8cd a01c 	str.w	sl, [sp, #28]
 8005c74:	462b      	mov	r3, r5
 8005c76:	461d      	mov	r5, r3
 8005c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c7c:	2a39      	cmp	r2, #57	; 0x39
 8005c7e:	d108      	bne.n	8005c92 <_dtoa_r+0x71a>
 8005c80:	9a00      	ldr	r2, [sp, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d1f7      	bne.n	8005c76 <_dtoa_r+0x6fe>
 8005c86:	9a07      	ldr	r2, [sp, #28]
 8005c88:	9900      	ldr	r1, [sp, #0]
 8005c8a:	3201      	adds	r2, #1
 8005c8c:	9207      	str	r2, [sp, #28]
 8005c8e:	2230      	movs	r2, #48	; 0x30
 8005c90:	700a      	strb	r2, [r1, #0]
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	3201      	adds	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	e78c      	b.n	8005bb4 <_dtoa_r+0x63c>
 8005c9a:	4b7f      	ldr	r3, [pc, #508]	; (8005e98 <_dtoa_r+0x920>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f7fa fccb 	bl	8000638 <__aeabi_dmul>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	f7fa ff2d 	bl	8000b08 <__aeabi_dcmpeq>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d09b      	beq.n	8005bea <_dtoa_r+0x672>
 8005cb2:	e7cd      	b.n	8005c50 <_dtoa_r+0x6d8>
 8005cb4:	9a08      	ldr	r2, [sp, #32]
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	f000 80c4 	beq.w	8005e44 <_dtoa_r+0x8cc>
 8005cbc:	9a05      	ldr	r2, [sp, #20]
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	f300 80a8 	bgt.w	8005e14 <_dtoa_r+0x89c>
 8005cc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	f000 80a0 	beq.w	8005e0c <_dtoa_r+0x894>
 8005ccc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cd0:	9e06      	ldr	r6, [sp, #24]
 8005cd2:	4645      	mov	r5, r8
 8005cd4:	9a04      	ldr	r2, [sp, #16]
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	441a      	add	r2, r3
 8005cda:	4620      	mov	r0, r4
 8005cdc:	4498      	add	r8, r3
 8005cde:	9204      	str	r2, [sp, #16]
 8005ce0:	f000 fb42 	bl	8006368 <__i2b>
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	dd0b      	ble.n	8005d02 <_dtoa_r+0x78a>
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dd08      	ble.n	8005d02 <_dtoa_r+0x78a>
 8005cf0:	42ab      	cmp	r3, r5
 8005cf2:	9a04      	ldr	r2, [sp, #16]
 8005cf4:	bfa8      	it	ge
 8005cf6:	462b      	movge	r3, r5
 8005cf8:	eba8 0803 	sub.w	r8, r8, r3
 8005cfc:	1aed      	subs	r5, r5, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	b1fb      	cbz	r3, 8005d46 <_dtoa_r+0x7ce>
 8005d06:	9b08      	ldr	r3, [sp, #32]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 809f 	beq.w	8005e4c <_dtoa_r+0x8d4>
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	dd11      	ble.n	8005d36 <_dtoa_r+0x7be>
 8005d12:	4639      	mov	r1, r7
 8005d14:	4632      	mov	r2, r6
 8005d16:	4620      	mov	r0, r4
 8005d18:	f000 fbe2 	bl	80064e0 <__pow5mult>
 8005d1c:	465a      	mov	r2, fp
 8005d1e:	4601      	mov	r1, r0
 8005d20:	4607      	mov	r7, r0
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 fb36 	bl	8006394 <__multiply>
 8005d28:	4659      	mov	r1, fp
 8005d2a:	9007      	str	r0, [sp, #28]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 fa5f 	bl	80061f0 <_Bfree>
 8005d32:	9b07      	ldr	r3, [sp, #28]
 8005d34:	469b      	mov	fp, r3
 8005d36:	9b06      	ldr	r3, [sp, #24]
 8005d38:	1b9a      	subs	r2, r3, r6
 8005d3a:	d004      	beq.n	8005d46 <_dtoa_r+0x7ce>
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 fbce 	bl	80064e0 <__pow5mult>
 8005d44:	4683      	mov	fp, r0
 8005d46:	2101      	movs	r1, #1
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fb0d 	bl	8006368 <__i2b>
 8005d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	4606      	mov	r6, r0
 8005d54:	dd7c      	ble.n	8005e50 <_dtoa_r+0x8d8>
 8005d56:	461a      	mov	r2, r3
 8005d58:	4601      	mov	r1, r0
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fbc0 	bl	80064e0 <__pow5mult>
 8005d60:	9b05      	ldr	r3, [sp, #20]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	4606      	mov	r6, r0
 8005d66:	dd76      	ble.n	8005e56 <_dtoa_r+0x8de>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9306      	str	r3, [sp, #24]
 8005d6c:	6933      	ldr	r3, [r6, #16]
 8005d6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d72:	6918      	ldr	r0, [r3, #16]
 8005d74:	f000 faa8 	bl	80062c8 <__hi0bits>
 8005d78:	f1c0 0020 	rsb	r0, r0, #32
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	4418      	add	r0, r3
 8005d80:	f010 001f 	ands.w	r0, r0, #31
 8005d84:	f000 8086 	beq.w	8005e94 <_dtoa_r+0x91c>
 8005d88:	f1c0 0320 	rsb	r3, r0, #32
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	dd7f      	ble.n	8005e90 <_dtoa_r+0x918>
 8005d90:	f1c0 001c 	rsb	r0, r0, #28
 8005d94:	9b04      	ldr	r3, [sp, #16]
 8005d96:	4403      	add	r3, r0
 8005d98:	4480      	add	r8, r0
 8005d9a:	4405      	add	r5, r0
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	f1b8 0f00 	cmp.w	r8, #0
 8005da2:	dd05      	ble.n	8005db0 <_dtoa_r+0x838>
 8005da4:	4659      	mov	r1, fp
 8005da6:	4642      	mov	r2, r8
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fbf3 	bl	8006594 <__lshift>
 8005dae:	4683      	mov	fp, r0
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	dd05      	ble.n	8005dc2 <_dtoa_r+0x84a>
 8005db6:	4631      	mov	r1, r6
 8005db8:	461a      	mov	r2, r3
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fbea 	bl	8006594 <__lshift>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d069      	beq.n	8005e9c <_dtoa_r+0x924>
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4658      	mov	r0, fp
 8005dcc:	f000 fc4e 	bl	800666c <__mcmp>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	da63      	bge.n	8005e9c <_dtoa_r+0x924>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	220a      	movs	r2, #10
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 fa2a 	bl	8006234 <__multadd>
 8005de0:	9b08      	ldr	r3, [sp, #32]
 8005de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005de6:	4683      	mov	fp, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 818f 	beq.w	800610c <_dtoa_r+0xb94>
 8005dee:	4639      	mov	r1, r7
 8005df0:	2300      	movs	r3, #0
 8005df2:	220a      	movs	r2, #10
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 fa1d 	bl	8006234 <__multadd>
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	4607      	mov	r7, r0
 8005e00:	f300 808e 	bgt.w	8005f20 <_dtoa_r+0x9a8>
 8005e04:	9b05      	ldr	r3, [sp, #20]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	dc50      	bgt.n	8005eac <_dtoa_r+0x934>
 8005e0a:	e089      	b.n	8005f20 <_dtoa_r+0x9a8>
 8005e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e12:	e75d      	b.n	8005cd0 <_dtoa_r+0x758>
 8005e14:	9b01      	ldr	r3, [sp, #4]
 8005e16:	1e5e      	subs	r6, r3, #1
 8005e18:	9b06      	ldr	r3, [sp, #24]
 8005e1a:	42b3      	cmp	r3, r6
 8005e1c:	bfbf      	itttt	lt
 8005e1e:	9b06      	ldrlt	r3, [sp, #24]
 8005e20:	9606      	strlt	r6, [sp, #24]
 8005e22:	1af2      	sublt	r2, r6, r3
 8005e24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005e26:	bfb6      	itet	lt
 8005e28:	189b      	addlt	r3, r3, r2
 8005e2a:	1b9e      	subge	r6, r3, r6
 8005e2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	bfb8      	it	lt
 8005e32:	2600      	movlt	r6, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bfb5      	itete	lt
 8005e38:	eba8 0503 	sublt.w	r5, r8, r3
 8005e3c:	9b01      	ldrge	r3, [sp, #4]
 8005e3e:	2300      	movlt	r3, #0
 8005e40:	4645      	movge	r5, r8
 8005e42:	e747      	b.n	8005cd4 <_dtoa_r+0x75c>
 8005e44:	9e06      	ldr	r6, [sp, #24]
 8005e46:	9f08      	ldr	r7, [sp, #32]
 8005e48:	4645      	mov	r5, r8
 8005e4a:	e74c      	b.n	8005ce6 <_dtoa_r+0x76e>
 8005e4c:	9a06      	ldr	r2, [sp, #24]
 8005e4e:	e775      	b.n	8005d3c <_dtoa_r+0x7c4>
 8005e50:	9b05      	ldr	r3, [sp, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	dc18      	bgt.n	8005e88 <_dtoa_r+0x910>
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	b9b3      	cbnz	r3, 8005e88 <_dtoa_r+0x910>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e60:	b9a3      	cbnz	r3, 8005e8c <_dtoa_r+0x914>
 8005e62:	9b03      	ldr	r3, [sp, #12]
 8005e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	0d1b      	lsrs	r3, r3, #20
 8005e6a:	051b      	lsls	r3, r3, #20
 8005e6c:	b12b      	cbz	r3, 8005e7a <_dtoa_r+0x902>
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	3301      	adds	r3, #1
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	f108 0801 	add.w	r8, r8, #1
 8005e78:	2301      	movs	r3, #1
 8005e7a:	9306      	str	r3, [sp, #24]
 8005e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f47f af74 	bne.w	8005d6c <_dtoa_r+0x7f4>
 8005e84:	2001      	movs	r0, #1
 8005e86:	e779      	b.n	8005d7c <_dtoa_r+0x804>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e7f6      	b.n	8005e7a <_dtoa_r+0x902>
 8005e8c:	9b02      	ldr	r3, [sp, #8]
 8005e8e:	e7f4      	b.n	8005e7a <_dtoa_r+0x902>
 8005e90:	d085      	beq.n	8005d9e <_dtoa_r+0x826>
 8005e92:	4618      	mov	r0, r3
 8005e94:	301c      	adds	r0, #28
 8005e96:	e77d      	b.n	8005d94 <_dtoa_r+0x81c>
 8005e98:	40240000 	.word	0x40240000
 8005e9c:	9b01      	ldr	r3, [sp, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dc38      	bgt.n	8005f14 <_dtoa_r+0x99c>
 8005ea2:	9b05      	ldr	r3, [sp, #20]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	dd35      	ble.n	8005f14 <_dtoa_r+0x99c>
 8005ea8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005eac:	f1b9 0f00 	cmp.w	r9, #0
 8005eb0:	d10d      	bne.n	8005ece <_dtoa_r+0x956>
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 f9bb 	bl	8006234 <__multadd>
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	4658      	mov	r0, fp
 8005ec4:	f000 fbd2 	bl	800666c <__mcmp>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f73f adbd 	bgt.w	8005a48 <_dtoa_r+0x4d0>
 8005ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed0:	9d00      	ldr	r5, [sp, #0]
 8005ed2:	ea6f 0a03 	mvn.w	sl, r3
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	4631      	mov	r1, r6
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 f987 	bl	80061f0 <_Bfree>
 8005ee2:	2f00      	cmp	r7, #0
 8005ee4:	f43f aeb4 	beq.w	8005c50 <_dtoa_r+0x6d8>
 8005ee8:	f1b8 0f00 	cmp.w	r8, #0
 8005eec:	d005      	beq.n	8005efa <_dtoa_r+0x982>
 8005eee:	45b8      	cmp	r8, r7
 8005ef0:	d003      	beq.n	8005efa <_dtoa_r+0x982>
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 f97b 	bl	80061f0 <_Bfree>
 8005efa:	4639      	mov	r1, r7
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 f977 	bl	80061f0 <_Bfree>
 8005f02:	e6a5      	b.n	8005c50 <_dtoa_r+0x6d8>
 8005f04:	2600      	movs	r6, #0
 8005f06:	4637      	mov	r7, r6
 8005f08:	e7e1      	b.n	8005ece <_dtoa_r+0x956>
 8005f0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005f0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f10:	4637      	mov	r7, r6
 8005f12:	e599      	b.n	8005a48 <_dtoa_r+0x4d0>
 8005f14:	9b08      	ldr	r3, [sp, #32]
 8005f16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80fd 	beq.w	800611a <_dtoa_r+0xba2>
 8005f20:	2d00      	cmp	r5, #0
 8005f22:	dd05      	ble.n	8005f30 <_dtoa_r+0x9b8>
 8005f24:	4639      	mov	r1, r7
 8005f26:	462a      	mov	r2, r5
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fb33 	bl	8006594 <__lshift>
 8005f2e:	4607      	mov	r7, r0
 8005f30:	9b06      	ldr	r3, [sp, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d05c      	beq.n	8005ff0 <_dtoa_r+0xa78>
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 f919 	bl	8006170 <_Balloc>
 8005f3e:	4605      	mov	r5, r0
 8005f40:	b928      	cbnz	r0, 8005f4e <_dtoa_r+0x9d6>
 8005f42:	4b80      	ldr	r3, [pc, #512]	; (8006144 <_dtoa_r+0xbcc>)
 8005f44:	4602      	mov	r2, r0
 8005f46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f4a:	f7ff bb2e 	b.w	80055aa <_dtoa_r+0x32>
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	3202      	adds	r2, #2
 8005f52:	0092      	lsls	r2, r2, #2
 8005f54:	f107 010c 	add.w	r1, r7, #12
 8005f58:	300c      	adds	r0, #12
 8005f5a:	f7fe fd25 	bl	80049a8 <memcpy>
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4629      	mov	r1, r5
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 fb16 	bl	8006594 <__lshift>
 8005f68:	9b00      	ldr	r3, [sp, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	444b      	add	r3, r9
 8005f72:	9307      	str	r3, [sp, #28]
 8005f74:	9b02      	ldr	r3, [sp, #8]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	46b8      	mov	r8, r7
 8005f7c:	9306      	str	r3, [sp, #24]
 8005f7e:	4607      	mov	r7, r0
 8005f80:	9b01      	ldr	r3, [sp, #4]
 8005f82:	4631      	mov	r1, r6
 8005f84:	3b01      	subs	r3, #1
 8005f86:	4658      	mov	r0, fp
 8005f88:	9302      	str	r3, [sp, #8]
 8005f8a:	f7ff fa67 	bl	800545c <quorem>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	3330      	adds	r3, #48	; 0x30
 8005f92:	9004      	str	r0, [sp, #16]
 8005f94:	4641      	mov	r1, r8
 8005f96:	4658      	mov	r0, fp
 8005f98:	9308      	str	r3, [sp, #32]
 8005f9a:	f000 fb67 	bl	800666c <__mcmp>
 8005f9e:	463a      	mov	r2, r7
 8005fa0:	4681      	mov	r9, r0
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fb7d 	bl	80066a4 <__mdiff>
 8005faa:	68c2      	ldr	r2, [r0, #12]
 8005fac:	9b08      	ldr	r3, [sp, #32]
 8005fae:	4605      	mov	r5, r0
 8005fb0:	bb02      	cbnz	r2, 8005ff4 <_dtoa_r+0xa7c>
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	4658      	mov	r0, fp
 8005fb6:	f000 fb59 	bl	800666c <__mcmp>
 8005fba:	9b08      	ldr	r3, [sp, #32]
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005fc6:	f000 f913 	bl	80061f0 <_Bfree>
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fce:	9d01      	ldr	r5, [sp, #4]
 8005fd0:	ea43 0102 	orr.w	r1, r3, r2
 8005fd4:	9b06      	ldr	r3, [sp, #24]
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	9b08      	ldr	r3, [sp, #32]
 8005fda:	d10d      	bne.n	8005ff8 <_dtoa_r+0xa80>
 8005fdc:	2b39      	cmp	r3, #57	; 0x39
 8005fde:	d029      	beq.n	8006034 <_dtoa_r+0xabc>
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	dd01      	ble.n	8005fea <_dtoa_r+0xa72>
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	3331      	adds	r3, #49	; 0x31
 8005fea:	9a02      	ldr	r2, [sp, #8]
 8005fec:	7013      	strb	r3, [r2, #0]
 8005fee:	e774      	b.n	8005eda <_dtoa_r+0x962>
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	e7b9      	b.n	8005f68 <_dtoa_r+0x9f0>
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	e7e2      	b.n	8005fbe <_dtoa_r+0xa46>
 8005ff8:	f1b9 0f00 	cmp.w	r9, #0
 8005ffc:	db06      	blt.n	800600c <_dtoa_r+0xa94>
 8005ffe:	9905      	ldr	r1, [sp, #20]
 8006000:	ea41 0909 	orr.w	r9, r1, r9
 8006004:	9906      	ldr	r1, [sp, #24]
 8006006:	ea59 0101 	orrs.w	r1, r9, r1
 800600a:	d120      	bne.n	800604e <_dtoa_r+0xad6>
 800600c:	2a00      	cmp	r2, #0
 800600e:	ddec      	ble.n	8005fea <_dtoa_r+0xa72>
 8006010:	4659      	mov	r1, fp
 8006012:	2201      	movs	r2, #1
 8006014:	4620      	mov	r0, r4
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	f000 fabc 	bl	8006594 <__lshift>
 800601c:	4631      	mov	r1, r6
 800601e:	4683      	mov	fp, r0
 8006020:	f000 fb24 	bl	800666c <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	dc02      	bgt.n	8006030 <_dtoa_r+0xab8>
 800602a:	d1de      	bne.n	8005fea <_dtoa_r+0xa72>
 800602c:	07da      	lsls	r2, r3, #31
 800602e:	d5dc      	bpl.n	8005fea <_dtoa_r+0xa72>
 8006030:	2b39      	cmp	r3, #57	; 0x39
 8006032:	d1d8      	bne.n	8005fe6 <_dtoa_r+0xa6e>
 8006034:	9a02      	ldr	r2, [sp, #8]
 8006036:	2339      	movs	r3, #57	; 0x39
 8006038:	7013      	strb	r3, [r2, #0]
 800603a:	462b      	mov	r3, r5
 800603c:	461d      	mov	r5, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006044:	2a39      	cmp	r2, #57	; 0x39
 8006046:	d050      	beq.n	80060ea <_dtoa_r+0xb72>
 8006048:	3201      	adds	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e745      	b.n	8005eda <_dtoa_r+0x962>
 800604e:	2a00      	cmp	r2, #0
 8006050:	dd03      	ble.n	800605a <_dtoa_r+0xae2>
 8006052:	2b39      	cmp	r3, #57	; 0x39
 8006054:	d0ee      	beq.n	8006034 <_dtoa_r+0xabc>
 8006056:	3301      	adds	r3, #1
 8006058:	e7c7      	b.n	8005fea <_dtoa_r+0xa72>
 800605a:	9a01      	ldr	r2, [sp, #4]
 800605c:	9907      	ldr	r1, [sp, #28]
 800605e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006062:	428a      	cmp	r2, r1
 8006064:	d02a      	beq.n	80060bc <_dtoa_r+0xb44>
 8006066:	4659      	mov	r1, fp
 8006068:	2300      	movs	r3, #0
 800606a:	220a      	movs	r2, #10
 800606c:	4620      	mov	r0, r4
 800606e:	f000 f8e1 	bl	8006234 <__multadd>
 8006072:	45b8      	cmp	r8, r7
 8006074:	4683      	mov	fp, r0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	f04f 020a 	mov.w	r2, #10
 800607e:	4641      	mov	r1, r8
 8006080:	4620      	mov	r0, r4
 8006082:	d107      	bne.n	8006094 <_dtoa_r+0xb1c>
 8006084:	f000 f8d6 	bl	8006234 <__multadd>
 8006088:	4680      	mov	r8, r0
 800608a:	4607      	mov	r7, r0
 800608c:	9b01      	ldr	r3, [sp, #4]
 800608e:	3301      	adds	r3, #1
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	e775      	b.n	8005f80 <_dtoa_r+0xa08>
 8006094:	f000 f8ce 	bl	8006234 <__multadd>
 8006098:	4639      	mov	r1, r7
 800609a:	4680      	mov	r8, r0
 800609c:	2300      	movs	r3, #0
 800609e:	220a      	movs	r2, #10
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f8c7 	bl	8006234 <__multadd>
 80060a6:	4607      	mov	r7, r0
 80060a8:	e7f0      	b.n	800608c <_dtoa_r+0xb14>
 80060aa:	f1b9 0f00 	cmp.w	r9, #0
 80060ae:	9a00      	ldr	r2, [sp, #0]
 80060b0:	bfcc      	ite	gt
 80060b2:	464d      	movgt	r5, r9
 80060b4:	2501      	movle	r5, #1
 80060b6:	4415      	add	r5, r2
 80060b8:	f04f 0800 	mov.w	r8, #0
 80060bc:	4659      	mov	r1, fp
 80060be:	2201      	movs	r2, #1
 80060c0:	4620      	mov	r0, r4
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	f000 fa66 	bl	8006594 <__lshift>
 80060c8:	4631      	mov	r1, r6
 80060ca:	4683      	mov	fp, r0
 80060cc:	f000 face 	bl	800666c <__mcmp>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	dcb2      	bgt.n	800603a <_dtoa_r+0xac2>
 80060d4:	d102      	bne.n	80060dc <_dtoa_r+0xb64>
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	07db      	lsls	r3, r3, #31
 80060da:	d4ae      	bmi.n	800603a <_dtoa_r+0xac2>
 80060dc:	462b      	mov	r3, r5
 80060de:	461d      	mov	r5, r3
 80060e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060e4:	2a30      	cmp	r2, #48	; 0x30
 80060e6:	d0fa      	beq.n	80060de <_dtoa_r+0xb66>
 80060e8:	e6f7      	b.n	8005eda <_dtoa_r+0x962>
 80060ea:	9a00      	ldr	r2, [sp, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d1a5      	bne.n	800603c <_dtoa_r+0xac4>
 80060f0:	f10a 0a01 	add.w	sl, sl, #1
 80060f4:	2331      	movs	r3, #49	; 0x31
 80060f6:	e779      	b.n	8005fec <_dtoa_r+0xa74>
 80060f8:	4b13      	ldr	r3, [pc, #76]	; (8006148 <_dtoa_r+0xbd0>)
 80060fa:	f7ff baaf 	b.w	800565c <_dtoa_r+0xe4>
 80060fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006100:	2b00      	cmp	r3, #0
 8006102:	f47f aa86 	bne.w	8005612 <_dtoa_r+0x9a>
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <_dtoa_r+0xbd4>)
 8006108:	f7ff baa8 	b.w	800565c <_dtoa_r+0xe4>
 800610c:	f1b9 0f00 	cmp.w	r9, #0
 8006110:	dc03      	bgt.n	800611a <_dtoa_r+0xba2>
 8006112:	9b05      	ldr	r3, [sp, #20]
 8006114:	2b02      	cmp	r3, #2
 8006116:	f73f aec9 	bgt.w	8005eac <_dtoa_r+0x934>
 800611a:	9d00      	ldr	r5, [sp, #0]
 800611c:	4631      	mov	r1, r6
 800611e:	4658      	mov	r0, fp
 8006120:	f7ff f99c 	bl	800545c <quorem>
 8006124:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006128:	f805 3b01 	strb.w	r3, [r5], #1
 800612c:	9a00      	ldr	r2, [sp, #0]
 800612e:	1aaa      	subs	r2, r5, r2
 8006130:	4591      	cmp	r9, r2
 8006132:	ddba      	ble.n	80060aa <_dtoa_r+0xb32>
 8006134:	4659      	mov	r1, fp
 8006136:	2300      	movs	r3, #0
 8006138:	220a      	movs	r2, #10
 800613a:	4620      	mov	r0, r4
 800613c:	f000 f87a 	bl	8006234 <__multadd>
 8006140:	4683      	mov	fp, r0
 8006142:	e7eb      	b.n	800611c <_dtoa_r+0xba4>
 8006144:	0807b703 	.word	0x0807b703
 8006148:	0807b65c 	.word	0x0807b65c
 800614c:	0807b680 	.word	0x0807b680

08006150 <_localeconv_r>:
 8006150:	4800      	ldr	r0, [pc, #0]	; (8006154 <_localeconv_r+0x4>)
 8006152:	4770      	bx	lr
 8006154:	20000830 	.word	0x20000830

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_lock+0x8>)
 800615a:	f000 bd48 	b.w	8006bee <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	200009fc 	.word	0x200009fc

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_unlock+0x8>)
 8006166:	f000 bd43 	b.w	8006bf0 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	200009fc 	.word	0x200009fc

08006170 <_Balloc>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006174:	4604      	mov	r4, r0
 8006176:	460d      	mov	r5, r1
 8006178:	b976      	cbnz	r6, 8006198 <_Balloc+0x28>
 800617a:	2010      	movs	r0, #16
 800617c:	f7fe fc0c 	bl	8004998 <malloc>
 8006180:	4602      	mov	r2, r0
 8006182:	6260      	str	r0, [r4, #36]	; 0x24
 8006184:	b920      	cbnz	r0, 8006190 <_Balloc+0x20>
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <_Balloc+0x78>)
 8006188:	4818      	ldr	r0, [pc, #96]	; (80061ec <_Balloc+0x7c>)
 800618a:	2166      	movs	r1, #102	; 0x66
 800618c:	f000 fcfe 	bl	8006b8c <__assert_func>
 8006190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006194:	6006      	str	r6, [r0, #0]
 8006196:	60c6      	str	r6, [r0, #12]
 8006198:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800619a:	68f3      	ldr	r3, [r6, #12]
 800619c:	b183      	cbz	r3, 80061c0 <_Balloc+0x50>
 800619e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061a6:	b9b8      	cbnz	r0, 80061d8 <_Balloc+0x68>
 80061a8:	2101      	movs	r1, #1
 80061aa:	fa01 f605 	lsl.w	r6, r1, r5
 80061ae:	1d72      	adds	r2, r6, #5
 80061b0:	0092      	lsls	r2, r2, #2
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fb5a 	bl	800686c <_calloc_r>
 80061b8:	b160      	cbz	r0, 80061d4 <_Balloc+0x64>
 80061ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061be:	e00e      	b.n	80061de <_Balloc+0x6e>
 80061c0:	2221      	movs	r2, #33	; 0x21
 80061c2:	2104      	movs	r1, #4
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fb51 	bl	800686c <_calloc_r>
 80061ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061cc:	60f0      	str	r0, [r6, #12]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e4      	bne.n	800619e <_Balloc+0x2e>
 80061d4:	2000      	movs	r0, #0
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	6802      	ldr	r2, [r0, #0]
 80061da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061de:	2300      	movs	r3, #0
 80061e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061e4:	e7f7      	b.n	80061d6 <_Balloc+0x66>
 80061e6:	bf00      	nop
 80061e8:	0807b68d 	.word	0x0807b68d
 80061ec:	0807b714 	.word	0x0807b714

080061f0 <_Bfree>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b976      	cbnz	r6, 8006218 <_Bfree+0x28>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7fe fbcc 	bl	8004998 <malloc>
 8006200:	4602      	mov	r2, r0
 8006202:	6268      	str	r0, [r5, #36]	; 0x24
 8006204:	b920      	cbnz	r0, 8006210 <_Bfree+0x20>
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <_Bfree+0x3c>)
 8006208:	4809      	ldr	r0, [pc, #36]	; (8006230 <_Bfree+0x40>)
 800620a:	218a      	movs	r1, #138	; 0x8a
 800620c:	f000 fcbe 	bl	8006b8c <__assert_func>
 8006210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006214:	6006      	str	r6, [r0, #0]
 8006216:	60c6      	str	r6, [r0, #12]
 8006218:	b13c      	cbz	r4, 800622a <_Bfree+0x3a>
 800621a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006224:	6021      	str	r1, [r4, #0]
 8006226:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	0807b68d 	.word	0x0807b68d
 8006230:	0807b714 	.word	0x0807b714

08006234 <__multadd>:
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	690e      	ldr	r6, [r1, #16]
 800623a:	4607      	mov	r7, r0
 800623c:	4698      	mov	r8, r3
 800623e:	460c      	mov	r4, r1
 8006240:	f101 0014 	add.w	r0, r1, #20
 8006244:	2300      	movs	r3, #0
 8006246:	6805      	ldr	r5, [r0, #0]
 8006248:	b2a9      	uxth	r1, r5
 800624a:	fb02 8101 	mla	r1, r2, r1, r8
 800624e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006252:	0c2d      	lsrs	r5, r5, #16
 8006254:	fb02 c505 	mla	r5, r2, r5, ip
 8006258:	b289      	uxth	r1, r1
 800625a:	3301      	adds	r3, #1
 800625c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006260:	429e      	cmp	r6, r3
 8006262:	f840 1b04 	str.w	r1, [r0], #4
 8006266:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800626a:	dcec      	bgt.n	8006246 <__multadd+0x12>
 800626c:	f1b8 0f00 	cmp.w	r8, #0
 8006270:	d022      	beq.n	80062b8 <__multadd+0x84>
 8006272:	68a3      	ldr	r3, [r4, #8]
 8006274:	42b3      	cmp	r3, r6
 8006276:	dc19      	bgt.n	80062ac <__multadd+0x78>
 8006278:	6861      	ldr	r1, [r4, #4]
 800627a:	4638      	mov	r0, r7
 800627c:	3101      	adds	r1, #1
 800627e:	f7ff ff77 	bl	8006170 <_Balloc>
 8006282:	4605      	mov	r5, r0
 8006284:	b928      	cbnz	r0, 8006292 <__multadd+0x5e>
 8006286:	4602      	mov	r2, r0
 8006288:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <__multadd+0x8c>)
 800628a:	480e      	ldr	r0, [pc, #56]	; (80062c4 <__multadd+0x90>)
 800628c:	21b5      	movs	r1, #181	; 0xb5
 800628e:	f000 fc7d 	bl	8006b8c <__assert_func>
 8006292:	6922      	ldr	r2, [r4, #16]
 8006294:	3202      	adds	r2, #2
 8006296:	f104 010c 	add.w	r1, r4, #12
 800629a:	0092      	lsls	r2, r2, #2
 800629c:	300c      	adds	r0, #12
 800629e:	f7fe fb83 	bl	80049a8 <memcpy>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4638      	mov	r0, r7
 80062a6:	f7ff ffa3 	bl	80061f0 <_Bfree>
 80062aa:	462c      	mov	r4, r5
 80062ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80062b0:	3601      	adds	r6, #1
 80062b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80062b6:	6126      	str	r6, [r4, #16]
 80062b8:	4620      	mov	r0, r4
 80062ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062be:	bf00      	nop
 80062c0:	0807b703 	.word	0x0807b703
 80062c4:	0807b714 	.word	0x0807b714

080062c8 <__hi0bits>:
 80062c8:	0c03      	lsrs	r3, r0, #16
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	b9d3      	cbnz	r3, 8006304 <__hi0bits+0x3c>
 80062ce:	0400      	lsls	r0, r0, #16
 80062d0:	2310      	movs	r3, #16
 80062d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062d6:	bf04      	itt	eq
 80062d8:	0200      	lsleq	r0, r0, #8
 80062da:	3308      	addeq	r3, #8
 80062dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80062e0:	bf04      	itt	eq
 80062e2:	0100      	lsleq	r0, r0, #4
 80062e4:	3304      	addeq	r3, #4
 80062e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80062ea:	bf04      	itt	eq
 80062ec:	0080      	lsleq	r0, r0, #2
 80062ee:	3302      	addeq	r3, #2
 80062f0:	2800      	cmp	r0, #0
 80062f2:	db05      	blt.n	8006300 <__hi0bits+0x38>
 80062f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062f8:	f103 0301 	add.w	r3, r3, #1
 80062fc:	bf08      	it	eq
 80062fe:	2320      	moveq	r3, #32
 8006300:	4618      	mov	r0, r3
 8006302:	4770      	bx	lr
 8006304:	2300      	movs	r3, #0
 8006306:	e7e4      	b.n	80062d2 <__hi0bits+0xa>

08006308 <__lo0bits>:
 8006308:	6803      	ldr	r3, [r0, #0]
 800630a:	f013 0207 	ands.w	r2, r3, #7
 800630e:	4601      	mov	r1, r0
 8006310:	d00b      	beq.n	800632a <__lo0bits+0x22>
 8006312:	07da      	lsls	r2, r3, #31
 8006314:	d424      	bmi.n	8006360 <__lo0bits+0x58>
 8006316:	0798      	lsls	r0, r3, #30
 8006318:	bf49      	itett	mi
 800631a:	085b      	lsrmi	r3, r3, #1
 800631c:	089b      	lsrpl	r3, r3, #2
 800631e:	2001      	movmi	r0, #1
 8006320:	600b      	strmi	r3, [r1, #0]
 8006322:	bf5c      	itt	pl
 8006324:	600b      	strpl	r3, [r1, #0]
 8006326:	2002      	movpl	r0, #2
 8006328:	4770      	bx	lr
 800632a:	b298      	uxth	r0, r3
 800632c:	b9b0      	cbnz	r0, 800635c <__lo0bits+0x54>
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	2010      	movs	r0, #16
 8006332:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006336:	bf04      	itt	eq
 8006338:	0a1b      	lsreq	r3, r3, #8
 800633a:	3008      	addeq	r0, #8
 800633c:	071a      	lsls	r2, r3, #28
 800633e:	bf04      	itt	eq
 8006340:	091b      	lsreq	r3, r3, #4
 8006342:	3004      	addeq	r0, #4
 8006344:	079a      	lsls	r2, r3, #30
 8006346:	bf04      	itt	eq
 8006348:	089b      	lsreq	r3, r3, #2
 800634a:	3002      	addeq	r0, #2
 800634c:	07da      	lsls	r2, r3, #31
 800634e:	d403      	bmi.n	8006358 <__lo0bits+0x50>
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	f100 0001 	add.w	r0, r0, #1
 8006356:	d005      	beq.n	8006364 <__lo0bits+0x5c>
 8006358:	600b      	str	r3, [r1, #0]
 800635a:	4770      	bx	lr
 800635c:	4610      	mov	r0, r2
 800635e:	e7e8      	b.n	8006332 <__lo0bits+0x2a>
 8006360:	2000      	movs	r0, #0
 8006362:	4770      	bx	lr
 8006364:	2020      	movs	r0, #32
 8006366:	4770      	bx	lr

08006368 <__i2b>:
 8006368:	b510      	push	{r4, lr}
 800636a:	460c      	mov	r4, r1
 800636c:	2101      	movs	r1, #1
 800636e:	f7ff feff 	bl	8006170 <_Balloc>
 8006372:	4602      	mov	r2, r0
 8006374:	b928      	cbnz	r0, 8006382 <__i2b+0x1a>
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <__i2b+0x24>)
 8006378:	4805      	ldr	r0, [pc, #20]	; (8006390 <__i2b+0x28>)
 800637a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800637e:	f000 fc05 	bl	8006b8c <__assert_func>
 8006382:	2301      	movs	r3, #1
 8006384:	6144      	str	r4, [r0, #20]
 8006386:	6103      	str	r3, [r0, #16]
 8006388:	bd10      	pop	{r4, pc}
 800638a:	bf00      	nop
 800638c:	0807b703 	.word	0x0807b703
 8006390:	0807b714 	.word	0x0807b714

08006394 <__multiply>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	4614      	mov	r4, r2
 800639a:	690a      	ldr	r2, [r1, #16]
 800639c:	6923      	ldr	r3, [r4, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	bfb8      	it	lt
 80063a2:	460b      	movlt	r3, r1
 80063a4:	460d      	mov	r5, r1
 80063a6:	bfbc      	itt	lt
 80063a8:	4625      	movlt	r5, r4
 80063aa:	461c      	movlt	r4, r3
 80063ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80063b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80063b4:	68ab      	ldr	r3, [r5, #8]
 80063b6:	6869      	ldr	r1, [r5, #4]
 80063b8:	eb0a 0709 	add.w	r7, sl, r9
 80063bc:	42bb      	cmp	r3, r7
 80063be:	b085      	sub	sp, #20
 80063c0:	bfb8      	it	lt
 80063c2:	3101      	addlt	r1, #1
 80063c4:	f7ff fed4 	bl	8006170 <_Balloc>
 80063c8:	b930      	cbnz	r0, 80063d8 <__multiply+0x44>
 80063ca:	4602      	mov	r2, r0
 80063cc:	4b42      	ldr	r3, [pc, #264]	; (80064d8 <__multiply+0x144>)
 80063ce:	4843      	ldr	r0, [pc, #268]	; (80064dc <__multiply+0x148>)
 80063d0:	f240 115d 	movw	r1, #349	; 0x15d
 80063d4:	f000 fbda 	bl	8006b8c <__assert_func>
 80063d8:	f100 0614 	add.w	r6, r0, #20
 80063dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80063e0:	4633      	mov	r3, r6
 80063e2:	2200      	movs	r2, #0
 80063e4:	4543      	cmp	r3, r8
 80063e6:	d31e      	bcc.n	8006426 <__multiply+0x92>
 80063e8:	f105 0c14 	add.w	ip, r5, #20
 80063ec:	f104 0314 	add.w	r3, r4, #20
 80063f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80063f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80063f8:	9202      	str	r2, [sp, #8]
 80063fa:	ebac 0205 	sub.w	r2, ip, r5
 80063fe:	3a15      	subs	r2, #21
 8006400:	f022 0203 	bic.w	r2, r2, #3
 8006404:	3204      	adds	r2, #4
 8006406:	f105 0115 	add.w	r1, r5, #21
 800640a:	458c      	cmp	ip, r1
 800640c:	bf38      	it	cc
 800640e:	2204      	movcc	r2, #4
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	9a02      	ldr	r2, [sp, #8]
 8006414:	9303      	str	r3, [sp, #12]
 8006416:	429a      	cmp	r2, r3
 8006418:	d808      	bhi.n	800642c <__multiply+0x98>
 800641a:	2f00      	cmp	r7, #0
 800641c:	dc55      	bgt.n	80064ca <__multiply+0x136>
 800641e:	6107      	str	r7, [r0, #16]
 8006420:	b005      	add	sp, #20
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	f843 2b04 	str.w	r2, [r3], #4
 800642a:	e7db      	b.n	80063e4 <__multiply+0x50>
 800642c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006430:	f1ba 0f00 	cmp.w	sl, #0
 8006434:	d020      	beq.n	8006478 <__multiply+0xe4>
 8006436:	f105 0e14 	add.w	lr, r5, #20
 800643a:	46b1      	mov	r9, r6
 800643c:	2200      	movs	r2, #0
 800643e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006442:	f8d9 b000 	ldr.w	fp, [r9]
 8006446:	b2a1      	uxth	r1, r4
 8006448:	fa1f fb8b 	uxth.w	fp, fp
 800644c:	fb0a b101 	mla	r1, sl, r1, fp
 8006450:	4411      	add	r1, r2
 8006452:	f8d9 2000 	ldr.w	r2, [r9]
 8006456:	0c24      	lsrs	r4, r4, #16
 8006458:	0c12      	lsrs	r2, r2, #16
 800645a:	fb0a 2404 	mla	r4, sl, r4, r2
 800645e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006462:	b289      	uxth	r1, r1
 8006464:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006468:	45f4      	cmp	ip, lr
 800646a:	f849 1b04 	str.w	r1, [r9], #4
 800646e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006472:	d8e4      	bhi.n	800643e <__multiply+0xaa>
 8006474:	9901      	ldr	r1, [sp, #4]
 8006476:	5072      	str	r2, [r6, r1]
 8006478:	9a03      	ldr	r2, [sp, #12]
 800647a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800647e:	3304      	adds	r3, #4
 8006480:	f1b9 0f00 	cmp.w	r9, #0
 8006484:	d01f      	beq.n	80064c6 <__multiply+0x132>
 8006486:	6834      	ldr	r4, [r6, #0]
 8006488:	f105 0114 	add.w	r1, r5, #20
 800648c:	46b6      	mov	lr, r6
 800648e:	f04f 0a00 	mov.w	sl, #0
 8006492:	880a      	ldrh	r2, [r1, #0]
 8006494:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006498:	fb09 b202 	mla	r2, r9, r2, fp
 800649c:	4492      	add	sl, r2
 800649e:	b2a4      	uxth	r4, r4
 80064a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80064a4:	f84e 4b04 	str.w	r4, [lr], #4
 80064a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80064ac:	f8be 2000 	ldrh.w	r2, [lr]
 80064b0:	0c24      	lsrs	r4, r4, #16
 80064b2:	fb09 2404 	mla	r4, r9, r4, r2
 80064b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80064ba:	458c      	cmp	ip, r1
 80064bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80064c0:	d8e7      	bhi.n	8006492 <__multiply+0xfe>
 80064c2:	9a01      	ldr	r2, [sp, #4]
 80064c4:	50b4      	str	r4, [r6, r2]
 80064c6:	3604      	adds	r6, #4
 80064c8:	e7a3      	b.n	8006412 <__multiply+0x7e>
 80064ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1a5      	bne.n	800641e <__multiply+0x8a>
 80064d2:	3f01      	subs	r7, #1
 80064d4:	e7a1      	b.n	800641a <__multiply+0x86>
 80064d6:	bf00      	nop
 80064d8:	0807b703 	.word	0x0807b703
 80064dc:	0807b714 	.word	0x0807b714

080064e0 <__pow5mult>:
 80064e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	4615      	mov	r5, r2
 80064e6:	f012 0203 	ands.w	r2, r2, #3
 80064ea:	4606      	mov	r6, r0
 80064ec:	460f      	mov	r7, r1
 80064ee:	d007      	beq.n	8006500 <__pow5mult+0x20>
 80064f0:	4c25      	ldr	r4, [pc, #148]	; (8006588 <__pow5mult+0xa8>)
 80064f2:	3a01      	subs	r2, #1
 80064f4:	2300      	movs	r3, #0
 80064f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064fa:	f7ff fe9b 	bl	8006234 <__multadd>
 80064fe:	4607      	mov	r7, r0
 8006500:	10ad      	asrs	r5, r5, #2
 8006502:	d03d      	beq.n	8006580 <__pow5mult+0xa0>
 8006504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006506:	b97c      	cbnz	r4, 8006528 <__pow5mult+0x48>
 8006508:	2010      	movs	r0, #16
 800650a:	f7fe fa45 	bl	8004998 <malloc>
 800650e:	4602      	mov	r2, r0
 8006510:	6270      	str	r0, [r6, #36]	; 0x24
 8006512:	b928      	cbnz	r0, 8006520 <__pow5mult+0x40>
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <__pow5mult+0xac>)
 8006516:	481e      	ldr	r0, [pc, #120]	; (8006590 <__pow5mult+0xb0>)
 8006518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800651c:	f000 fb36 	bl	8006b8c <__assert_func>
 8006520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006524:	6004      	str	r4, [r0, #0]
 8006526:	60c4      	str	r4, [r0, #12]
 8006528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800652c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006530:	b94c      	cbnz	r4, 8006546 <__pow5mult+0x66>
 8006532:	f240 2171 	movw	r1, #625	; 0x271
 8006536:	4630      	mov	r0, r6
 8006538:	f7ff ff16 	bl	8006368 <__i2b>
 800653c:	2300      	movs	r3, #0
 800653e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006542:	4604      	mov	r4, r0
 8006544:	6003      	str	r3, [r0, #0]
 8006546:	f04f 0900 	mov.w	r9, #0
 800654a:	07eb      	lsls	r3, r5, #31
 800654c:	d50a      	bpl.n	8006564 <__pow5mult+0x84>
 800654e:	4639      	mov	r1, r7
 8006550:	4622      	mov	r2, r4
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff ff1e 	bl	8006394 <__multiply>
 8006558:	4639      	mov	r1, r7
 800655a:	4680      	mov	r8, r0
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff fe47 	bl	80061f0 <_Bfree>
 8006562:	4647      	mov	r7, r8
 8006564:	106d      	asrs	r5, r5, #1
 8006566:	d00b      	beq.n	8006580 <__pow5mult+0xa0>
 8006568:	6820      	ldr	r0, [r4, #0]
 800656a:	b938      	cbnz	r0, 800657c <__pow5mult+0x9c>
 800656c:	4622      	mov	r2, r4
 800656e:	4621      	mov	r1, r4
 8006570:	4630      	mov	r0, r6
 8006572:	f7ff ff0f 	bl	8006394 <__multiply>
 8006576:	6020      	str	r0, [r4, #0]
 8006578:	f8c0 9000 	str.w	r9, [r0]
 800657c:	4604      	mov	r4, r0
 800657e:	e7e4      	b.n	800654a <__pow5mult+0x6a>
 8006580:	4638      	mov	r0, r7
 8006582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006586:	bf00      	nop
 8006588:	0807b868 	.word	0x0807b868
 800658c:	0807b68d 	.word	0x0807b68d
 8006590:	0807b714 	.word	0x0807b714

08006594 <__lshift>:
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	6849      	ldr	r1, [r1, #4]
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	4607      	mov	r7, r0
 80065a6:	4691      	mov	r9, r2
 80065a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065ac:	f108 0601 	add.w	r6, r8, #1
 80065b0:	42b3      	cmp	r3, r6
 80065b2:	db0b      	blt.n	80065cc <__lshift+0x38>
 80065b4:	4638      	mov	r0, r7
 80065b6:	f7ff fddb 	bl	8006170 <_Balloc>
 80065ba:	4605      	mov	r5, r0
 80065bc:	b948      	cbnz	r0, 80065d2 <__lshift+0x3e>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <__lshift+0xd0>)
 80065c2:	4829      	ldr	r0, [pc, #164]	; (8006668 <__lshift+0xd4>)
 80065c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80065c8:	f000 fae0 	bl	8006b8c <__assert_func>
 80065cc:	3101      	adds	r1, #1
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	e7ee      	b.n	80065b0 <__lshift+0x1c>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f100 0114 	add.w	r1, r0, #20
 80065d8:	f100 0210 	add.w	r2, r0, #16
 80065dc:	4618      	mov	r0, r3
 80065de:	4553      	cmp	r3, sl
 80065e0:	db33      	blt.n	800664a <__lshift+0xb6>
 80065e2:	6920      	ldr	r0, [r4, #16]
 80065e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065e8:	f104 0314 	add.w	r3, r4, #20
 80065ec:	f019 091f 	ands.w	r9, r9, #31
 80065f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065f8:	d02b      	beq.n	8006652 <__lshift+0xbe>
 80065fa:	f1c9 0e20 	rsb	lr, r9, #32
 80065fe:	468a      	mov	sl, r1
 8006600:	2200      	movs	r2, #0
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	fa00 f009 	lsl.w	r0, r0, r9
 8006608:	4302      	orrs	r2, r0
 800660a:	f84a 2b04 	str.w	r2, [sl], #4
 800660e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006612:	459c      	cmp	ip, r3
 8006614:	fa22 f20e 	lsr.w	r2, r2, lr
 8006618:	d8f3      	bhi.n	8006602 <__lshift+0x6e>
 800661a:	ebac 0304 	sub.w	r3, ip, r4
 800661e:	3b15      	subs	r3, #21
 8006620:	f023 0303 	bic.w	r3, r3, #3
 8006624:	3304      	adds	r3, #4
 8006626:	f104 0015 	add.w	r0, r4, #21
 800662a:	4584      	cmp	ip, r0
 800662c:	bf38      	it	cc
 800662e:	2304      	movcc	r3, #4
 8006630:	50ca      	str	r2, [r1, r3]
 8006632:	b10a      	cbz	r2, 8006638 <__lshift+0xa4>
 8006634:	f108 0602 	add.w	r6, r8, #2
 8006638:	3e01      	subs	r6, #1
 800663a:	4638      	mov	r0, r7
 800663c:	612e      	str	r6, [r5, #16]
 800663e:	4621      	mov	r1, r4
 8006640:	f7ff fdd6 	bl	80061f0 <_Bfree>
 8006644:	4628      	mov	r0, r5
 8006646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664a:	f842 0f04 	str.w	r0, [r2, #4]!
 800664e:	3301      	adds	r3, #1
 8006650:	e7c5      	b.n	80065de <__lshift+0x4a>
 8006652:	3904      	subs	r1, #4
 8006654:	f853 2b04 	ldr.w	r2, [r3], #4
 8006658:	f841 2f04 	str.w	r2, [r1, #4]!
 800665c:	459c      	cmp	ip, r3
 800665e:	d8f9      	bhi.n	8006654 <__lshift+0xc0>
 8006660:	e7ea      	b.n	8006638 <__lshift+0xa4>
 8006662:	bf00      	nop
 8006664:	0807b703 	.word	0x0807b703
 8006668:	0807b714 	.word	0x0807b714

0800666c <__mcmp>:
 800666c:	b530      	push	{r4, r5, lr}
 800666e:	6902      	ldr	r2, [r0, #16]
 8006670:	690c      	ldr	r4, [r1, #16]
 8006672:	1b12      	subs	r2, r2, r4
 8006674:	d10e      	bne.n	8006694 <__mcmp+0x28>
 8006676:	f100 0314 	add.w	r3, r0, #20
 800667a:	3114      	adds	r1, #20
 800667c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800668c:	42a5      	cmp	r5, r4
 800668e:	d003      	beq.n	8006698 <__mcmp+0x2c>
 8006690:	d305      	bcc.n	800669e <__mcmp+0x32>
 8006692:	2201      	movs	r2, #1
 8006694:	4610      	mov	r0, r2
 8006696:	bd30      	pop	{r4, r5, pc}
 8006698:	4283      	cmp	r3, r0
 800669a:	d3f3      	bcc.n	8006684 <__mcmp+0x18>
 800669c:	e7fa      	b.n	8006694 <__mcmp+0x28>
 800669e:	f04f 32ff 	mov.w	r2, #4294967295
 80066a2:	e7f7      	b.n	8006694 <__mcmp+0x28>

080066a4 <__mdiff>:
 80066a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	460c      	mov	r4, r1
 80066aa:	4606      	mov	r6, r0
 80066ac:	4611      	mov	r1, r2
 80066ae:	4620      	mov	r0, r4
 80066b0:	4617      	mov	r7, r2
 80066b2:	f7ff ffdb 	bl	800666c <__mcmp>
 80066b6:	1e05      	subs	r5, r0, #0
 80066b8:	d110      	bne.n	80066dc <__mdiff+0x38>
 80066ba:	4629      	mov	r1, r5
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff fd57 	bl	8006170 <_Balloc>
 80066c2:	b930      	cbnz	r0, 80066d2 <__mdiff+0x2e>
 80066c4:	4b39      	ldr	r3, [pc, #228]	; (80067ac <__mdiff+0x108>)
 80066c6:	4602      	mov	r2, r0
 80066c8:	f240 2132 	movw	r1, #562	; 0x232
 80066cc:	4838      	ldr	r0, [pc, #224]	; (80067b0 <__mdiff+0x10c>)
 80066ce:	f000 fa5d 	bl	8006b8c <__assert_func>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	bfa4      	itt	ge
 80066de:	463b      	movge	r3, r7
 80066e0:	4627      	movge	r7, r4
 80066e2:	4630      	mov	r0, r6
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	bfa6      	itte	ge
 80066e8:	461c      	movge	r4, r3
 80066ea:	2500      	movge	r5, #0
 80066ec:	2501      	movlt	r5, #1
 80066ee:	f7ff fd3f 	bl	8006170 <_Balloc>
 80066f2:	b920      	cbnz	r0, 80066fe <__mdiff+0x5a>
 80066f4:	4b2d      	ldr	r3, [pc, #180]	; (80067ac <__mdiff+0x108>)
 80066f6:	4602      	mov	r2, r0
 80066f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80066fc:	e7e6      	b.n	80066cc <__mdiff+0x28>
 80066fe:	693e      	ldr	r6, [r7, #16]
 8006700:	60c5      	str	r5, [r0, #12]
 8006702:	6925      	ldr	r5, [r4, #16]
 8006704:	f107 0114 	add.w	r1, r7, #20
 8006708:	f104 0914 	add.w	r9, r4, #20
 800670c:	f100 0e14 	add.w	lr, r0, #20
 8006710:	f107 0210 	add.w	r2, r7, #16
 8006714:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006718:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800671c:	46f2      	mov	sl, lr
 800671e:	2700      	movs	r7, #0
 8006720:	f859 3b04 	ldr.w	r3, [r9], #4
 8006724:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006728:	fa1f f883 	uxth.w	r8, r3
 800672c:	fa17 f78b 	uxtah	r7, r7, fp
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	eba7 0808 	sub.w	r8, r7, r8
 8006736:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800673a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800673e:	fa1f f888 	uxth.w	r8, r8
 8006742:	141f      	asrs	r7, r3, #16
 8006744:	454d      	cmp	r5, r9
 8006746:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800674a:	f84a 3b04 	str.w	r3, [sl], #4
 800674e:	d8e7      	bhi.n	8006720 <__mdiff+0x7c>
 8006750:	1b2b      	subs	r3, r5, r4
 8006752:	3b15      	subs	r3, #21
 8006754:	f023 0303 	bic.w	r3, r3, #3
 8006758:	3304      	adds	r3, #4
 800675a:	3415      	adds	r4, #21
 800675c:	42a5      	cmp	r5, r4
 800675e:	bf38      	it	cc
 8006760:	2304      	movcc	r3, #4
 8006762:	4419      	add	r1, r3
 8006764:	4473      	add	r3, lr
 8006766:	469e      	mov	lr, r3
 8006768:	460d      	mov	r5, r1
 800676a:	4565      	cmp	r5, ip
 800676c:	d30e      	bcc.n	800678c <__mdiff+0xe8>
 800676e:	f10c 0203 	add.w	r2, ip, #3
 8006772:	1a52      	subs	r2, r2, r1
 8006774:	f022 0203 	bic.w	r2, r2, #3
 8006778:	3903      	subs	r1, #3
 800677a:	458c      	cmp	ip, r1
 800677c:	bf38      	it	cc
 800677e:	2200      	movcc	r2, #0
 8006780:	441a      	add	r2, r3
 8006782:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006786:	b17b      	cbz	r3, 80067a8 <__mdiff+0x104>
 8006788:	6106      	str	r6, [r0, #16]
 800678a:	e7a5      	b.n	80066d8 <__mdiff+0x34>
 800678c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006790:	fa17 f488 	uxtah	r4, r7, r8
 8006794:	1422      	asrs	r2, r4, #16
 8006796:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800679a:	b2a4      	uxth	r4, r4
 800679c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80067a0:	f84e 4b04 	str.w	r4, [lr], #4
 80067a4:	1417      	asrs	r7, r2, #16
 80067a6:	e7e0      	b.n	800676a <__mdiff+0xc6>
 80067a8:	3e01      	subs	r6, #1
 80067aa:	e7ea      	b.n	8006782 <__mdiff+0xde>
 80067ac:	0807b703 	.word	0x0807b703
 80067b0:	0807b714 	.word	0x0807b714

080067b4 <__d2b>:
 80067b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	4689      	mov	r9, r1
 80067ba:	2101      	movs	r1, #1
 80067bc:	ec57 6b10 	vmov	r6, r7, d0
 80067c0:	4690      	mov	r8, r2
 80067c2:	f7ff fcd5 	bl	8006170 <_Balloc>
 80067c6:	4604      	mov	r4, r0
 80067c8:	b930      	cbnz	r0, 80067d8 <__d2b+0x24>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b25      	ldr	r3, [pc, #148]	; (8006864 <__d2b+0xb0>)
 80067ce:	4826      	ldr	r0, [pc, #152]	; (8006868 <__d2b+0xb4>)
 80067d0:	f240 310a 	movw	r1, #778	; 0x30a
 80067d4:	f000 f9da 	bl	8006b8c <__assert_func>
 80067d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80067dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067e0:	bb35      	cbnz	r5, 8006830 <__d2b+0x7c>
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	d028      	beq.n	800683a <__d2b+0x86>
 80067e8:	4668      	mov	r0, sp
 80067ea:	9600      	str	r6, [sp, #0]
 80067ec:	f7ff fd8c 	bl	8006308 <__lo0bits>
 80067f0:	9900      	ldr	r1, [sp, #0]
 80067f2:	b300      	cbz	r0, 8006836 <__d2b+0x82>
 80067f4:	9a01      	ldr	r2, [sp, #4]
 80067f6:	f1c0 0320 	rsb	r3, r0, #32
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	430b      	orrs	r3, r1
 8006800:	40c2      	lsrs	r2, r0
 8006802:	6163      	str	r3, [r4, #20]
 8006804:	9201      	str	r2, [sp, #4]
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	61a3      	str	r3, [r4, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2202      	movne	r2, #2
 8006810:	2201      	moveq	r2, #1
 8006812:	6122      	str	r2, [r4, #16]
 8006814:	b1d5      	cbz	r5, 800684c <__d2b+0x98>
 8006816:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800681a:	4405      	add	r5, r0
 800681c:	f8c9 5000 	str.w	r5, [r9]
 8006820:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006824:	f8c8 0000 	str.w	r0, [r8]
 8006828:	4620      	mov	r0, r4
 800682a:	b003      	add	sp, #12
 800682c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006834:	e7d5      	b.n	80067e2 <__d2b+0x2e>
 8006836:	6161      	str	r1, [r4, #20]
 8006838:	e7e5      	b.n	8006806 <__d2b+0x52>
 800683a:	a801      	add	r0, sp, #4
 800683c:	f7ff fd64 	bl	8006308 <__lo0bits>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	2201      	movs	r2, #1
 8006846:	6122      	str	r2, [r4, #16]
 8006848:	3020      	adds	r0, #32
 800684a:	e7e3      	b.n	8006814 <__d2b+0x60>
 800684c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006854:	f8c9 0000 	str.w	r0, [r9]
 8006858:	6918      	ldr	r0, [r3, #16]
 800685a:	f7ff fd35 	bl	80062c8 <__hi0bits>
 800685e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006862:	e7df      	b.n	8006824 <__d2b+0x70>
 8006864:	0807b703 	.word	0x0807b703
 8006868:	0807b714 	.word	0x0807b714

0800686c <_calloc_r>:
 800686c:	b513      	push	{r0, r1, r4, lr}
 800686e:	434a      	muls	r2, r1
 8006870:	4611      	mov	r1, r2
 8006872:	9201      	str	r2, [sp, #4]
 8006874:	f7fe f8fe 	bl	8004a74 <_malloc_r>
 8006878:	4604      	mov	r4, r0
 800687a:	b118      	cbz	r0, 8006884 <_calloc_r+0x18>
 800687c:	9a01      	ldr	r2, [sp, #4]
 800687e:	2100      	movs	r1, #0
 8006880:	f7fe f8a0 	bl	80049c4 <memset>
 8006884:	4620      	mov	r0, r4
 8006886:	b002      	add	sp, #8
 8006888:	bd10      	pop	{r4, pc}

0800688a <_realloc_r>:
 800688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688c:	4607      	mov	r7, r0
 800688e:	4614      	mov	r4, r2
 8006890:	460e      	mov	r6, r1
 8006892:	b921      	cbnz	r1, 800689e <_realloc_r+0x14>
 8006894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006898:	4611      	mov	r1, r2
 800689a:	f7fe b8eb 	b.w	8004a74 <_malloc_r>
 800689e:	b922      	cbnz	r2, 80068aa <_realloc_r+0x20>
 80068a0:	f7fe f898 	bl	80049d4 <_free_r>
 80068a4:	4625      	mov	r5, r4
 80068a6:	4628      	mov	r0, r5
 80068a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068aa:	f000 f9ce 	bl	8006c4a <_malloc_usable_size_r>
 80068ae:	42a0      	cmp	r0, r4
 80068b0:	d20f      	bcs.n	80068d2 <_realloc_r+0x48>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7fe f8dd 	bl	8004a74 <_malloc_r>
 80068ba:	4605      	mov	r5, r0
 80068bc:	2800      	cmp	r0, #0
 80068be:	d0f2      	beq.n	80068a6 <_realloc_r+0x1c>
 80068c0:	4631      	mov	r1, r6
 80068c2:	4622      	mov	r2, r4
 80068c4:	f7fe f870 	bl	80049a8 <memcpy>
 80068c8:	4631      	mov	r1, r6
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7fe f882 	bl	80049d4 <_free_r>
 80068d0:	e7e9      	b.n	80068a6 <_realloc_r+0x1c>
 80068d2:	4635      	mov	r5, r6
 80068d4:	e7e7      	b.n	80068a6 <_realloc_r+0x1c>

080068d6 <__ssputs_r>:
 80068d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068da:	688e      	ldr	r6, [r1, #8]
 80068dc:	429e      	cmp	r6, r3
 80068de:	4682      	mov	sl, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	4690      	mov	r8, r2
 80068e4:	461f      	mov	r7, r3
 80068e6:	d838      	bhi.n	800695a <__ssputs_r+0x84>
 80068e8:	898a      	ldrh	r2, [r1, #12]
 80068ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068ee:	d032      	beq.n	8006956 <__ssputs_r+0x80>
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	6909      	ldr	r1, [r1, #16]
 80068f4:	eba5 0901 	sub.w	r9, r5, r1
 80068f8:	6965      	ldr	r5, [r4, #20]
 80068fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006902:	3301      	adds	r3, #1
 8006904:	444b      	add	r3, r9
 8006906:	106d      	asrs	r5, r5, #1
 8006908:	429d      	cmp	r5, r3
 800690a:	bf38      	it	cc
 800690c:	461d      	movcc	r5, r3
 800690e:	0553      	lsls	r3, r2, #21
 8006910:	d531      	bpl.n	8006976 <__ssputs_r+0xa0>
 8006912:	4629      	mov	r1, r5
 8006914:	f7fe f8ae 	bl	8004a74 <_malloc_r>
 8006918:	4606      	mov	r6, r0
 800691a:	b950      	cbnz	r0, 8006932 <__ssputs_r+0x5c>
 800691c:	230c      	movs	r3, #12
 800691e:	f8ca 3000 	str.w	r3, [sl]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	6921      	ldr	r1, [r4, #16]
 8006934:	464a      	mov	r2, r9
 8006936:	f7fe f837 	bl	80049a8 <memcpy>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	6126      	str	r6, [r4, #16]
 8006948:	6165      	str	r5, [r4, #20]
 800694a:	444e      	add	r6, r9
 800694c:	eba5 0509 	sub.w	r5, r5, r9
 8006950:	6026      	str	r6, [r4, #0]
 8006952:	60a5      	str	r5, [r4, #8]
 8006954:	463e      	mov	r6, r7
 8006956:	42be      	cmp	r6, r7
 8006958:	d900      	bls.n	800695c <__ssputs_r+0x86>
 800695a:	463e      	mov	r6, r7
 800695c:	4632      	mov	r2, r6
 800695e:	6820      	ldr	r0, [r4, #0]
 8006960:	4641      	mov	r1, r8
 8006962:	f000 f958 	bl	8006c16 <memmove>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	1b9b      	subs	r3, r3, r6
 800696c:	4432      	add	r2, r6
 800696e:	60a3      	str	r3, [r4, #8]
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	2000      	movs	r0, #0
 8006974:	e7db      	b.n	800692e <__ssputs_r+0x58>
 8006976:	462a      	mov	r2, r5
 8006978:	f7ff ff87 	bl	800688a <_realloc_r>
 800697c:	4606      	mov	r6, r0
 800697e:	2800      	cmp	r0, #0
 8006980:	d1e1      	bne.n	8006946 <__ssputs_r+0x70>
 8006982:	6921      	ldr	r1, [r4, #16]
 8006984:	4650      	mov	r0, sl
 8006986:	f7fe f825 	bl	80049d4 <_free_r>
 800698a:	e7c7      	b.n	800691c <__ssputs_r+0x46>

0800698c <_svfiprintf_r>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	4698      	mov	r8, r3
 8006992:	898b      	ldrh	r3, [r1, #12]
 8006994:	061b      	lsls	r3, r3, #24
 8006996:	b09d      	sub	sp, #116	; 0x74
 8006998:	4607      	mov	r7, r0
 800699a:	460d      	mov	r5, r1
 800699c:	4614      	mov	r4, r2
 800699e:	d50e      	bpl.n	80069be <_svfiprintf_r+0x32>
 80069a0:	690b      	ldr	r3, [r1, #16]
 80069a2:	b963      	cbnz	r3, 80069be <_svfiprintf_r+0x32>
 80069a4:	2140      	movs	r1, #64	; 0x40
 80069a6:	f7fe f865 	bl	8004a74 <_malloc_r>
 80069aa:	6028      	str	r0, [r5, #0]
 80069ac:	6128      	str	r0, [r5, #16]
 80069ae:	b920      	cbnz	r0, 80069ba <_svfiprintf_r+0x2e>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	e0d1      	b.n	8006b5e <_svfiprintf_r+0x1d2>
 80069ba:	2340      	movs	r3, #64	; 0x40
 80069bc:	616b      	str	r3, [r5, #20]
 80069be:	2300      	movs	r3, #0
 80069c0:	9309      	str	r3, [sp, #36]	; 0x24
 80069c2:	2320      	movs	r3, #32
 80069c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069cc:	2330      	movs	r3, #48	; 0x30
 80069ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b78 <_svfiprintf_r+0x1ec>
 80069d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069d6:	f04f 0901 	mov.w	r9, #1
 80069da:	4623      	mov	r3, r4
 80069dc:	469a      	mov	sl, r3
 80069de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e2:	b10a      	cbz	r2, 80069e8 <_svfiprintf_r+0x5c>
 80069e4:	2a25      	cmp	r2, #37	; 0x25
 80069e6:	d1f9      	bne.n	80069dc <_svfiprintf_r+0x50>
 80069e8:	ebba 0b04 	subs.w	fp, sl, r4
 80069ec:	d00b      	beq.n	8006a06 <_svfiprintf_r+0x7a>
 80069ee:	465b      	mov	r3, fp
 80069f0:	4622      	mov	r2, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	4638      	mov	r0, r7
 80069f6:	f7ff ff6e 	bl	80068d6 <__ssputs_r>
 80069fa:	3001      	adds	r0, #1
 80069fc:	f000 80aa 	beq.w	8006b54 <_svfiprintf_r+0x1c8>
 8006a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a02:	445a      	add	r2, fp
 8006a04:	9209      	str	r2, [sp, #36]	; 0x24
 8006a06:	f89a 3000 	ldrb.w	r3, [sl]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80a2 	beq.w	8006b54 <_svfiprintf_r+0x1c8>
 8006a10:	2300      	movs	r3, #0
 8006a12:	f04f 32ff 	mov.w	r2, #4294967295
 8006a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a1a:	f10a 0a01 	add.w	sl, sl, #1
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	9307      	str	r3, [sp, #28]
 8006a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a26:	931a      	str	r3, [sp, #104]	; 0x68
 8006a28:	4654      	mov	r4, sl
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a30:	4851      	ldr	r0, [pc, #324]	; (8006b78 <_svfiprintf_r+0x1ec>)
 8006a32:	f7f9 fbf5 	bl	8000220 <memchr>
 8006a36:	9a04      	ldr	r2, [sp, #16]
 8006a38:	b9d8      	cbnz	r0, 8006a72 <_svfiprintf_r+0xe6>
 8006a3a:	06d0      	lsls	r0, r2, #27
 8006a3c:	bf44      	itt	mi
 8006a3e:	2320      	movmi	r3, #32
 8006a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a44:	0711      	lsls	r1, r2, #28
 8006a46:	bf44      	itt	mi
 8006a48:	232b      	movmi	r3, #43	; 0x2b
 8006a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a52:	2b2a      	cmp	r3, #42	; 0x2a
 8006a54:	d015      	beq.n	8006a82 <_svfiprintf_r+0xf6>
 8006a56:	9a07      	ldr	r2, [sp, #28]
 8006a58:	4654      	mov	r4, sl
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f04f 0c0a 	mov.w	ip, #10
 8006a60:	4621      	mov	r1, r4
 8006a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a66:	3b30      	subs	r3, #48	; 0x30
 8006a68:	2b09      	cmp	r3, #9
 8006a6a:	d94e      	bls.n	8006b0a <_svfiprintf_r+0x17e>
 8006a6c:	b1b0      	cbz	r0, 8006a9c <_svfiprintf_r+0x110>
 8006a6e:	9207      	str	r2, [sp, #28]
 8006a70:	e014      	b.n	8006a9c <_svfiprintf_r+0x110>
 8006a72:	eba0 0308 	sub.w	r3, r0, r8
 8006a76:	fa09 f303 	lsl.w	r3, r9, r3
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	46a2      	mov	sl, r4
 8006a80:	e7d2      	b.n	8006a28 <_svfiprintf_r+0x9c>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	1d19      	adds	r1, r3, #4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	9103      	str	r1, [sp, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bfbb      	ittet	lt
 8006a8e:	425b      	neglt	r3, r3
 8006a90:	f042 0202 	orrlt.w	r2, r2, #2
 8006a94:	9307      	strge	r3, [sp, #28]
 8006a96:	9307      	strlt	r3, [sp, #28]
 8006a98:	bfb8      	it	lt
 8006a9a:	9204      	strlt	r2, [sp, #16]
 8006a9c:	7823      	ldrb	r3, [r4, #0]
 8006a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa0:	d10c      	bne.n	8006abc <_svfiprintf_r+0x130>
 8006aa2:	7863      	ldrb	r3, [r4, #1]
 8006aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa6:	d135      	bne.n	8006b14 <_svfiprintf_r+0x188>
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	1d1a      	adds	r2, r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	9203      	str	r2, [sp, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bfb8      	it	lt
 8006ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ab8:	3402      	adds	r4, #2
 8006aba:	9305      	str	r3, [sp, #20]
 8006abc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b88 <_svfiprintf_r+0x1fc>
 8006ac0:	7821      	ldrb	r1, [r4, #0]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	f7f9 fbab 	bl	8000220 <memchr>
 8006aca:	b140      	cbz	r0, 8006ade <_svfiprintf_r+0x152>
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	eba0 000a 	sub.w	r0, r0, sl
 8006ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	4303      	orrs	r3, r0
 8006ada:	3401      	adds	r4, #1
 8006adc:	9304      	str	r3, [sp, #16]
 8006ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae2:	4826      	ldr	r0, [pc, #152]	; (8006b7c <_svfiprintf_r+0x1f0>)
 8006ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ae8:	2206      	movs	r2, #6
 8006aea:	f7f9 fb99 	bl	8000220 <memchr>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d038      	beq.n	8006b64 <_svfiprintf_r+0x1d8>
 8006af2:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <_svfiprintf_r+0x1f4>)
 8006af4:	bb1b      	cbnz	r3, 8006b3e <_svfiprintf_r+0x1b2>
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	3307      	adds	r3, #7
 8006afa:	f023 0307 	bic.w	r3, r3, #7
 8006afe:	3308      	adds	r3, #8
 8006b00:	9303      	str	r3, [sp, #12]
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	4433      	add	r3, r6
 8006b06:	9309      	str	r3, [sp, #36]	; 0x24
 8006b08:	e767      	b.n	80069da <_svfiprintf_r+0x4e>
 8006b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b0e:	460c      	mov	r4, r1
 8006b10:	2001      	movs	r0, #1
 8006b12:	e7a5      	b.n	8006a60 <_svfiprintf_r+0xd4>
 8006b14:	2300      	movs	r3, #0
 8006b16:	3401      	adds	r4, #1
 8006b18:	9305      	str	r3, [sp, #20]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f04f 0c0a 	mov.w	ip, #10
 8006b20:	4620      	mov	r0, r4
 8006b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b26:	3a30      	subs	r2, #48	; 0x30
 8006b28:	2a09      	cmp	r2, #9
 8006b2a:	d903      	bls.n	8006b34 <_svfiprintf_r+0x1a8>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0c5      	beq.n	8006abc <_svfiprintf_r+0x130>
 8006b30:	9105      	str	r1, [sp, #20]
 8006b32:	e7c3      	b.n	8006abc <_svfiprintf_r+0x130>
 8006b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b38:	4604      	mov	r4, r0
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e7f0      	b.n	8006b20 <_svfiprintf_r+0x194>
 8006b3e:	ab03      	add	r3, sp, #12
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <_svfiprintf_r+0x1f8>)
 8006b46:	a904      	add	r1, sp, #16
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7fe f88d 	bl	8004c68 <_printf_float>
 8006b4e:	1c42      	adds	r2, r0, #1
 8006b50:	4606      	mov	r6, r0
 8006b52:	d1d6      	bne.n	8006b02 <_svfiprintf_r+0x176>
 8006b54:	89ab      	ldrh	r3, [r5, #12]
 8006b56:	065b      	lsls	r3, r3, #25
 8006b58:	f53f af2c 	bmi.w	80069b4 <_svfiprintf_r+0x28>
 8006b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5e:	b01d      	add	sp, #116	; 0x74
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	ab03      	add	r3, sp, #12
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	462a      	mov	r2, r5
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <_svfiprintf_r+0x1f8>)
 8006b6c:	a904      	add	r1, sp, #16
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7fe fb1e 	bl	80051b0 <_printf_i>
 8006b74:	e7eb      	b.n	8006b4e <_svfiprintf_r+0x1c2>
 8006b76:	bf00      	nop
 8006b78:	0807b874 	.word	0x0807b874
 8006b7c:	0807b87e 	.word	0x0807b87e
 8006b80:	08004c69 	.word	0x08004c69
 8006b84:	080068d7 	.word	0x080068d7
 8006b88:	0807b87a 	.word	0x0807b87a

08006b8c <__assert_func>:
 8006b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b8e:	4614      	mov	r4, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <__assert_func+0x2c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4605      	mov	r5, r0
 8006b98:	68d8      	ldr	r0, [r3, #12]
 8006b9a:	b14c      	cbz	r4, 8006bb0 <__assert_func+0x24>
 8006b9c:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <__assert_func+0x30>)
 8006b9e:	9100      	str	r1, [sp, #0]
 8006ba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ba4:	4906      	ldr	r1, [pc, #24]	; (8006bc0 <__assert_func+0x34>)
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	f000 f80e 	bl	8006bc8 <fiprintf>
 8006bac:	f000 fa7c 	bl	80070a8 <abort>
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <__assert_func+0x38>)
 8006bb2:	461c      	mov	r4, r3
 8006bb4:	e7f3      	b.n	8006b9e <__assert_func+0x12>
 8006bb6:	bf00      	nop
 8006bb8:	200006dc 	.word	0x200006dc
 8006bbc:	0807b885 	.word	0x0807b885
 8006bc0:	0807b892 	.word	0x0807b892
 8006bc4:	0807b8c0 	.word	0x0807b8c0

08006bc8 <fiprintf>:
 8006bc8:	b40e      	push	{r1, r2, r3}
 8006bca:	b503      	push	{r0, r1, lr}
 8006bcc:	4601      	mov	r1, r0
 8006bce:	ab03      	add	r3, sp, #12
 8006bd0:	4805      	ldr	r0, [pc, #20]	; (8006be8 <fiprintf+0x20>)
 8006bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd6:	6800      	ldr	r0, [r0, #0]
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f000 f867 	bl	8006cac <_vfiprintf_r>
 8006bde:	b002      	add	sp, #8
 8006be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be4:	b003      	add	sp, #12
 8006be6:	4770      	bx	lr
 8006be8:	200006dc 	.word	0x200006dc

08006bec <__retarget_lock_init_recursive>:
 8006bec:	4770      	bx	lr

08006bee <__retarget_lock_acquire_recursive>:
 8006bee:	4770      	bx	lr

08006bf0 <__retarget_lock_release_recursive>:
 8006bf0:	4770      	bx	lr

08006bf2 <__ascii_mbtowc>:
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	b901      	cbnz	r1, 8006bf8 <__ascii_mbtowc+0x6>
 8006bf6:	a901      	add	r1, sp, #4
 8006bf8:	b142      	cbz	r2, 8006c0c <__ascii_mbtowc+0x1a>
 8006bfa:	b14b      	cbz	r3, 8006c10 <__ascii_mbtowc+0x1e>
 8006bfc:	7813      	ldrb	r3, [r2, #0]
 8006bfe:	600b      	str	r3, [r1, #0]
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	1e10      	subs	r0, r2, #0
 8006c04:	bf18      	it	ne
 8006c06:	2001      	movne	r0, #1
 8006c08:	b002      	add	sp, #8
 8006c0a:	4770      	bx	lr
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	e7fb      	b.n	8006c08 <__ascii_mbtowc+0x16>
 8006c10:	f06f 0001 	mvn.w	r0, #1
 8006c14:	e7f8      	b.n	8006c08 <__ascii_mbtowc+0x16>

08006c16 <memmove>:
 8006c16:	4288      	cmp	r0, r1
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	eb01 0402 	add.w	r4, r1, r2
 8006c1e:	d902      	bls.n	8006c26 <memmove+0x10>
 8006c20:	4284      	cmp	r4, r0
 8006c22:	4623      	mov	r3, r4
 8006c24:	d807      	bhi.n	8006c36 <memmove+0x20>
 8006c26:	1e43      	subs	r3, r0, #1
 8006c28:	42a1      	cmp	r1, r4
 8006c2a:	d008      	beq.n	8006c3e <memmove+0x28>
 8006c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c34:	e7f8      	b.n	8006c28 <memmove+0x12>
 8006c36:	4402      	add	r2, r0
 8006c38:	4601      	mov	r1, r0
 8006c3a:	428a      	cmp	r2, r1
 8006c3c:	d100      	bne.n	8006c40 <memmove+0x2a>
 8006c3e:	bd10      	pop	{r4, pc}
 8006c40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c48:	e7f7      	b.n	8006c3a <memmove+0x24>

08006c4a <_malloc_usable_size_r>:
 8006c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c4e:	1f18      	subs	r0, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfbc      	itt	lt
 8006c54:	580b      	ldrlt	r3, [r1, r0]
 8006c56:	18c0      	addlt	r0, r0, r3
 8006c58:	4770      	bx	lr

08006c5a <__sfputc_r>:
 8006c5a:	6893      	ldr	r3, [r2, #8]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	b410      	push	{r4}
 8006c62:	6093      	str	r3, [r2, #8]
 8006c64:	da08      	bge.n	8006c78 <__sfputc_r+0x1e>
 8006c66:	6994      	ldr	r4, [r2, #24]
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	db01      	blt.n	8006c70 <__sfputc_r+0x16>
 8006c6c:	290a      	cmp	r1, #10
 8006c6e:	d103      	bne.n	8006c78 <__sfputc_r+0x1e>
 8006c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c74:	f000 b94a 	b.w	8006f0c <__swbuf_r>
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	1c58      	adds	r0, r3, #1
 8006c7c:	6010      	str	r0, [r2, #0]
 8006c7e:	7019      	strb	r1, [r3, #0]
 8006c80:	4608      	mov	r0, r1
 8006c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <__sfputs_r>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	4614      	mov	r4, r2
 8006c90:	18d5      	adds	r5, r2, r3
 8006c92:	42ac      	cmp	r4, r5
 8006c94:	d101      	bne.n	8006c9a <__sfputs_r+0x12>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e007      	b.n	8006caa <__sfputs_r+0x22>
 8006c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f7ff ffda 	bl	8006c5a <__sfputc_r>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d1f3      	bne.n	8006c92 <__sfputs_r+0xa>
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cac <_vfiprintf_r>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	b09d      	sub	sp, #116	; 0x74
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	4698      	mov	r8, r3
 8006cb8:	4606      	mov	r6, r0
 8006cba:	b118      	cbz	r0, 8006cc4 <_vfiprintf_r+0x18>
 8006cbc:	6983      	ldr	r3, [r0, #24]
 8006cbe:	b90b      	cbnz	r3, 8006cc4 <_vfiprintf_r+0x18>
 8006cc0:	f000 fb14 	bl	80072ec <__sinit>
 8006cc4:	4b89      	ldr	r3, [pc, #548]	; (8006eec <_vfiprintf_r+0x240>)
 8006cc6:	429d      	cmp	r5, r3
 8006cc8:	d11b      	bne.n	8006d02 <_vfiprintf_r+0x56>
 8006cca:	6875      	ldr	r5, [r6, #4]
 8006ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	d405      	bmi.n	8006cde <_vfiprintf_r+0x32>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	059a      	lsls	r2, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <_vfiprintf_r+0x32>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cda:	f7ff ff88 	bl	8006bee <__retarget_lock_acquire_recursive>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	071b      	lsls	r3, r3, #28
 8006ce2:	d501      	bpl.n	8006ce8 <_vfiprintf_r+0x3c>
 8006ce4:	692b      	ldr	r3, [r5, #16]
 8006ce6:	b9eb      	cbnz	r3, 8006d24 <_vfiprintf_r+0x78>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4630      	mov	r0, r6
 8006cec:	f000 f96e 	bl	8006fcc <__swsetup_r>
 8006cf0:	b1c0      	cbz	r0, 8006d24 <_vfiprintf_r+0x78>
 8006cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cf4:	07dc      	lsls	r4, r3, #31
 8006cf6:	d50e      	bpl.n	8006d16 <_vfiprintf_r+0x6a>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	b01d      	add	sp, #116	; 0x74
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	4b7b      	ldr	r3, [pc, #492]	; (8006ef0 <_vfiprintf_r+0x244>)
 8006d04:	429d      	cmp	r5, r3
 8006d06:	d101      	bne.n	8006d0c <_vfiprintf_r+0x60>
 8006d08:	68b5      	ldr	r5, [r6, #8]
 8006d0a:	e7df      	b.n	8006ccc <_vfiprintf_r+0x20>
 8006d0c:	4b79      	ldr	r3, [pc, #484]	; (8006ef4 <_vfiprintf_r+0x248>)
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	bf08      	it	eq
 8006d12:	68f5      	ldreq	r5, [r6, #12]
 8006d14:	e7da      	b.n	8006ccc <_vfiprintf_r+0x20>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	0598      	lsls	r0, r3, #22
 8006d1a:	d4ed      	bmi.n	8006cf8 <_vfiprintf_r+0x4c>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d1e:	f7ff ff67 	bl	8006bf0 <__retarget_lock_release_recursive>
 8006d22:	e7e9      	b.n	8006cf8 <_vfiprintf_r+0x4c>
 8006d24:	2300      	movs	r3, #0
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
 8006d28:	2320      	movs	r3, #32
 8006d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d32:	2330      	movs	r3, #48	; 0x30
 8006d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ef8 <_vfiprintf_r+0x24c>
 8006d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d3c:	f04f 0901 	mov.w	r9, #1
 8006d40:	4623      	mov	r3, r4
 8006d42:	469a      	mov	sl, r3
 8006d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d48:	b10a      	cbz	r2, 8006d4e <_vfiprintf_r+0xa2>
 8006d4a:	2a25      	cmp	r2, #37	; 0x25
 8006d4c:	d1f9      	bne.n	8006d42 <_vfiprintf_r+0x96>
 8006d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d52:	d00b      	beq.n	8006d6c <_vfiprintf_r+0xc0>
 8006d54:	465b      	mov	r3, fp
 8006d56:	4622      	mov	r2, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff ff94 	bl	8006c88 <__sfputs_r>
 8006d60:	3001      	adds	r0, #1
 8006d62:	f000 80aa 	beq.w	8006eba <_vfiprintf_r+0x20e>
 8006d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d68:	445a      	add	r2, fp
 8006d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80a2 	beq.w	8006eba <_vfiprintf_r+0x20e>
 8006d76:	2300      	movs	r3, #0
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d80:	f10a 0a01 	add.w	sl, sl, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	9307      	str	r3, [sp, #28]
 8006d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d8e:	4654      	mov	r4, sl
 8006d90:	2205      	movs	r2, #5
 8006d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d96:	4858      	ldr	r0, [pc, #352]	; (8006ef8 <_vfiprintf_r+0x24c>)
 8006d98:	f7f9 fa42 	bl	8000220 <memchr>
 8006d9c:	9a04      	ldr	r2, [sp, #16]
 8006d9e:	b9d8      	cbnz	r0, 8006dd8 <_vfiprintf_r+0x12c>
 8006da0:	06d1      	lsls	r1, r2, #27
 8006da2:	bf44      	itt	mi
 8006da4:	2320      	movmi	r3, #32
 8006da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006daa:	0713      	lsls	r3, r2, #28
 8006dac:	bf44      	itt	mi
 8006dae:	232b      	movmi	r3, #43	; 0x2b
 8006db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db4:	f89a 3000 	ldrb.w	r3, [sl]
 8006db8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dba:	d015      	beq.n	8006de8 <_vfiprintf_r+0x13c>
 8006dbc:	9a07      	ldr	r2, [sp, #28]
 8006dbe:	4654      	mov	r4, sl
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	f04f 0c0a 	mov.w	ip, #10
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dcc:	3b30      	subs	r3, #48	; 0x30
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d94e      	bls.n	8006e70 <_vfiprintf_r+0x1c4>
 8006dd2:	b1b0      	cbz	r0, 8006e02 <_vfiprintf_r+0x156>
 8006dd4:	9207      	str	r2, [sp, #28]
 8006dd6:	e014      	b.n	8006e02 <_vfiprintf_r+0x156>
 8006dd8:	eba0 0308 	sub.w	r3, r0, r8
 8006ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8006de0:	4313      	orrs	r3, r2
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	46a2      	mov	sl, r4
 8006de6:	e7d2      	b.n	8006d8e <_vfiprintf_r+0xe2>
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	1d19      	adds	r1, r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	9103      	str	r1, [sp, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	bfbb      	ittet	lt
 8006df4:	425b      	neglt	r3, r3
 8006df6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dfa:	9307      	strge	r3, [sp, #28]
 8006dfc:	9307      	strlt	r3, [sp, #28]
 8006dfe:	bfb8      	it	lt
 8006e00:	9204      	strlt	r2, [sp, #16]
 8006e02:	7823      	ldrb	r3, [r4, #0]
 8006e04:	2b2e      	cmp	r3, #46	; 0x2e
 8006e06:	d10c      	bne.n	8006e22 <_vfiprintf_r+0x176>
 8006e08:	7863      	ldrb	r3, [r4, #1]
 8006e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0c:	d135      	bne.n	8006e7a <_vfiprintf_r+0x1ce>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d1a      	adds	r2, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9203      	str	r2, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfb8      	it	lt
 8006e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e1e:	3402      	adds	r4, #2
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f08 <_vfiprintf_r+0x25c>
 8006e26:	7821      	ldrb	r1, [r4, #0]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	f7f9 f9f8 	bl	8000220 <memchr>
 8006e30:	b140      	cbz	r0, 8006e44 <_vfiprintf_r+0x198>
 8006e32:	2340      	movs	r3, #64	; 0x40
 8006e34:	eba0 000a 	sub.w	r0, r0, sl
 8006e38:	fa03 f000 	lsl.w	r0, r3, r0
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	4303      	orrs	r3, r0
 8006e40:	3401      	adds	r4, #1
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e48:	482c      	ldr	r0, [pc, #176]	; (8006efc <_vfiprintf_r+0x250>)
 8006e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e4e:	2206      	movs	r2, #6
 8006e50:	f7f9 f9e6 	bl	8000220 <memchr>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d03f      	beq.n	8006ed8 <_vfiprintf_r+0x22c>
 8006e58:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <_vfiprintf_r+0x254>)
 8006e5a:	bb1b      	cbnz	r3, 8006ea4 <_vfiprintf_r+0x1f8>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	3307      	adds	r3, #7
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	3308      	adds	r3, #8
 8006e66:	9303      	str	r3, [sp, #12]
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	443b      	add	r3, r7
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	e767      	b.n	8006d40 <_vfiprintf_r+0x94>
 8006e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e74:	460c      	mov	r4, r1
 8006e76:	2001      	movs	r0, #1
 8006e78:	e7a5      	b.n	8006dc6 <_vfiprintf_r+0x11a>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	3401      	adds	r4, #1
 8006e7e:	9305      	str	r3, [sp, #20]
 8006e80:	4619      	mov	r1, r3
 8006e82:	f04f 0c0a 	mov.w	ip, #10
 8006e86:	4620      	mov	r0, r4
 8006e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8c:	3a30      	subs	r2, #48	; 0x30
 8006e8e:	2a09      	cmp	r2, #9
 8006e90:	d903      	bls.n	8006e9a <_vfiprintf_r+0x1ee>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c5      	beq.n	8006e22 <_vfiprintf_r+0x176>
 8006e96:	9105      	str	r1, [sp, #20]
 8006e98:	e7c3      	b.n	8006e22 <_vfiprintf_r+0x176>
 8006e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e7f0      	b.n	8006e86 <_vfiprintf_r+0x1da>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <_vfiprintf_r+0x258>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7fd feda 	bl	8004c68 <_printf_float>
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	1c78      	adds	r0, r7, #1
 8006eb8:	d1d6      	bne.n	8006e68 <_vfiprintf_r+0x1bc>
 8006eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ebc:	07d9      	lsls	r1, r3, #31
 8006ebe:	d405      	bmi.n	8006ecc <_vfiprintf_r+0x220>
 8006ec0:	89ab      	ldrh	r3, [r5, #12]
 8006ec2:	059a      	lsls	r2, r3, #22
 8006ec4:	d402      	bmi.n	8006ecc <_vfiprintf_r+0x220>
 8006ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ec8:	f7ff fe92 	bl	8006bf0 <__retarget_lock_release_recursive>
 8006ecc:	89ab      	ldrh	r3, [r5, #12]
 8006ece:	065b      	lsls	r3, r3, #25
 8006ed0:	f53f af12 	bmi.w	8006cf8 <_vfiprintf_r+0x4c>
 8006ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ed6:	e711      	b.n	8006cfc <_vfiprintf_r+0x50>
 8006ed8:	ab03      	add	r3, sp, #12
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	462a      	mov	r2, r5
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <_vfiprintf_r+0x258>)
 8006ee0:	a904      	add	r1, sp, #16
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7fe f964 	bl	80051b0 <_printf_i>
 8006ee8:	e7e4      	b.n	8006eb4 <_vfiprintf_r+0x208>
 8006eea:	bf00      	nop
 8006eec:	0807b9ec 	.word	0x0807b9ec
 8006ef0:	0807ba0c 	.word	0x0807ba0c
 8006ef4:	0807b9cc 	.word	0x0807b9cc
 8006ef8:	0807b874 	.word	0x0807b874
 8006efc:	0807b87e 	.word	0x0807b87e
 8006f00:	08004c69 	.word	0x08004c69
 8006f04:	08006c89 	.word	0x08006c89
 8006f08:	0807b87a 	.word	0x0807b87a

08006f0c <__swbuf_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	4605      	mov	r5, r0
 8006f14:	b118      	cbz	r0, 8006f1e <__swbuf_r+0x12>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <__swbuf_r+0x12>
 8006f1a:	f000 f9e7 	bl	80072ec <__sinit>
 8006f1e:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <__swbuf_r+0x98>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d12b      	bne.n	8006f7c <__swbuf_r+0x70>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	69a3      	ldr	r3, [r4, #24]
 8006f28:	60a3      	str	r3, [r4, #8]
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	071a      	lsls	r2, r3, #28
 8006f2e:	d52f      	bpl.n	8006f90 <__swbuf_r+0x84>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	b36b      	cbz	r3, 8006f90 <__swbuf_r+0x84>
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	1ac0      	subs	r0, r0, r3
 8006f3a:	6963      	ldr	r3, [r4, #20]
 8006f3c:	b2f6      	uxtb	r6, r6
 8006f3e:	4283      	cmp	r3, r0
 8006f40:	4637      	mov	r7, r6
 8006f42:	dc04      	bgt.n	8006f4e <__swbuf_r+0x42>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 f93c 	bl	80071c4 <_fflush_r>
 8006f4c:	bb30      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	6022      	str	r2, [r4, #0]
 8006f5a:	701e      	strb	r6, [r3, #0]
 8006f5c:	6963      	ldr	r3, [r4, #20]
 8006f5e:	3001      	adds	r0, #1
 8006f60:	4283      	cmp	r3, r0
 8006f62:	d004      	beq.n	8006f6e <__swbuf_r+0x62>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d506      	bpl.n	8006f78 <__swbuf_r+0x6c>
 8006f6a:	2e0a      	cmp	r6, #10
 8006f6c:	d104      	bne.n	8006f78 <__swbuf_r+0x6c>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 f927 	bl	80071c4 <_fflush_r>
 8006f76:	b988      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f78:	4638      	mov	r0, r7
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <__swbuf_r+0x9c>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	d101      	bne.n	8006f86 <__swbuf_r+0x7a>
 8006f82:	68ac      	ldr	r4, [r5, #8]
 8006f84:	e7cf      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <__swbuf_r+0xa0>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	bf08      	it	eq
 8006f8c:	68ec      	ldreq	r4, [r5, #12]
 8006f8e:	e7ca      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f81a 	bl	8006fcc <__swsetup_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0cb      	beq.n	8006f34 <__swbuf_r+0x28>
 8006f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa0:	e7ea      	b.n	8006f78 <__swbuf_r+0x6c>
 8006fa2:	bf00      	nop
 8006fa4:	0807b9ec 	.word	0x0807b9ec
 8006fa8:	0807ba0c 	.word	0x0807ba0c
 8006fac:	0807b9cc 	.word	0x0807b9cc

08006fb0 <__ascii_wctomb>:
 8006fb0:	b149      	cbz	r1, 8006fc6 <__ascii_wctomb+0x16>
 8006fb2:	2aff      	cmp	r2, #255	; 0xff
 8006fb4:	bf85      	ittet	hi
 8006fb6:	238a      	movhi	r3, #138	; 0x8a
 8006fb8:	6003      	strhi	r3, [r0, #0]
 8006fba:	700a      	strbls	r2, [r1, #0]
 8006fbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006fc0:	bf98      	it	ls
 8006fc2:	2001      	movls	r0, #1
 8006fc4:	4770      	bx	lr
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	4770      	bx	lr
	...

08006fcc <__swsetup_r>:
 8006fcc:	4b32      	ldr	r3, [pc, #200]	; (8007098 <__swsetup_r+0xcc>)
 8006fce:	b570      	push	{r4, r5, r6, lr}
 8006fd0:	681d      	ldr	r5, [r3, #0]
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	b125      	cbz	r5, 8006fe2 <__swsetup_r+0x16>
 8006fd8:	69ab      	ldr	r3, [r5, #24]
 8006fda:	b913      	cbnz	r3, 8006fe2 <__swsetup_r+0x16>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f000 f985 	bl	80072ec <__sinit>
 8006fe2:	4b2e      	ldr	r3, [pc, #184]	; (800709c <__swsetup_r+0xd0>)
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d10f      	bne.n	8007008 <__swsetup_r+0x3c>
 8006fe8:	686c      	ldr	r4, [r5, #4]
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ff0:	0719      	lsls	r1, r3, #28
 8006ff2:	d42c      	bmi.n	800704e <__swsetup_r+0x82>
 8006ff4:	06dd      	lsls	r5, r3, #27
 8006ff6:	d411      	bmi.n	800701c <__swsetup_r+0x50>
 8006ff8:	2309      	movs	r3, #9
 8006ffa:	6033      	str	r3, [r6, #0]
 8006ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	f04f 30ff 	mov.w	r0, #4294967295
 8007006:	e03e      	b.n	8007086 <__swsetup_r+0xba>
 8007008:	4b25      	ldr	r3, [pc, #148]	; (80070a0 <__swsetup_r+0xd4>)
 800700a:	429c      	cmp	r4, r3
 800700c:	d101      	bne.n	8007012 <__swsetup_r+0x46>
 800700e:	68ac      	ldr	r4, [r5, #8]
 8007010:	e7eb      	b.n	8006fea <__swsetup_r+0x1e>
 8007012:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <__swsetup_r+0xd8>)
 8007014:	429c      	cmp	r4, r3
 8007016:	bf08      	it	eq
 8007018:	68ec      	ldreq	r4, [r5, #12]
 800701a:	e7e6      	b.n	8006fea <__swsetup_r+0x1e>
 800701c:	0758      	lsls	r0, r3, #29
 800701e:	d512      	bpl.n	8007046 <__swsetup_r+0x7a>
 8007020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007022:	b141      	cbz	r1, 8007036 <__swsetup_r+0x6a>
 8007024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007028:	4299      	cmp	r1, r3
 800702a:	d002      	beq.n	8007032 <__swsetup_r+0x66>
 800702c:	4630      	mov	r0, r6
 800702e:	f7fd fcd1 	bl	80049d4 <_free_r>
 8007032:	2300      	movs	r3, #0
 8007034:	6363      	str	r3, [r4, #52]	; 0x34
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	2300      	movs	r3, #0
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f043 0308 	orr.w	r3, r3, #8
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	6923      	ldr	r3, [r4, #16]
 8007050:	b94b      	cbnz	r3, 8007066 <__swsetup_r+0x9a>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705c:	d003      	beq.n	8007066 <__swsetup_r+0x9a>
 800705e:	4621      	mov	r1, r4
 8007060:	4630      	mov	r0, r6
 8007062:	f000 fa05 	bl	8007470 <__smakebuf_r>
 8007066:	89a0      	ldrh	r0, [r4, #12]
 8007068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800706c:	f010 0301 	ands.w	r3, r0, #1
 8007070:	d00a      	beq.n	8007088 <__swsetup_r+0xbc>
 8007072:	2300      	movs	r3, #0
 8007074:	60a3      	str	r3, [r4, #8]
 8007076:	6963      	ldr	r3, [r4, #20]
 8007078:	425b      	negs	r3, r3
 800707a:	61a3      	str	r3, [r4, #24]
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	b943      	cbnz	r3, 8007092 <__swsetup_r+0xc6>
 8007080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007084:	d1ba      	bne.n	8006ffc <__swsetup_r+0x30>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	0781      	lsls	r1, r0, #30
 800708a:	bf58      	it	pl
 800708c:	6963      	ldrpl	r3, [r4, #20]
 800708e:	60a3      	str	r3, [r4, #8]
 8007090:	e7f4      	b.n	800707c <__swsetup_r+0xb0>
 8007092:	2000      	movs	r0, #0
 8007094:	e7f7      	b.n	8007086 <__swsetup_r+0xba>
 8007096:	bf00      	nop
 8007098:	200006dc 	.word	0x200006dc
 800709c:	0807b9ec 	.word	0x0807b9ec
 80070a0:	0807ba0c 	.word	0x0807ba0c
 80070a4:	0807b9cc 	.word	0x0807b9cc

080070a8 <abort>:
 80070a8:	b508      	push	{r3, lr}
 80070aa:	2006      	movs	r0, #6
 80070ac:	f000 fa48 	bl	8007540 <raise>
 80070b0:	2001      	movs	r0, #1
 80070b2:	f000 fc6d 	bl	8007990 <_exit>
	...

080070b8 <__sflush_r>:
 80070b8:	898a      	ldrh	r2, [r1, #12]
 80070ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070be:	4605      	mov	r5, r0
 80070c0:	0710      	lsls	r0, r2, #28
 80070c2:	460c      	mov	r4, r1
 80070c4:	d458      	bmi.n	8007178 <__sflush_r+0xc0>
 80070c6:	684b      	ldr	r3, [r1, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	dc05      	bgt.n	80070d8 <__sflush_r+0x20>
 80070cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dc02      	bgt.n	80070d8 <__sflush_r+0x20>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070da:	2e00      	cmp	r6, #0
 80070dc:	d0f9      	beq.n	80070d2 <__sflush_r+0x1a>
 80070de:	2300      	movs	r3, #0
 80070e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070e4:	682f      	ldr	r7, [r5, #0]
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	d032      	beq.n	8007150 <__sflush_r+0x98>
 80070ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	075a      	lsls	r2, r3, #29
 80070f0:	d505      	bpl.n	80070fe <__sflush_r+0x46>
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	1ac0      	subs	r0, r0, r3
 80070f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070f8:	b10b      	cbz	r3, 80070fe <__sflush_r+0x46>
 80070fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070fc:	1ac0      	subs	r0, r0, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	4602      	mov	r2, r0
 8007102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007104:	6a21      	ldr	r1, [r4, #32]
 8007106:	4628      	mov	r0, r5
 8007108:	47b0      	blx	r6
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	d106      	bne.n	800711e <__sflush_r+0x66>
 8007110:	6829      	ldr	r1, [r5, #0]
 8007112:	291d      	cmp	r1, #29
 8007114:	d82c      	bhi.n	8007170 <__sflush_r+0xb8>
 8007116:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <__sflush_r+0x108>)
 8007118:	40ca      	lsrs	r2, r1
 800711a:	07d6      	lsls	r6, r2, #31
 800711c:	d528      	bpl.n	8007170 <__sflush_r+0xb8>
 800711e:	2200      	movs	r2, #0
 8007120:	6062      	str	r2, [r4, #4]
 8007122:	04d9      	lsls	r1, r3, #19
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	6022      	str	r2, [r4, #0]
 8007128:	d504      	bpl.n	8007134 <__sflush_r+0x7c>
 800712a:	1c42      	adds	r2, r0, #1
 800712c:	d101      	bne.n	8007132 <__sflush_r+0x7a>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b903      	cbnz	r3, 8007134 <__sflush_r+0x7c>
 8007132:	6560      	str	r0, [r4, #84]	; 0x54
 8007134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007136:	602f      	str	r7, [r5, #0]
 8007138:	2900      	cmp	r1, #0
 800713a:	d0ca      	beq.n	80070d2 <__sflush_r+0x1a>
 800713c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007140:	4299      	cmp	r1, r3
 8007142:	d002      	beq.n	800714a <__sflush_r+0x92>
 8007144:	4628      	mov	r0, r5
 8007146:	f7fd fc45 	bl	80049d4 <_free_r>
 800714a:	2000      	movs	r0, #0
 800714c:	6360      	str	r0, [r4, #52]	; 0x34
 800714e:	e7c1      	b.n	80070d4 <__sflush_r+0x1c>
 8007150:	6a21      	ldr	r1, [r4, #32]
 8007152:	2301      	movs	r3, #1
 8007154:	4628      	mov	r0, r5
 8007156:	47b0      	blx	r6
 8007158:	1c41      	adds	r1, r0, #1
 800715a:	d1c7      	bne.n	80070ec <__sflush_r+0x34>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0c4      	beq.n	80070ec <__sflush_r+0x34>
 8007162:	2b1d      	cmp	r3, #29
 8007164:	d001      	beq.n	800716a <__sflush_r+0xb2>
 8007166:	2b16      	cmp	r3, #22
 8007168:	d101      	bne.n	800716e <__sflush_r+0xb6>
 800716a:	602f      	str	r7, [r5, #0]
 800716c:	e7b1      	b.n	80070d2 <__sflush_r+0x1a>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	e7ad      	b.n	80070d4 <__sflush_r+0x1c>
 8007178:	690f      	ldr	r7, [r1, #16]
 800717a:	2f00      	cmp	r7, #0
 800717c:	d0a9      	beq.n	80070d2 <__sflush_r+0x1a>
 800717e:	0793      	lsls	r3, r2, #30
 8007180:	680e      	ldr	r6, [r1, #0]
 8007182:	bf08      	it	eq
 8007184:	694b      	ldreq	r3, [r1, #20]
 8007186:	600f      	str	r7, [r1, #0]
 8007188:	bf18      	it	ne
 800718a:	2300      	movne	r3, #0
 800718c:	eba6 0807 	sub.w	r8, r6, r7
 8007190:	608b      	str	r3, [r1, #8]
 8007192:	f1b8 0f00 	cmp.w	r8, #0
 8007196:	dd9c      	ble.n	80070d2 <__sflush_r+0x1a>
 8007198:	6a21      	ldr	r1, [r4, #32]
 800719a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800719c:	4643      	mov	r3, r8
 800719e:	463a      	mov	r2, r7
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b0      	blx	r6
 80071a4:	2800      	cmp	r0, #0
 80071a6:	dc06      	bgt.n	80071b6 <__sflush_r+0xfe>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e78e      	b.n	80070d4 <__sflush_r+0x1c>
 80071b6:	4407      	add	r7, r0
 80071b8:	eba8 0800 	sub.w	r8, r8, r0
 80071bc:	e7e9      	b.n	8007192 <__sflush_r+0xda>
 80071be:	bf00      	nop
 80071c0:	20400001 	.word	0x20400001

080071c4 <_fflush_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	690b      	ldr	r3, [r1, #16]
 80071c8:	4605      	mov	r5, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	b913      	cbnz	r3, 80071d4 <_fflush_r+0x10>
 80071ce:	2500      	movs	r5, #0
 80071d0:	4628      	mov	r0, r5
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	b118      	cbz	r0, 80071de <_fflush_r+0x1a>
 80071d6:	6983      	ldr	r3, [r0, #24]
 80071d8:	b90b      	cbnz	r3, 80071de <_fflush_r+0x1a>
 80071da:	f000 f887 	bl	80072ec <__sinit>
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <_fflush_r+0x6c>)
 80071e0:	429c      	cmp	r4, r3
 80071e2:	d11b      	bne.n	800721c <_fflush_r+0x58>
 80071e4:	686c      	ldr	r4, [r5, #4]
 80071e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0ef      	beq.n	80071ce <_fflush_r+0xa>
 80071ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071f0:	07d0      	lsls	r0, r2, #31
 80071f2:	d404      	bmi.n	80071fe <_fflush_r+0x3a>
 80071f4:	0599      	lsls	r1, r3, #22
 80071f6:	d402      	bmi.n	80071fe <_fflush_r+0x3a>
 80071f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fa:	f7ff fcf8 	bl	8006bee <__retarget_lock_acquire_recursive>
 80071fe:	4628      	mov	r0, r5
 8007200:	4621      	mov	r1, r4
 8007202:	f7ff ff59 	bl	80070b8 <__sflush_r>
 8007206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007208:	07da      	lsls	r2, r3, #31
 800720a:	4605      	mov	r5, r0
 800720c:	d4e0      	bmi.n	80071d0 <_fflush_r+0xc>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	059b      	lsls	r3, r3, #22
 8007212:	d4dd      	bmi.n	80071d0 <_fflush_r+0xc>
 8007214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007216:	f7ff fceb 	bl	8006bf0 <__retarget_lock_release_recursive>
 800721a:	e7d9      	b.n	80071d0 <_fflush_r+0xc>
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <_fflush_r+0x70>)
 800721e:	429c      	cmp	r4, r3
 8007220:	d101      	bne.n	8007226 <_fflush_r+0x62>
 8007222:	68ac      	ldr	r4, [r5, #8]
 8007224:	e7df      	b.n	80071e6 <_fflush_r+0x22>
 8007226:	4b04      	ldr	r3, [pc, #16]	; (8007238 <_fflush_r+0x74>)
 8007228:	429c      	cmp	r4, r3
 800722a:	bf08      	it	eq
 800722c:	68ec      	ldreq	r4, [r5, #12]
 800722e:	e7da      	b.n	80071e6 <_fflush_r+0x22>
 8007230:	0807b9ec 	.word	0x0807b9ec
 8007234:	0807ba0c 	.word	0x0807ba0c
 8007238:	0807b9cc 	.word	0x0807b9cc

0800723c <std>:
 800723c:	2300      	movs	r3, #0
 800723e:	b510      	push	{r4, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	e9c0 3300 	strd	r3, r3, [r0]
 8007246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800724a:	6083      	str	r3, [r0, #8]
 800724c:	8181      	strh	r1, [r0, #12]
 800724e:	6643      	str	r3, [r0, #100]	; 0x64
 8007250:	81c2      	strh	r2, [r0, #14]
 8007252:	6183      	str	r3, [r0, #24]
 8007254:	4619      	mov	r1, r3
 8007256:	2208      	movs	r2, #8
 8007258:	305c      	adds	r0, #92	; 0x5c
 800725a:	f7fd fbb3 	bl	80049c4 <memset>
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <std+0x38>)
 8007260:	6263      	str	r3, [r4, #36]	; 0x24
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <std+0x3c>)
 8007264:	62a3      	str	r3, [r4, #40]	; 0x28
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <std+0x40>)
 8007268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <std+0x44>)
 800726c:	6224      	str	r4, [r4, #32]
 800726e:	6323      	str	r3, [r4, #48]	; 0x30
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	08007579 	.word	0x08007579
 8007278:	0800759b 	.word	0x0800759b
 800727c:	080075d3 	.word	0x080075d3
 8007280:	080075f7 	.word	0x080075f7

08007284 <_cleanup_r>:
 8007284:	4901      	ldr	r1, [pc, #4]	; (800728c <_cleanup_r+0x8>)
 8007286:	f000 b8af 	b.w	80073e8 <_fwalk_reent>
 800728a:	bf00      	nop
 800728c:	080071c5 	.word	0x080071c5

08007290 <__sfmoreglue>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	1e4a      	subs	r2, r1, #1
 8007294:	2568      	movs	r5, #104	; 0x68
 8007296:	4355      	muls	r5, r2
 8007298:	460e      	mov	r6, r1
 800729a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800729e:	f7fd fbe9 	bl	8004a74 <_malloc_r>
 80072a2:	4604      	mov	r4, r0
 80072a4:	b140      	cbz	r0, 80072b8 <__sfmoreglue+0x28>
 80072a6:	2100      	movs	r1, #0
 80072a8:	e9c0 1600 	strd	r1, r6, [r0]
 80072ac:	300c      	adds	r0, #12
 80072ae:	60a0      	str	r0, [r4, #8]
 80072b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072b4:	f7fd fb86 	bl	80049c4 <memset>
 80072b8:	4620      	mov	r0, r4
 80072ba:	bd70      	pop	{r4, r5, r6, pc}

080072bc <__sfp_lock_acquire>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__sfp_lock_acquire+0x8>)
 80072be:	f7ff bc96 	b.w	8006bee <__retarget_lock_acquire_recursive>
 80072c2:	bf00      	nop
 80072c4:	20000a00 	.word	0x20000a00

080072c8 <__sfp_lock_release>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__sfp_lock_release+0x8>)
 80072ca:	f7ff bc91 	b.w	8006bf0 <__retarget_lock_release_recursive>
 80072ce:	bf00      	nop
 80072d0:	20000a00 	.word	0x20000a00

080072d4 <__sinit_lock_acquire>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__sinit_lock_acquire+0x8>)
 80072d6:	f7ff bc8a 	b.w	8006bee <__retarget_lock_acquire_recursive>
 80072da:	bf00      	nop
 80072dc:	200009fb 	.word	0x200009fb

080072e0 <__sinit_lock_release>:
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <__sinit_lock_release+0x8>)
 80072e2:	f7ff bc85 	b.w	8006bf0 <__retarget_lock_release_recursive>
 80072e6:	bf00      	nop
 80072e8:	200009fb 	.word	0x200009fb

080072ec <__sinit>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	f7ff fff0 	bl	80072d4 <__sinit_lock_acquire>
 80072f4:	69a3      	ldr	r3, [r4, #24]
 80072f6:	b11b      	cbz	r3, 8007300 <__sinit+0x14>
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	f7ff bff0 	b.w	80072e0 <__sinit_lock_release>
 8007300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007304:	6523      	str	r3, [r4, #80]	; 0x50
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <__sinit+0x68>)
 8007308:	4a13      	ldr	r2, [pc, #76]	; (8007358 <__sinit+0x6c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	62a2      	str	r2, [r4, #40]	; 0x28
 800730e:	42a3      	cmp	r3, r4
 8007310:	bf04      	itt	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	61a3      	streq	r3, [r4, #24]
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f820 	bl	800735c <__sfp>
 800731c:	6060      	str	r0, [r4, #4]
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f81c 	bl	800735c <__sfp>
 8007324:	60a0      	str	r0, [r4, #8]
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f818 	bl	800735c <__sfp>
 800732c:	2200      	movs	r2, #0
 800732e:	60e0      	str	r0, [r4, #12]
 8007330:	2104      	movs	r1, #4
 8007332:	6860      	ldr	r0, [r4, #4]
 8007334:	f7ff ff82 	bl	800723c <std>
 8007338:	68a0      	ldr	r0, [r4, #8]
 800733a:	2201      	movs	r2, #1
 800733c:	2109      	movs	r1, #9
 800733e:	f7ff ff7d 	bl	800723c <std>
 8007342:	68e0      	ldr	r0, [r4, #12]
 8007344:	2202      	movs	r2, #2
 8007346:	2112      	movs	r1, #18
 8007348:	f7ff ff78 	bl	800723c <std>
 800734c:	2301      	movs	r3, #1
 800734e:	61a3      	str	r3, [r4, #24]
 8007350:	e7d2      	b.n	80072f8 <__sinit+0xc>
 8007352:	bf00      	nop
 8007354:	0807b648 	.word	0x0807b648
 8007358:	08007285 	.word	0x08007285

0800735c <__sfp>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	4607      	mov	r7, r0
 8007360:	f7ff ffac 	bl	80072bc <__sfp_lock_acquire>
 8007364:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <__sfp+0x84>)
 8007366:	681e      	ldr	r6, [r3, #0]
 8007368:	69b3      	ldr	r3, [r6, #24]
 800736a:	b913      	cbnz	r3, 8007372 <__sfp+0x16>
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ffbd 	bl	80072ec <__sinit>
 8007372:	3648      	adds	r6, #72	; 0x48
 8007374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007378:	3b01      	subs	r3, #1
 800737a:	d503      	bpl.n	8007384 <__sfp+0x28>
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	b30b      	cbz	r3, 80073c4 <__sfp+0x68>
 8007380:	6836      	ldr	r6, [r6, #0]
 8007382:	e7f7      	b.n	8007374 <__sfp+0x18>
 8007384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007388:	b9d5      	cbnz	r5, 80073c0 <__sfp+0x64>
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <__sfp+0x88>)
 800738c:	60e3      	str	r3, [r4, #12]
 800738e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007392:	6665      	str	r5, [r4, #100]	; 0x64
 8007394:	f7ff fc2a 	bl	8006bec <__retarget_lock_init_recursive>
 8007398:	f7ff ff96 	bl	80072c8 <__sfp_lock_release>
 800739c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073a4:	6025      	str	r5, [r4, #0]
 80073a6:	61a5      	str	r5, [r4, #24]
 80073a8:	2208      	movs	r2, #8
 80073aa:	4629      	mov	r1, r5
 80073ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073b0:	f7fd fb08 	bl	80049c4 <memset>
 80073b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073bc:	4620      	mov	r0, r4
 80073be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c0:	3468      	adds	r4, #104	; 0x68
 80073c2:	e7d9      	b.n	8007378 <__sfp+0x1c>
 80073c4:	2104      	movs	r1, #4
 80073c6:	4638      	mov	r0, r7
 80073c8:	f7ff ff62 	bl	8007290 <__sfmoreglue>
 80073cc:	4604      	mov	r4, r0
 80073ce:	6030      	str	r0, [r6, #0]
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d1d5      	bne.n	8007380 <__sfp+0x24>
 80073d4:	f7ff ff78 	bl	80072c8 <__sfp_lock_release>
 80073d8:	230c      	movs	r3, #12
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	e7ee      	b.n	80073bc <__sfp+0x60>
 80073de:	bf00      	nop
 80073e0:	0807b648 	.word	0x0807b648
 80073e4:	ffff0001 	.word	0xffff0001

080073e8 <_fwalk_reent>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	4606      	mov	r6, r0
 80073ee:	4688      	mov	r8, r1
 80073f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073f4:	2700      	movs	r7, #0
 80073f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073fa:	f1b9 0901 	subs.w	r9, r9, #1
 80073fe:	d505      	bpl.n	800740c <_fwalk_reent+0x24>
 8007400:	6824      	ldr	r4, [r4, #0]
 8007402:	2c00      	cmp	r4, #0
 8007404:	d1f7      	bne.n	80073f6 <_fwalk_reent+0xe>
 8007406:	4638      	mov	r0, r7
 8007408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d907      	bls.n	8007422 <_fwalk_reent+0x3a>
 8007412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007416:	3301      	adds	r3, #1
 8007418:	d003      	beq.n	8007422 <_fwalk_reent+0x3a>
 800741a:	4629      	mov	r1, r5
 800741c:	4630      	mov	r0, r6
 800741e:	47c0      	blx	r8
 8007420:	4307      	orrs	r7, r0
 8007422:	3568      	adds	r5, #104	; 0x68
 8007424:	e7e9      	b.n	80073fa <_fwalk_reent+0x12>

08007426 <__swhatbuf_r>:
 8007426:	b570      	push	{r4, r5, r6, lr}
 8007428:	460e      	mov	r6, r1
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	2900      	cmp	r1, #0
 8007430:	b096      	sub	sp, #88	; 0x58
 8007432:	4614      	mov	r4, r2
 8007434:	461d      	mov	r5, r3
 8007436:	da07      	bge.n	8007448 <__swhatbuf_r+0x22>
 8007438:	2300      	movs	r3, #0
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	89b3      	ldrh	r3, [r6, #12]
 800743e:	061a      	lsls	r2, r3, #24
 8007440:	d410      	bmi.n	8007464 <__swhatbuf_r+0x3e>
 8007442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007446:	e00e      	b.n	8007466 <__swhatbuf_r+0x40>
 8007448:	466a      	mov	r2, sp
 800744a:	f000 f8fb 	bl	8007644 <_fstat_r>
 800744e:	2800      	cmp	r0, #0
 8007450:	dbf2      	blt.n	8007438 <__swhatbuf_r+0x12>
 8007452:	9a01      	ldr	r2, [sp, #4]
 8007454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800745c:	425a      	negs	r2, r3
 800745e:	415a      	adcs	r2, r3
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	e7ee      	b.n	8007442 <__swhatbuf_r+0x1c>
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	2000      	movs	r0, #0
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	b016      	add	sp, #88	; 0x58
 800746c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007470 <__smakebuf_r>:
 8007470:	898b      	ldrh	r3, [r1, #12]
 8007472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007474:	079d      	lsls	r5, r3, #30
 8007476:	4606      	mov	r6, r0
 8007478:	460c      	mov	r4, r1
 800747a:	d507      	bpl.n	800748c <__smakebuf_r+0x1c>
 800747c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	2301      	movs	r3, #1
 8007486:	6163      	str	r3, [r4, #20]
 8007488:	b002      	add	sp, #8
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	ab01      	add	r3, sp, #4
 800748e:	466a      	mov	r2, sp
 8007490:	f7ff ffc9 	bl	8007426 <__swhatbuf_r>
 8007494:	9900      	ldr	r1, [sp, #0]
 8007496:	4605      	mov	r5, r0
 8007498:	4630      	mov	r0, r6
 800749a:	f7fd faeb 	bl	8004a74 <_malloc_r>
 800749e:	b948      	cbnz	r0, 80074b4 <__smakebuf_r+0x44>
 80074a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a4:	059a      	lsls	r2, r3, #22
 80074a6:	d4ef      	bmi.n	8007488 <__smakebuf_r+0x18>
 80074a8:	f023 0303 	bic.w	r3, r3, #3
 80074ac:	f043 0302 	orr.w	r3, r3, #2
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	e7e3      	b.n	800747c <__smakebuf_r+0xc>
 80074b4:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <__smakebuf_r+0x7c>)
 80074b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	6020      	str	r0, [r4, #0]
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	6163      	str	r3, [r4, #20]
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	6120      	str	r0, [r4, #16]
 80074ca:	b15b      	cbz	r3, 80074e4 <__smakebuf_r+0x74>
 80074cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 f8c9 	bl	8007668 <_isatty_r>
 80074d6:	b128      	cbz	r0, 80074e4 <__smakebuf_r+0x74>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	89a0      	ldrh	r0, [r4, #12]
 80074e6:	4305      	orrs	r5, r0
 80074e8:	81a5      	strh	r5, [r4, #12]
 80074ea:	e7cd      	b.n	8007488 <__smakebuf_r+0x18>
 80074ec:	08007285 	.word	0x08007285

080074f0 <_raise_r>:
 80074f0:	291f      	cmp	r1, #31
 80074f2:	b538      	push	{r3, r4, r5, lr}
 80074f4:	4604      	mov	r4, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	d904      	bls.n	8007504 <_raise_r+0x14>
 80074fa:	2316      	movs	r3, #22
 80074fc:	6003      	str	r3, [r0, #0]
 80074fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007506:	b112      	cbz	r2, 800750e <_raise_r+0x1e>
 8007508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800750c:	b94b      	cbnz	r3, 8007522 <_raise_r+0x32>
 800750e:	4620      	mov	r0, r4
 8007510:	f000 f830 	bl	8007574 <_getpid_r>
 8007514:	462a      	mov	r2, r5
 8007516:	4601      	mov	r1, r0
 8007518:	4620      	mov	r0, r4
 800751a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800751e:	f000 b817 	b.w	8007550 <_kill_r>
 8007522:	2b01      	cmp	r3, #1
 8007524:	d00a      	beq.n	800753c <_raise_r+0x4c>
 8007526:	1c59      	adds	r1, r3, #1
 8007528:	d103      	bne.n	8007532 <_raise_r+0x42>
 800752a:	2316      	movs	r3, #22
 800752c:	6003      	str	r3, [r0, #0]
 800752e:	2001      	movs	r0, #1
 8007530:	e7e7      	b.n	8007502 <_raise_r+0x12>
 8007532:	2400      	movs	r4, #0
 8007534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007538:	4628      	mov	r0, r5
 800753a:	4798      	blx	r3
 800753c:	2000      	movs	r0, #0
 800753e:	e7e0      	b.n	8007502 <_raise_r+0x12>

08007540 <raise>:
 8007540:	4b02      	ldr	r3, [pc, #8]	; (800754c <raise+0xc>)
 8007542:	4601      	mov	r1, r0
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	f7ff bfd3 	b.w	80074f0 <_raise_r>
 800754a:	bf00      	nop
 800754c:	200006dc 	.word	0x200006dc

08007550 <_kill_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d07      	ldr	r5, [pc, #28]	; (8007570 <_kill_r+0x20>)
 8007554:	2300      	movs	r3, #0
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	f000 f9f7 	bl	8007950 <_kill>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	d102      	bne.n	800756c <_kill_r+0x1c>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	b103      	cbz	r3, 800756c <_kill_r+0x1c>
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	bd38      	pop	{r3, r4, r5, pc}
 800756e:	bf00      	nop
 8007570:	200009f4 	.word	0x200009f4

08007574 <_getpid_r>:
 8007574:	f000 b9dc 	b.w	8007930 <_getpid>

08007578 <__sread>:
 8007578:	b510      	push	{r4, lr}
 800757a:	460c      	mov	r4, r1
 800757c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007580:	f000 f894 	bl	80076ac <_read_r>
 8007584:	2800      	cmp	r0, #0
 8007586:	bfab      	itete	ge
 8007588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800758a:	89a3      	ldrhlt	r3, [r4, #12]
 800758c:	181b      	addge	r3, r3, r0
 800758e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007592:	bfac      	ite	ge
 8007594:	6563      	strge	r3, [r4, #84]	; 0x54
 8007596:	81a3      	strhlt	r3, [r4, #12]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__swrite>:
 800759a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759e:	461f      	mov	r7, r3
 80075a0:	898b      	ldrh	r3, [r1, #12]
 80075a2:	05db      	lsls	r3, r3, #23
 80075a4:	4605      	mov	r5, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	4616      	mov	r6, r2
 80075aa:	d505      	bpl.n	80075b8 <__swrite+0x1e>
 80075ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b0:	2302      	movs	r3, #2
 80075b2:	2200      	movs	r2, #0
 80075b4:	f000 f868 	bl	8007688 <_lseek_r>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	4632      	mov	r2, r6
 80075c6:	463b      	mov	r3, r7
 80075c8:	4628      	mov	r0, r5
 80075ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ce:	f000 b817 	b.w	8007600 <_write_r>

080075d2 <__sseek>:
 80075d2:	b510      	push	{r4, lr}
 80075d4:	460c      	mov	r4, r1
 80075d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075da:	f000 f855 	bl	8007688 <_lseek_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	bf15      	itete	ne
 80075e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ee:	81a3      	strheq	r3, [r4, #12]
 80075f0:	bf18      	it	ne
 80075f2:	81a3      	strhne	r3, [r4, #12]
 80075f4:	bd10      	pop	{r4, pc}

080075f6 <__sclose>:
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	f000 b813 	b.w	8007624 <_close_r>
	...

08007600 <_write_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4d07      	ldr	r5, [pc, #28]	; (8007620 <_write_r+0x20>)
 8007604:	4604      	mov	r4, r0
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	2200      	movs	r2, #0
 800760c:	602a      	str	r2, [r5, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f000 f9b6 	bl	8007980 <_write>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_write_r+0x1e>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b103      	cbz	r3, 800761e <_write_r+0x1e>
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	200009f4 	.word	0x200009f4

08007624 <_close_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d06      	ldr	r5, [pc, #24]	; (8007640 <_close_r+0x1c>)
 8007628:	2300      	movs	r3, #0
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	f000 f96e 	bl	8007910 <_close>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_close_r+0x1a>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_close_r+0x1a>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	200009f4 	.word	0x200009f4

08007644 <_fstat_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d07      	ldr	r5, [pc, #28]	; (8007664 <_fstat_r+0x20>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	f000 f965 	bl	8007920 <_fstat>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d102      	bne.n	8007660 <_fstat_r+0x1c>
 800765a:	682b      	ldr	r3, [r5, #0]
 800765c:	b103      	cbz	r3, 8007660 <_fstat_r+0x1c>
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	bd38      	pop	{r3, r4, r5, pc}
 8007662:	bf00      	nop
 8007664:	200009f4 	.word	0x200009f4

08007668 <_isatty_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d06      	ldr	r5, [pc, #24]	; (8007684 <_isatty_r+0x1c>)
 800766c:	2300      	movs	r3, #0
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	602b      	str	r3, [r5, #0]
 8007674:	f000 f964 	bl	8007940 <_isatty>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_isatty_r+0x1a>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_isatty_r+0x1a>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	200009f4 	.word	0x200009f4

08007688 <_lseek_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	; (80076a8 <_lseek_r+0x20>)
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f000 f962 	bl	8007960 <_lseek>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_lseek_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_lseek_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	200009f4 	.word	0x200009f4

080076ac <_read_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d07      	ldr	r5, [pc, #28]	; (80076cc <_read_r+0x20>)
 80076b0:	4604      	mov	r4, r0
 80076b2:	4608      	mov	r0, r1
 80076b4:	4611      	mov	r1, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	602a      	str	r2, [r5, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f000 f958 	bl	8007970 <_read>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_read_r+0x1e>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_read_r+0x1e>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	200009f4 	.word	0x200009f4

080076d0 <expf>:
 80076d0:	b508      	push	{r3, lr}
 80076d2:	ed2d 8b02 	vpush	{d8}
 80076d6:	eef0 8a40 	vmov.f32	s17, s0
 80076da:	f000 f837 	bl	800774c <__ieee754_expf>
 80076de:	4b16      	ldr	r3, [pc, #88]	; (8007738 <expf+0x68>)
 80076e0:	f993 3000 	ldrsb.w	r3, [r3]
 80076e4:	3301      	adds	r3, #1
 80076e6:	eeb0 8a40 	vmov.f32	s16, s0
 80076ea:	d011      	beq.n	8007710 <expf+0x40>
 80076ec:	eeb0 0a68 	vmov.f32	s0, s17
 80076f0:	f000 f900 	bl	80078f4 <finitef>
 80076f4:	b160      	cbz	r0, 8007710 <expf+0x40>
 80076f6:	eddf 7a11 	vldr	s15, [pc, #68]	; 800773c <expf+0x6c>
 80076fa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80076fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007702:	dd0a      	ble.n	800771a <expf+0x4a>
 8007704:	f7fd f91e 	bl	8004944 <__errno>
 8007708:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8007740 <expf+0x70>
 800770c:	2322      	movs	r3, #34	; 0x22
 800770e:	6003      	str	r3, [r0, #0]
 8007710:	eeb0 0a48 	vmov.f32	s0, s16
 8007714:	ecbd 8b02 	vpop	{d8}
 8007718:	bd08      	pop	{r3, pc}
 800771a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007744 <expf+0x74>
 800771e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007726:	d5f3      	bpl.n	8007710 <expf+0x40>
 8007728:	f7fd f90c 	bl	8004944 <__errno>
 800772c:	2322      	movs	r3, #34	; 0x22
 800772e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8007748 <expf+0x78>
 8007732:	6003      	str	r3, [r0, #0]
 8007734:	e7ec      	b.n	8007710 <expf+0x40>
 8007736:	bf00      	nop
 8007738:	200008ac 	.word	0x200008ac
 800773c:	42b17180 	.word	0x42b17180
 8007740:	7f800000 	.word	0x7f800000
 8007744:	c2cff1b5 	.word	0xc2cff1b5
 8007748:	00000000 	.word	0x00000000

0800774c <__ieee754_expf>:
 800774c:	ee10 2a10 	vmov	r2, s0
 8007750:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007754:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007758:	d902      	bls.n	8007760 <__ieee754_expf+0x14>
 800775a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800775e:	4770      	bx	lr
 8007760:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007764:	d106      	bne.n	8007774 <__ieee754_expf+0x28>
 8007766:	eddf 7a51 	vldr	s15, [pc, #324]	; 80078ac <__ieee754_expf+0x160>
 800776a:	2b00      	cmp	r3, #0
 800776c:	bf18      	it	ne
 800776e:	eeb0 0a67 	vmovne.f32	s0, s15
 8007772:	4770      	bx	lr
 8007774:	484e      	ldr	r0, [pc, #312]	; (80078b0 <__ieee754_expf+0x164>)
 8007776:	4282      	cmp	r2, r0
 8007778:	dd04      	ble.n	8007784 <__ieee754_expf+0x38>
 800777a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80078b4 <__ieee754_expf+0x168>
 800777e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007782:	4770      	bx	lr
 8007784:	2a00      	cmp	r2, #0
 8007786:	da03      	bge.n	8007790 <__ieee754_expf+0x44>
 8007788:	4a4b      	ldr	r2, [pc, #300]	; (80078b8 <__ieee754_expf+0x16c>)
 800778a:	4291      	cmp	r1, r2
 800778c:	f200 808a 	bhi.w	80078a4 <__ieee754_expf+0x158>
 8007790:	4a4a      	ldr	r2, [pc, #296]	; (80078bc <__ieee754_expf+0x170>)
 8007792:	4291      	cmp	r1, r2
 8007794:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007798:	d954      	bls.n	8007844 <__ieee754_expf+0xf8>
 800779a:	4a49      	ldr	r2, [pc, #292]	; (80078c0 <__ieee754_expf+0x174>)
 800779c:	4291      	cmp	r1, r2
 800779e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80077a2:	d836      	bhi.n	8007812 <__ieee754_expf+0xc6>
 80077a4:	4947      	ldr	r1, [pc, #284]	; (80078c4 <__ieee754_expf+0x178>)
 80077a6:	4411      	add	r1, r2
 80077a8:	ed91 7a00 	vldr	s14, [r1]
 80077ac:	4946      	ldr	r1, [pc, #280]	; (80078c8 <__ieee754_expf+0x17c>)
 80077ae:	440a      	add	r2, r1
 80077b0:	edd2 7a00 	vldr	s15, [r2]
 80077b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80077b8:	f1c3 0201 	rsb	r2, r3, #1
 80077bc:	1ad2      	subs	r2, r2, r3
 80077be:	ee37 0a67 	vsub.f32	s0, s14, s15
 80077c2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80077c6:	eddf 5a41 	vldr	s11, [pc, #260]	; 80078cc <__ieee754_expf+0x180>
 80077ca:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80078d0 <__ieee754_expf+0x184>
 80077ce:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80077d2:	eddf 5a40 	vldr	s11, [pc, #256]	; 80078d4 <__ieee754_expf+0x188>
 80077d6:	eee5 5a26 	vfma.f32	s11, s10, s13
 80077da:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80078d8 <__ieee754_expf+0x18c>
 80077de:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80077e2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80078dc <__ieee754_expf+0x190>
 80077e6:	eee5 5a26 	vfma.f32	s11, s10, s13
 80077ea:	eeb0 5a40 	vmov.f32	s10, s0
 80077ee:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80077f2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80077f6:	eef0 6a45 	vmov.f32	s13, s10
 80077fa:	ee20 5a05 	vmul.f32	s10, s0, s10
 80077fe:	bb92      	cbnz	r2, 8007866 <__ieee754_expf+0x11a>
 8007800:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007804:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007808:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800780c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8007810:	4770      	bx	lr
 8007812:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <__ieee754_expf+0x194>)
 8007814:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80078e4 <__ieee754_expf+0x198>
 8007818:	4413      	add	r3, r2
 800781a:	edd3 7a00 	vldr	s15, [r3]
 800781e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007822:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80078e8 <__ieee754_expf+0x19c>
 8007826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800782a:	ee17 2a90 	vmov	r2, s15
 800782e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007832:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007836:	eeb0 7a40 	vmov.f32	s14, s0
 800783a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80078ec <__ieee754_expf+0x1a0>
 800783e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007842:	e7bc      	b.n	80077be <__ieee754_expf+0x72>
 8007844:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8007848:	d20b      	bcs.n	8007862 <__ieee754_expf+0x116>
 800784a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80078b4 <__ieee754_expf+0x168>
 800784e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007852:	eef4 6ac6 	vcmpe.f32	s13, s12
 8007856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785a:	dd02      	ble.n	8007862 <__ieee754_expf+0x116>
 800785c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8007860:	4770      	bx	lr
 8007862:	2200      	movs	r2, #0
 8007864:	e7ad      	b.n	80077c2 <__ieee754_expf+0x76>
 8007866:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800786a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800786e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007872:	bfb8      	it	lt
 8007874:	3264      	addlt	r2, #100	; 0x64
 8007876:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800787a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800787e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8007882:	ee17 3a90 	vmov	r3, s15
 8007886:	bfab      	itete	ge
 8007888:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800788c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007890:	ee00 3a10 	vmovge	s0, r3
 8007894:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80078f0 <__ieee754_expf+0x1a4>
 8007898:	bfbc      	itt	lt
 800789a:	ee00 3a10 	vmovlt	s0, r3
 800789e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80078a2:	4770      	bx	lr
 80078a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078ac <__ieee754_expf+0x160>
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	00000000 	.word	0x00000000
 80078b0:	42b17217 	.word	0x42b17217
 80078b4:	7149f2ca 	.word	0x7149f2ca
 80078b8:	42cff1b5 	.word	0x42cff1b5
 80078bc:	3eb17218 	.word	0x3eb17218
 80078c0:	3f851591 	.word	0x3f851591
 80078c4:	0807ba34 	.word	0x0807ba34
 80078c8:	0807ba3c 	.word	0x0807ba3c
 80078cc:	3331bb4c 	.word	0x3331bb4c
 80078d0:	b5ddea0e 	.word	0xb5ddea0e
 80078d4:	388ab355 	.word	0x388ab355
 80078d8:	bb360b61 	.word	0xbb360b61
 80078dc:	3e2aaaab 	.word	0x3e2aaaab
 80078e0:	0807ba2c 	.word	0x0807ba2c
 80078e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80078e8:	3f317180 	.word	0x3f317180
 80078ec:	3717f7d1 	.word	0x3717f7d1
 80078f0:	0d800000 	.word	0x0d800000

080078f4 <finitef>:
 80078f4:	b082      	sub	sp, #8
 80078f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80078fa:	9801      	ldr	r0, [sp, #4]
 80078fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007900:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007904:	bfac      	ite	ge
 8007906:	2000      	movge	r0, #0
 8007908:	2001      	movlt	r0, #1
 800790a:	b002      	add	sp, #8
 800790c:	4770      	bx	lr
	...

08007910 <_close>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <_close+0xc>)
 8007912:	2258      	movs	r2, #88	; 0x58
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f04f 30ff 	mov.w	r0, #4294967295
 800791a:	4770      	bx	lr
 800791c:	200009f4 	.word	0x200009f4

08007920 <_fstat>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <_fstat+0xc>)
 8007922:	2258      	movs	r2, #88	; 0x58
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f04f 30ff 	mov.w	r0, #4294967295
 800792a:	4770      	bx	lr
 800792c:	200009f4 	.word	0x200009f4

08007930 <_getpid>:
 8007930:	4b02      	ldr	r3, [pc, #8]	; (800793c <_getpid+0xc>)
 8007932:	2258      	movs	r2, #88	; 0x58
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f04f 30ff 	mov.w	r0, #4294967295
 800793a:	4770      	bx	lr
 800793c:	200009f4 	.word	0x200009f4

08007940 <_isatty>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <_isatty+0xc>)
 8007942:	2258      	movs	r2, #88	; 0x58
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	2000      	movs	r0, #0
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	200009f4 	.word	0x200009f4

08007950 <_kill>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <_kill+0xc>)
 8007952:	2258      	movs	r2, #88	; 0x58
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	f04f 30ff 	mov.w	r0, #4294967295
 800795a:	4770      	bx	lr
 800795c:	200009f4 	.word	0x200009f4

08007960 <_lseek>:
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <_lseek+0xc>)
 8007962:	2258      	movs	r2, #88	; 0x58
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
 800796a:	4770      	bx	lr
 800796c:	200009f4 	.word	0x200009f4

08007970 <_read>:
 8007970:	4b02      	ldr	r3, [pc, #8]	; (800797c <_read+0xc>)
 8007972:	2258      	movs	r2, #88	; 0x58
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	f04f 30ff 	mov.w	r0, #4294967295
 800797a:	4770      	bx	lr
 800797c:	200009f4 	.word	0x200009f4

08007980 <_write>:
 8007980:	4b02      	ldr	r3, [pc, #8]	; (800798c <_write+0xc>)
 8007982:	2258      	movs	r2, #88	; 0x58
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295
 800798a:	4770      	bx	lr
 800798c:	200009f4 	.word	0x200009f4

08007990 <_exit>:
 8007990:	e7fe      	b.n	8007990 <_exit>
	...

08007994 <_init>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr

080079a0 <_fini>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	bf00      	nop
 80079a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a6:	bc08      	pop	{r3}
 80079a8:	469e      	mov	lr, r3
 80079aa:	4770      	bx	lr
